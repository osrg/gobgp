// Code generated by "stringer -type SAFI,API_TYPE,ROUTE_TYPE,NEXTHOP_FLAG"; DO NOT EDIT.

package zebra

import "fmt"

const _SAFI_name = "SAFI_UNICASTSAFI_MULTICASTFRR_SAFI_MPLS_VPNSAFI_MPLS_VPNFRR_SAFI_ENCAPFRR_SAFI_EVPNFRR_SAFI_LABELED_UNICASTSAFI_MAX"

var _SAFI_index = [...]uint8{0, 12, 26, 43, 56, 70, 83, 107, 115}

func (i SAFI) String() string {
	i -= 1
	if i >= SAFI(len(_SAFI_index)-1) {
		return fmt.Sprintf("SAFI(%d)", i+1)
	}
	return _SAFI_name[_SAFI_index[i]:_SAFI_index[i+1]]
}

const _API_TYPE_name = "FRR_INTERFACE_ADDFRR_INTERFACE_DELETEFRR_INTERFACE_ADDRESS_ADDFRR_INTERFACE_ADDRESS_DELETEFRR_INTERFACE_UPFRR_INTERFACE_DOWNFRR_IPV4_ROUTE_ADDFRR_IPV4_ROUTE_DELETEFRR_IPV6_ROUTE_ADDFRR_IPV6_ROUTE_DELETEFRR_REDISTRIBUTE_ADDFRR_REDISTRIBUTE_DELETEFRR_REDISTRIBUTE_DEFAULT_ADDFRR_REDISTRIBUTE_DEFAULT_DELETEFRR_ROUTER_ID_ADDFRR_ROUTER_ID_DELETEFRR_ROUTER_ID_UPDATEFRR_HELLOFRR_NEXTHOP_REGISTERFRR_NEXTHOP_UNREGISTERFRR_NEXTHOP_UPDATEFRR_INTERFACE_NBR_ADDRESS_ADDFRR_INTERFACE_NBR_ADDRESS_DELETEFRR_INTERFACE_BFD_DEST_UPDATEFRR_IMPORT_ROUTE_REGISTERFRR_IMPORT_ROUTE_UNREGISTERFRR_IMPORT_CHECK_UPDATEFRR_IPV4_ROUTE_IPV6_NEXTHOP_ADDFRR_BFD_DEST_REGISTERFRR_BFD_DEST_DEREGISTERFRR_BFD_DEST_UPDATEFRR_BFD_DEST_REPLAYFRR_REDISTRIBUTE_IPV4_ADDFRR_REDISTRIBUTE_IPV4_DELFRR_REDISTRIBUTE_IPV6_ADDFRR_REDISTRIBUTE_IPV6_DELFRR_VRF_UNREGISTERFRR_VRF_ADDFRR_VRF_DELETEFRR_INTERFACE_VRF_UPDATEFRR_BFD_CLIENT_REGISTERFRR_INTERFACE_ENABLE_RADVFRR_INTERFACE_DISABLE_RADVFRR_IPV4_NEXTHOP_LOOKUP_MRIBFRR_INTERFACE_LINK_PARAMSFRR_MPLS_LABELS_ADDFRR_MPLS_LABELS_DELETEFRR_IPV4_NEXTHOP_ADDFRR_IPV4_NEXTHOP_DELETEFRR_IPV6_NEXTHOP_ADDFRR_IPV6_NEXTHOP_DELETEFRR_IPMR_ROUTE_STATSFRR_LABEL_MANAGER_CONNECTFRR_GET_LABEL_CHUNKFRR_RELEASE_LABEL_CHUNKFRR_FEC_REGISTERFRR_FEC_UNREGISTERFRR_FEC_UPDATEFRR_MESSAGE_MAX"

var _API_TYPE_index = [...]uint16{0, 17, 37, 62, 90, 106, 124, 142, 163, 181, 202, 222, 245, 273, 304, 321, 341, 361, 370, 390, 412, 430, 459, 491, 520, 545, 572, 595, 626, 647, 670, 689, 708, 733, 758, 783, 808, 826, 837, 851, 875, 898, 923, 949, 977, 1002, 1021, 1043, 1063, 1086, 1106, 1129, 1149, 1174, 1193, 1216, 1232, 1250, 1264, 1279}

func (i API_TYPE) String() string {
	if i >= API_TYPE(len(_API_TYPE_index)-1) {
		return fmt.Sprintf("API_TYPE(%d)", i)
	}
	return _API_TYPE_name[_API_TYPE_index[i]:_API_TYPE_index[i+1]]
}

const _ROUTE_TYPE_name = "ROUTE_SYSTEMROUTE_KERNELROUTE_CONNECTROUTE_STATICROUTE_RIPROUTE_RIPNGROUTE_OSPFROUTE_OSPF6ROUTE_ISISROUTE_BGPROUTE_PIMFRR_ROUTE_EIGRPFRR_ROUTE_NHRPFRR_ROUTE_HSLSFRR_ROUTE_OLSRFRR_ROUTE_TABLEFRR_ROUTE_LDPFRR_ROUTE_VNCFRR_ROUTE_VNC_DIRECTFRR_ROUTE_VNC_DIRECT_RHFRR_ROUTE_BGP_DIRECTFRR_ROUTE_BGP_DIRECT_EXTFRR_ROUTE_BABELFRR_ROUTE_ALLFRR_ROUTE_MAX"

var _ROUTE_TYPE_index = [...]uint16{0, 12, 24, 37, 49, 58, 69, 79, 90, 100, 109, 118, 133, 147, 161, 175, 190, 203, 216, 236, 259, 279, 303, 318, 331, 344}

func (i ROUTE_TYPE) String() string {
	if i >= ROUTE_TYPE(len(_ROUTE_TYPE_index)-1) {
		return fmt.Sprintf("ROUTE_TYPE(%d)", i)
	}
	return _ROUTE_TYPE_name[_ROUTE_TYPE_index[i]:_ROUTE_TYPE_index[i+1]]
}

const _NEXTHOP_FLAG_name = "NEXTHOP_IFINDEXFRR_NEXTHOP_IPV4FRR_NEXTHOP_IPV4_IFINDEXFRR_NEXTHOP_IPV6FRR_NEXTHOP_IPV6_IFINDEXFRR_NEXTHOP_BLACKHOLENEXTHOP_IPV6_IFINDEXNEXTHOP_IPV6_IFNAMENEXTHOP_BLACKHOLE"

var _NEXTHOP_FLAG_index = [...]uint8{0, 15, 31, 55, 71, 95, 116, 136, 155, 172}

func (i NEXTHOP_FLAG) String() string {
	i -= 1
	if i >= NEXTHOP_FLAG(len(_NEXTHOP_FLAG_index)-1) {
		return fmt.Sprintf("NEXTHOP_FLAG(%d)", i+1)
	}
	return _NEXTHOP_FLAG_name[_NEXTHOP_FLAG_index[i]:_NEXTHOP_FLAG_index[i+1]]
}
