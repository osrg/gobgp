// Copyright (C) 2018 Nippon Telegraph and Telephone Corporation.
//
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation files
// (the "Software"), to deal in the Software without restriction,
// including without limitation the rights to use, copy, modify, merge,
// publish, distribute, sublicense, and/or sell copies of the Software,
// and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.29.2
// source: attribute.proto

package apipb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SRv6Behavior int32

const (
	SRv6Behavior_RESERVED              SRv6Behavior = 0
	SRv6Behavior_END                   SRv6Behavior = 1
	SRv6Behavior_END_WITH_PSP          SRv6Behavior = 2
	SRv6Behavior_END_WITH_USP          SRv6Behavior = 3
	SRv6Behavior_END_WITH_PSP_USP      SRv6Behavior = 4
	SRv6Behavior_ENDX                  SRv6Behavior = 5
	SRv6Behavior_ENDX_WITH_PSP         SRv6Behavior = 6
	SRv6Behavior_ENDX_WITH_USP         SRv6Behavior = 7
	SRv6Behavior_ENDX_WITH_PSP_USP     SRv6Behavior = 8
	SRv6Behavior_ENDT                  SRv6Behavior = 9
	SRv6Behavior_ENDT_WITH_PSP         SRv6Behavior = 10
	SRv6Behavior_ENDT_WITH_USP         SRv6Behavior = 11
	SRv6Behavior_ENDT_WITH_PSP_USP     SRv6Behavior = 12
	SRv6Behavior_END_B6_ENCAPS         SRv6Behavior = 14
	SRv6Behavior_END_BM                SRv6Behavior = 15
	SRv6Behavior_END_DX6               SRv6Behavior = 16
	SRv6Behavior_END_DX4               SRv6Behavior = 17
	SRv6Behavior_END_DT6               SRv6Behavior = 18
	SRv6Behavior_END_DT4               SRv6Behavior = 19
	SRv6Behavior_END_DT46              SRv6Behavior = 20
	SRv6Behavior_END_DX2               SRv6Behavior = 21
	SRv6Behavior_END_DX2V              SRv6Behavior = 22
	SRv6Behavior_END_DT2U              SRv6Behavior = 23
	SRv6Behavior_END_DT2M              SRv6Behavior = 24
	SRv6Behavior_END_B6_ENCAPS_Red     SRv6Behavior = 27
	SRv6Behavior_END_WITH_USD          SRv6Behavior = 28
	SRv6Behavior_END_WITH_PSP_USD      SRv6Behavior = 29
	SRv6Behavior_END_WITH_USP_USD      SRv6Behavior = 30
	SRv6Behavior_END_WITH_PSP_USP_USD  SRv6Behavior = 31
	SRv6Behavior_ENDX_WITH_USD         SRv6Behavior = 32
	SRv6Behavior_ENDX_WITH_PSP_USD     SRv6Behavior = 33
	SRv6Behavior_ENDX_WITH_USP_USD     SRv6Behavior = 34
	SRv6Behavior_ENDX_WITH_PSP_USP_USD SRv6Behavior = 35
	SRv6Behavior_ENDT_WITH_USD         SRv6Behavior = 36
	SRv6Behavior_ENDT_WITH_PSP_USD     SRv6Behavior = 37
	SRv6Behavior_ENDT_WITH_USP_USD     SRv6Behavior = 38
	SRv6Behavior_ENDT_WITH_PSP_USP_USD SRv6Behavior = 39
	SRv6Behavior_ENDM_GTP6D            SRv6Behavior = 69 // 0x0045
	SRv6Behavior_ENDM_GTP6DI           SRv6Behavior = 70 // 0x0046
	SRv6Behavior_ENDM_GTP6E            SRv6Behavior = 71 // 0x0047
	SRv6Behavior_ENDM_GTP4E            SRv6Behavior = 72 // 0x0048
)

// Enum value maps for SRv6Behavior.
var (
	SRv6Behavior_name = map[int32]string{
		0:  "RESERVED",
		1:  "END",
		2:  "END_WITH_PSP",
		3:  "END_WITH_USP",
		4:  "END_WITH_PSP_USP",
		5:  "ENDX",
		6:  "ENDX_WITH_PSP",
		7:  "ENDX_WITH_USP",
		8:  "ENDX_WITH_PSP_USP",
		9:  "ENDT",
		10: "ENDT_WITH_PSP",
		11: "ENDT_WITH_USP",
		12: "ENDT_WITH_PSP_USP",
		14: "END_B6_ENCAPS",
		15: "END_BM",
		16: "END_DX6",
		17: "END_DX4",
		18: "END_DT6",
		19: "END_DT4",
		20: "END_DT46",
		21: "END_DX2",
		22: "END_DX2V",
		23: "END_DT2U",
		24: "END_DT2M",
		27: "END_B6_ENCAPS_Red",
		28: "END_WITH_USD",
		29: "END_WITH_PSP_USD",
		30: "END_WITH_USP_USD",
		31: "END_WITH_PSP_USP_USD",
		32: "ENDX_WITH_USD",
		33: "ENDX_WITH_PSP_USD",
		34: "ENDX_WITH_USP_USD",
		35: "ENDX_WITH_PSP_USP_USD",
		36: "ENDT_WITH_USD",
		37: "ENDT_WITH_PSP_USD",
		38: "ENDT_WITH_USP_USD",
		39: "ENDT_WITH_PSP_USP_USD",
		69: "ENDM_GTP6D",
		70: "ENDM_GTP6DI",
		71: "ENDM_GTP6E",
		72: "ENDM_GTP4E",
	}
	SRv6Behavior_value = map[string]int32{
		"RESERVED":              0,
		"END":                   1,
		"END_WITH_PSP":          2,
		"END_WITH_USP":          3,
		"END_WITH_PSP_USP":      4,
		"ENDX":                  5,
		"ENDX_WITH_PSP":         6,
		"ENDX_WITH_USP":         7,
		"ENDX_WITH_PSP_USP":     8,
		"ENDT":                  9,
		"ENDT_WITH_PSP":         10,
		"ENDT_WITH_USP":         11,
		"ENDT_WITH_PSP_USP":     12,
		"END_B6_ENCAPS":         14,
		"END_BM":                15,
		"END_DX6":               16,
		"END_DX4":               17,
		"END_DT6":               18,
		"END_DT4":               19,
		"END_DT46":              20,
		"END_DX2":               21,
		"END_DX2V":              22,
		"END_DT2U":              23,
		"END_DT2M":              24,
		"END_B6_ENCAPS_Red":     27,
		"END_WITH_USD":          28,
		"END_WITH_PSP_USD":      29,
		"END_WITH_USP_USD":      30,
		"END_WITH_PSP_USP_USD":  31,
		"ENDX_WITH_USD":         32,
		"ENDX_WITH_PSP_USD":     33,
		"ENDX_WITH_USP_USD":     34,
		"ENDX_WITH_PSP_USP_USD": 35,
		"ENDT_WITH_USD":         36,
		"ENDT_WITH_PSP_USD":     37,
		"ENDT_WITH_USP_USD":     38,
		"ENDT_WITH_PSP_USP_USD": 39,
		"ENDM_GTP6D":            69,
		"ENDM_GTP6DI":           70,
		"ENDM_GTP6E":            71,
		"ENDM_GTP4E":            72,
	}
)

func (x SRv6Behavior) Enum() *SRv6Behavior {
	p := new(SRv6Behavior)
	*p = x
	return p
}

func (x SRv6Behavior) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SRv6Behavior) Descriptor() protoreflect.EnumDescriptor {
	return file_attribute_proto_enumTypes[0].Descriptor()
}

func (SRv6Behavior) Type() protoreflect.EnumType {
	return &file_attribute_proto_enumTypes[0]
}

func (x SRv6Behavior) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SRv6Behavior.Descriptor instead.
func (SRv6Behavior) EnumDescriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{0}
}

type ENLPType int32

const (
	ENLPType_Reserved ENLPType = 0
	ENLPType_Type1    ENLPType = 1
	ENLPType_Type2    ENLPType = 2
	ENLPType_Type3    ENLPType = 3
	ENLPType_Type4    ENLPType = 4
)

// Enum value maps for ENLPType.
var (
	ENLPType_name = map[int32]string{
		0: "Reserved",
		1: "Type1",
		2: "Type2",
		3: "Type3",
		4: "Type4",
	}
	ENLPType_value = map[string]int32{
		"Reserved": 0,
		"Type1":    1,
		"Type2":    2,
		"Type3":    3,
		"Type4":    4,
	}
)

func (x ENLPType) Enum() *ENLPType {
	p := new(ENLPType)
	*p = x
	return p
}

func (x ENLPType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ENLPType) Descriptor() protoreflect.EnumDescriptor {
	return file_attribute_proto_enumTypes[1].Descriptor()
}

func (ENLPType) Type() protoreflect.EnumType {
	return &file_attribute_proto_enumTypes[1]
}

func (x ENLPType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ENLPType.Descriptor instead.
func (ENLPType) EnumDescriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{1}
}

type AsSegment_Type int32

const (
	AsSegment_UNKNOWN            AsSegment_Type = 0
	AsSegment_AS_SET             AsSegment_Type = 1
	AsSegment_AS_SEQUENCE        AsSegment_Type = 2
	AsSegment_AS_CONFED_SEQUENCE AsSegment_Type = 3
	AsSegment_AS_CONFED_SET      AsSegment_Type = 4
)

// Enum value maps for AsSegment_Type.
var (
	AsSegment_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "AS_SET",
		2: "AS_SEQUENCE",
		3: "AS_CONFED_SEQUENCE",
		4: "AS_CONFED_SET",
	}
	AsSegment_Type_value = map[string]int32{
		"UNKNOWN":            0,
		"AS_SET":             1,
		"AS_SEQUENCE":        2,
		"AS_CONFED_SEQUENCE": 3,
		"AS_CONFED_SET":      4,
	}
)

func (x AsSegment_Type) Enum() *AsSegment_Type {
	p := new(AsSegment_Type)
	*p = x
	return p
}

func (x AsSegment_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AsSegment_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_attribute_proto_enumTypes[2].Descriptor()
}

func (AsSegment_Type) Type() protoreflect.EnumType {
	return &file_attribute_proto_enumTypes[2]
}

func (x AsSegment_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AsSegment_Type.Descriptor instead.
func (AsSegment_Type) EnumDescriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{2, 0}
}

type Attribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Attr:
	//
	//	*Attribute_Unknown
	//	*Attribute_Origin
	//	*Attribute_AsPath
	//	*Attribute_NextHop
	//	*Attribute_MultiExitDisc
	//	*Attribute_LocalPref
	//	*Attribute_AtomicAggregate
	//	*Attribute_Aggregator
	//	*Attribute_Communities
	//	*Attribute_OriginatorId
	//	*Attribute_ClusterList
	//	*Attribute_MpReach
	//	*Attribute_MpUnreach
	//	*Attribute_ExtendedCommunities
	//	*Attribute_As4Path
	//	*Attribute_As4Aggregator
	//	*Attribute_PmsiTunnel
	//	*Attribute_TunnelEncap
	//	*Attribute_Ip6ExtendedCommunities
	//	*Attribute_Aigp
	//	*Attribute_LargeCommunities
	//	*Attribute_Ls
	//	*Attribute_PrefixSid
	Attr isAttribute_Attr `protobuf_oneof:"attr"`
}

func (x *Attribute) Reset() {
	*x = Attribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attribute) ProtoMessage() {}

func (x *Attribute) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attribute.ProtoReflect.Descriptor instead.
func (*Attribute) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{0}
}

func (m *Attribute) GetAttr() isAttribute_Attr {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (x *Attribute) GetUnknown() *UnknownAttribute {
	if x, ok := x.GetAttr().(*Attribute_Unknown); ok {
		return x.Unknown
	}
	return nil
}

func (x *Attribute) GetOrigin() *OriginAttribute {
	if x, ok := x.GetAttr().(*Attribute_Origin); ok {
		return x.Origin
	}
	return nil
}

func (x *Attribute) GetAsPath() *AsPathAttribute {
	if x, ok := x.GetAttr().(*Attribute_AsPath); ok {
		return x.AsPath
	}
	return nil
}

func (x *Attribute) GetNextHop() *NextHopAttribute {
	if x, ok := x.GetAttr().(*Attribute_NextHop); ok {
		return x.NextHop
	}
	return nil
}

func (x *Attribute) GetMultiExitDisc() *MultiExitDiscAttribute {
	if x, ok := x.GetAttr().(*Attribute_MultiExitDisc); ok {
		return x.MultiExitDisc
	}
	return nil
}

func (x *Attribute) GetLocalPref() *LocalPrefAttribute {
	if x, ok := x.GetAttr().(*Attribute_LocalPref); ok {
		return x.LocalPref
	}
	return nil
}

func (x *Attribute) GetAtomicAggregate() *AtomicAggregateAttribute {
	if x, ok := x.GetAttr().(*Attribute_AtomicAggregate); ok {
		return x.AtomicAggregate
	}
	return nil
}

func (x *Attribute) GetAggregator() *AggregatorAttribute {
	if x, ok := x.GetAttr().(*Attribute_Aggregator); ok {
		return x.Aggregator
	}
	return nil
}

func (x *Attribute) GetCommunities() *CommunitiesAttribute {
	if x, ok := x.GetAttr().(*Attribute_Communities); ok {
		return x.Communities
	}
	return nil
}

func (x *Attribute) GetOriginatorId() *OriginatorIdAttribute {
	if x, ok := x.GetAttr().(*Attribute_OriginatorId); ok {
		return x.OriginatorId
	}
	return nil
}

func (x *Attribute) GetClusterList() *ClusterListAttribute {
	if x, ok := x.GetAttr().(*Attribute_ClusterList); ok {
		return x.ClusterList
	}
	return nil
}

func (x *Attribute) GetMpReach() *MpReachNLRIAttribute {
	if x, ok := x.GetAttr().(*Attribute_MpReach); ok {
		return x.MpReach
	}
	return nil
}

func (x *Attribute) GetMpUnreach() *MpUnreachNLRIAttribute {
	if x, ok := x.GetAttr().(*Attribute_MpUnreach); ok {
		return x.MpUnreach
	}
	return nil
}

func (x *Attribute) GetExtendedCommunities() *ExtendedCommunitiesAttribute {
	if x, ok := x.GetAttr().(*Attribute_ExtendedCommunities); ok {
		return x.ExtendedCommunities
	}
	return nil
}

func (x *Attribute) GetAs4Path() *As4PathAttribute {
	if x, ok := x.GetAttr().(*Attribute_As4Path); ok {
		return x.As4Path
	}
	return nil
}

func (x *Attribute) GetAs4Aggregator() *As4AggregatorAttribute {
	if x, ok := x.GetAttr().(*Attribute_As4Aggregator); ok {
		return x.As4Aggregator
	}
	return nil
}

func (x *Attribute) GetPmsiTunnel() *PmsiTunnelAttribute {
	if x, ok := x.GetAttr().(*Attribute_PmsiTunnel); ok {
		return x.PmsiTunnel
	}
	return nil
}

func (x *Attribute) GetTunnelEncap() *TunnelEncapAttribute {
	if x, ok := x.GetAttr().(*Attribute_TunnelEncap); ok {
		return x.TunnelEncap
	}
	return nil
}

func (x *Attribute) GetIp6ExtendedCommunities() *IP6ExtendedCommunitiesAttribute {
	if x, ok := x.GetAttr().(*Attribute_Ip6ExtendedCommunities); ok {
		return x.Ip6ExtendedCommunities
	}
	return nil
}

func (x *Attribute) GetAigp() *AigpAttribute {
	if x, ok := x.GetAttr().(*Attribute_Aigp); ok {
		return x.Aigp
	}
	return nil
}

func (x *Attribute) GetLargeCommunities() *LargeCommunitiesAttribute {
	if x, ok := x.GetAttr().(*Attribute_LargeCommunities); ok {
		return x.LargeCommunities
	}
	return nil
}

func (x *Attribute) GetLs() *LsAttribute {
	if x, ok := x.GetAttr().(*Attribute_Ls); ok {
		return x.Ls
	}
	return nil
}

func (x *Attribute) GetPrefixSid() *PrefixSID {
	if x, ok := x.GetAttr().(*Attribute_PrefixSid); ok {
		return x.PrefixSid
	}
	return nil
}

type isAttribute_Attr interface {
	isAttribute_Attr()
}

type Attribute_Unknown struct {
	Unknown *UnknownAttribute `protobuf:"bytes,1,opt,name=unknown,proto3,oneof"`
}

type Attribute_Origin struct {
	Origin *OriginAttribute `protobuf:"bytes,2,opt,name=origin,proto3,oneof"`
}

type Attribute_AsPath struct {
	AsPath *AsPathAttribute `protobuf:"bytes,3,opt,name=as_path,json=asPath,proto3,oneof"`
}

type Attribute_NextHop struct {
	NextHop *NextHopAttribute `protobuf:"bytes,4,opt,name=next_hop,json=nextHop,proto3,oneof"`
}

type Attribute_MultiExitDisc struct {
	MultiExitDisc *MultiExitDiscAttribute `protobuf:"bytes,5,opt,name=multi_exit_disc,json=multiExitDisc,proto3,oneof"`
}

type Attribute_LocalPref struct {
	LocalPref *LocalPrefAttribute `protobuf:"bytes,6,opt,name=local_pref,json=localPref,proto3,oneof"`
}

type Attribute_AtomicAggregate struct {
	AtomicAggregate *AtomicAggregateAttribute `protobuf:"bytes,7,opt,name=atomic_aggregate,json=atomicAggregate,proto3,oneof"`
}

type Attribute_Aggregator struct {
	Aggregator *AggregatorAttribute `protobuf:"bytes,8,opt,name=aggregator,proto3,oneof"`
}

type Attribute_Communities struct {
	Communities *CommunitiesAttribute `protobuf:"bytes,9,opt,name=communities,proto3,oneof"`
}

type Attribute_OriginatorId struct {
	OriginatorId *OriginatorIdAttribute `protobuf:"bytes,10,opt,name=originator_id,json=originatorId,proto3,oneof"`
}

type Attribute_ClusterList struct {
	ClusterList *ClusterListAttribute `protobuf:"bytes,11,opt,name=cluster_list,json=clusterList,proto3,oneof"`
}

type Attribute_MpReach struct {
	MpReach *MpReachNLRIAttribute `protobuf:"bytes,12,opt,name=mp_reach,json=mpReach,proto3,oneof"`
}

type Attribute_MpUnreach struct {
	MpUnreach *MpUnreachNLRIAttribute `protobuf:"bytes,13,opt,name=mp_unreach,json=mpUnreach,proto3,oneof"`
}

type Attribute_ExtendedCommunities struct {
	ExtendedCommunities *ExtendedCommunitiesAttribute `protobuf:"bytes,14,opt,name=extended_communities,json=extendedCommunities,proto3,oneof"`
}

type Attribute_As4Path struct {
	As4Path *As4PathAttribute `protobuf:"bytes,15,opt,name=as4_path,json=as4Path,proto3,oneof"`
}

type Attribute_As4Aggregator struct {
	As4Aggregator *As4AggregatorAttribute `protobuf:"bytes,16,opt,name=as4_aggregator,json=as4Aggregator,proto3,oneof"`
}

type Attribute_PmsiTunnel struct {
	PmsiTunnel *PmsiTunnelAttribute `protobuf:"bytes,17,opt,name=pmsi_tunnel,json=pmsiTunnel,proto3,oneof"`
}

type Attribute_TunnelEncap struct {
	TunnelEncap *TunnelEncapAttribute `protobuf:"bytes,18,opt,name=tunnel_encap,json=tunnelEncap,proto3,oneof"`
}

type Attribute_Ip6ExtendedCommunities struct {
	Ip6ExtendedCommunities *IP6ExtendedCommunitiesAttribute `protobuf:"bytes,19,opt,name=ip6_extended_communities,json=ip6ExtendedCommunities,proto3,oneof"`
}

type Attribute_Aigp struct {
	Aigp *AigpAttribute `protobuf:"bytes,20,opt,name=aigp,proto3,oneof"`
}

type Attribute_LargeCommunities struct {
	LargeCommunities *LargeCommunitiesAttribute `protobuf:"bytes,21,opt,name=large_communities,json=largeCommunities,proto3,oneof"`
}

type Attribute_Ls struct {
	Ls *LsAttribute `protobuf:"bytes,22,opt,name=ls,proto3,oneof"`
}

type Attribute_PrefixSid struct {
	PrefixSid *PrefixSID `protobuf:"bytes,23,opt,name=prefix_sid,json=prefixSid,proto3,oneof"`
}

func (*Attribute_Unknown) isAttribute_Attr() {}

func (*Attribute_Origin) isAttribute_Attr() {}

func (*Attribute_AsPath) isAttribute_Attr() {}

func (*Attribute_NextHop) isAttribute_Attr() {}

func (*Attribute_MultiExitDisc) isAttribute_Attr() {}

func (*Attribute_LocalPref) isAttribute_Attr() {}

func (*Attribute_AtomicAggregate) isAttribute_Attr() {}

func (*Attribute_Aggregator) isAttribute_Attr() {}

func (*Attribute_Communities) isAttribute_Attr() {}

func (*Attribute_OriginatorId) isAttribute_Attr() {}

func (*Attribute_ClusterList) isAttribute_Attr() {}

func (*Attribute_MpReach) isAttribute_Attr() {}

func (*Attribute_MpUnreach) isAttribute_Attr() {}

func (*Attribute_ExtendedCommunities) isAttribute_Attr() {}

func (*Attribute_As4Path) isAttribute_Attr() {}

func (*Attribute_As4Aggregator) isAttribute_Attr() {}

func (*Attribute_PmsiTunnel) isAttribute_Attr() {}

func (*Attribute_TunnelEncap) isAttribute_Attr() {}

func (*Attribute_Ip6ExtendedCommunities) isAttribute_Attr() {}

func (*Attribute_Aigp) isAttribute_Attr() {}

func (*Attribute_LargeCommunities) isAttribute_Attr() {}

func (*Attribute_Ls) isAttribute_Attr() {}

func (*Attribute_PrefixSid) isAttribute_Attr() {}

type OriginAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Origin uint32 `protobuf:"varint,1,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (x *OriginAttribute) Reset() {
	*x = OriginAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OriginAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OriginAttribute) ProtoMessage() {}

func (x *OriginAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OriginAttribute.ProtoReflect.Descriptor instead.
func (*OriginAttribute) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{1}
}

func (x *OriginAttribute) GetOrigin() uint32 {
	if x != nil {
		return x.Origin
	}
	return 0
}

type AsSegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    AsSegment_Type `protobuf:"varint,1,opt,name=type,proto3,enum=apipb.AsSegment_Type" json:"type,omitempty"`
	Numbers []uint32       `protobuf:"varint,2,rep,packed,name=numbers,proto3" json:"numbers,omitempty"`
}

func (x *AsSegment) Reset() {
	*x = AsSegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsSegment) ProtoMessage() {}

func (x *AsSegment) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsSegment.ProtoReflect.Descriptor instead.
func (*AsSegment) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{2}
}

func (x *AsSegment) GetType() AsSegment_Type {
	if x != nil {
		return x.Type
	}
	return AsSegment_UNKNOWN
}

func (x *AsSegment) GetNumbers() []uint32 {
	if x != nil {
		return x.Numbers
	}
	return nil
}

type AsPathAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Segments []*AsSegment `protobuf:"bytes,1,rep,name=segments,proto3" json:"segments,omitempty"`
}

func (x *AsPathAttribute) Reset() {
	*x = AsPathAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsPathAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsPathAttribute) ProtoMessage() {}

func (x *AsPathAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsPathAttribute.ProtoReflect.Descriptor instead.
func (*AsPathAttribute) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{3}
}

func (x *AsPathAttribute) GetSegments() []*AsSegment {
	if x != nil {
		return x.Segments
	}
	return nil
}

type NextHopAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextHop string `protobuf:"bytes,1,opt,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"`
}

func (x *NextHopAttribute) Reset() {
	*x = NextHopAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextHopAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextHopAttribute) ProtoMessage() {}

func (x *NextHopAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextHopAttribute.ProtoReflect.Descriptor instead.
func (*NextHopAttribute) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{4}
}

func (x *NextHopAttribute) GetNextHop() string {
	if x != nil {
		return x.NextHop
	}
	return ""
}

type MultiExitDiscAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Med uint32 `protobuf:"varint,1,opt,name=med,proto3" json:"med,omitempty"`
}

func (x *MultiExitDiscAttribute) Reset() {
	*x = MultiExitDiscAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiExitDiscAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiExitDiscAttribute) ProtoMessage() {}

func (x *MultiExitDiscAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiExitDiscAttribute.ProtoReflect.Descriptor instead.
func (*MultiExitDiscAttribute) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{5}
}

func (x *MultiExitDiscAttribute) GetMed() uint32 {
	if x != nil {
		return x.Med
	}
	return 0
}

type LocalPrefAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalPref uint32 `protobuf:"varint,1,opt,name=local_pref,json=localPref,proto3" json:"local_pref,omitempty"`
}

func (x *LocalPrefAttribute) Reset() {
	*x = LocalPrefAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalPrefAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalPrefAttribute) ProtoMessage() {}

func (x *LocalPrefAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalPrefAttribute.ProtoReflect.Descriptor instead.
func (*LocalPrefAttribute) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{6}
}

func (x *LocalPrefAttribute) GetLocalPref() uint32 {
	if x != nil {
		return x.LocalPref
	}
	return 0
}

type AtomicAggregateAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AtomicAggregateAttribute) Reset() {
	*x = AtomicAggregateAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AtomicAggregateAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AtomicAggregateAttribute) ProtoMessage() {}

func (x *AtomicAggregateAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AtomicAggregateAttribute.ProtoReflect.Descriptor instead.
func (*AtomicAggregateAttribute) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{7}
}

type AggregatorAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asn     uint32 `protobuf:"varint,1,opt,name=asn,proto3" json:"asn,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *AggregatorAttribute) Reset() {
	*x = AggregatorAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregatorAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregatorAttribute) ProtoMessage() {}

func (x *AggregatorAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregatorAttribute.ProtoReflect.Descriptor instead.
func (*AggregatorAttribute) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{8}
}

func (x *AggregatorAttribute) GetAsn() uint32 {
	if x != nil {
		return x.Asn
	}
	return 0
}

func (x *AggregatorAttribute) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type CommunitiesAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Communities []uint32 `protobuf:"varint,1,rep,packed,name=communities,proto3" json:"communities,omitempty"`
}

func (x *CommunitiesAttribute) Reset() {
	*x = CommunitiesAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommunitiesAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommunitiesAttribute) ProtoMessage() {}

func (x *CommunitiesAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommunitiesAttribute.ProtoReflect.Descriptor instead.
func (*CommunitiesAttribute) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{9}
}

func (x *CommunitiesAttribute) GetCommunities() []uint32 {
	if x != nil {
		return x.Communities
	}
	return nil
}

type OriginatorIdAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *OriginatorIdAttribute) Reset() {
	*x = OriginatorIdAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OriginatorIdAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OriginatorIdAttribute) ProtoMessage() {}

func (x *OriginatorIdAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OriginatorIdAttribute.ProtoReflect.Descriptor instead.
func (*OriginatorIdAttribute) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{10}
}

func (x *OriginatorIdAttribute) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ClusterListAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *ClusterListAttribute) Reset() {
	*x = ClusterListAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterListAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterListAttribute) ProtoMessage() {}

func (x *ClusterListAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterListAttribute.ProtoReflect.Descriptor instead.
func (*ClusterListAttribute) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{11}
}

func (x *ClusterListAttribute) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type MpReachNLRIAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Family   *Family  `protobuf:"bytes,1,opt,name=family,proto3" json:"family,omitempty"`
	NextHops []string `protobuf:"bytes,2,rep,name=next_hops,json=nextHops,proto3" json:"next_hops,omitempty"`
	Nlris    []*NLRI  `protobuf:"bytes,3,rep,name=nlris,proto3" json:"nlris,omitempty"`
}

func (x *MpReachNLRIAttribute) Reset() {
	*x = MpReachNLRIAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MpReachNLRIAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MpReachNLRIAttribute) ProtoMessage() {}

func (x *MpReachNLRIAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MpReachNLRIAttribute.ProtoReflect.Descriptor instead.
func (*MpReachNLRIAttribute) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{12}
}

func (x *MpReachNLRIAttribute) GetFamily() *Family {
	if x != nil {
		return x.Family
	}
	return nil
}

func (x *MpReachNLRIAttribute) GetNextHops() []string {
	if x != nil {
		return x.NextHops
	}
	return nil
}

func (x *MpReachNLRIAttribute) GetNlris() []*NLRI {
	if x != nil {
		return x.Nlris
	}
	return nil
}

type MpUnreachNLRIAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Family *Family `protobuf:"bytes,1,opt,name=family,proto3" json:"family,omitempty"`
	// The same as NLRI field of MpReachNLRIAttribute
	Nlris []*NLRI `protobuf:"bytes,3,rep,name=nlris,proto3" json:"nlris,omitempty"`
}

func (x *MpUnreachNLRIAttribute) Reset() {
	*x = MpUnreachNLRIAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MpUnreachNLRIAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MpUnreachNLRIAttribute) ProtoMessage() {}

func (x *MpUnreachNLRIAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MpUnreachNLRIAttribute.ProtoReflect.Descriptor instead.
func (*MpUnreachNLRIAttribute) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{13}
}

func (x *MpUnreachNLRIAttribute) GetFamily() *Family {
	if x != nil {
		return x.Family
	}
	return nil
}

func (x *MpUnreachNLRIAttribute) GetNlris() []*NLRI {
	if x != nil {
		return x.Nlris
	}
	return nil
}

type ExtendedCommunitiesAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Communities []*ExtendedCommunity `protobuf:"bytes,1,rep,name=communities,proto3" json:"communities,omitempty"`
}

func (x *ExtendedCommunitiesAttribute) Reset() {
	*x = ExtendedCommunitiesAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtendedCommunitiesAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendedCommunitiesAttribute) ProtoMessage() {}

func (x *ExtendedCommunitiesAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendedCommunitiesAttribute.ProtoReflect.Descriptor instead.
func (*ExtendedCommunitiesAttribute) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{14}
}

func (x *ExtendedCommunitiesAttribute) GetCommunities() []*ExtendedCommunity {
	if x != nil {
		return x.Communities
	}
	return nil
}

type As4PathAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Segments []*AsSegment `protobuf:"bytes,1,rep,name=segments,proto3" json:"segments,omitempty"`
}

func (x *As4PathAttribute) Reset() {
	*x = As4PathAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *As4PathAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*As4PathAttribute) ProtoMessage() {}

func (x *As4PathAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use As4PathAttribute.ProtoReflect.Descriptor instead.
func (*As4PathAttribute) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{15}
}

func (x *As4PathAttribute) GetSegments() []*AsSegment {
	if x != nil {
		return x.Segments
	}
	return nil
}

type As4AggregatorAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asn     uint32 `protobuf:"varint,2,opt,name=asn,proto3" json:"asn,omitempty"`
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *As4AggregatorAttribute) Reset() {
	*x = As4AggregatorAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *As4AggregatorAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*As4AggregatorAttribute) ProtoMessage() {}

func (x *As4AggregatorAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use As4AggregatorAttribute.ProtoReflect.Descriptor instead.
func (*As4AggregatorAttribute) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{16}
}

func (x *As4AggregatorAttribute) GetAsn() uint32 {
	if x != nil {
		return x.Asn
	}
	return 0
}

func (x *As4AggregatorAttribute) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type PmsiTunnelAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags uint32 `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	Type  uint32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Label uint32 `protobuf:"varint,3,opt,name=label,proto3" json:"label,omitempty"`
	Id    []byte `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PmsiTunnelAttribute) Reset() {
	*x = PmsiTunnelAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PmsiTunnelAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PmsiTunnelAttribute) ProtoMessage() {}

func (x *PmsiTunnelAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PmsiTunnelAttribute.ProtoReflect.Descriptor instead.
func (*PmsiTunnelAttribute) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{17}
}

func (x *PmsiTunnelAttribute) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *PmsiTunnelAttribute) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *PmsiTunnelAttribute) GetLabel() uint32 {
	if x != nil {
		return x.Label
	}
	return 0
}

func (x *PmsiTunnelAttribute) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

type TunnelEncapSubTLVEncapsulation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    uint32 `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	Cookie []byte `protobuf:"bytes,2,opt,name=cookie,proto3" json:"cookie,omitempty"`
}

func (x *TunnelEncapSubTLVEncapsulation) Reset() {
	*x = TunnelEncapSubTLVEncapsulation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelEncapSubTLVEncapsulation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelEncapSubTLVEncapsulation) ProtoMessage() {}

func (x *TunnelEncapSubTLVEncapsulation) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelEncapSubTLVEncapsulation.ProtoReflect.Descriptor instead.
func (*TunnelEncapSubTLVEncapsulation) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{18}
}

func (x *TunnelEncapSubTLVEncapsulation) GetKey() uint32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *TunnelEncapSubTLVEncapsulation) GetCookie() []byte {
	if x != nil {
		return x.Cookie
	}
	return nil
}

type TunnelEncapSubTLVProtocol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol uint32 `protobuf:"varint,1,opt,name=protocol,proto3" json:"protocol,omitempty"`
}

func (x *TunnelEncapSubTLVProtocol) Reset() {
	*x = TunnelEncapSubTLVProtocol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelEncapSubTLVProtocol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelEncapSubTLVProtocol) ProtoMessage() {}

func (x *TunnelEncapSubTLVProtocol) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelEncapSubTLVProtocol.ProtoReflect.Descriptor instead.
func (*TunnelEncapSubTLVProtocol) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{19}
}

func (x *TunnelEncapSubTLVProtocol) GetProtocol() uint32 {
	if x != nil {
		return x.Protocol
	}
	return 0
}

type TunnelEncapSubTLVColor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Color uint32 `protobuf:"varint,1,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *TunnelEncapSubTLVColor) Reset() {
	*x = TunnelEncapSubTLVColor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelEncapSubTLVColor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelEncapSubTLVColor) ProtoMessage() {}

func (x *TunnelEncapSubTLVColor) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelEncapSubTLVColor.ProtoReflect.Descriptor instead.
func (*TunnelEncapSubTLVColor) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{20}
}

func (x *TunnelEncapSubTLVColor) GetColor() uint32 {
	if x != nil {
		return x.Color
	}
	return 0
}

type TunnelEncapSubTLVSRPreference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags      uint32 `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	Preference uint32 `protobuf:"varint,2,opt,name=preference,proto3" json:"preference,omitempty"`
}

func (x *TunnelEncapSubTLVSRPreference) Reset() {
	*x = TunnelEncapSubTLVSRPreference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelEncapSubTLVSRPreference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelEncapSubTLVSRPreference) ProtoMessage() {}

func (x *TunnelEncapSubTLVSRPreference) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelEncapSubTLVSRPreference.ProtoReflect.Descriptor instead.
func (*TunnelEncapSubTLVSRPreference) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{21}
}

func (x *TunnelEncapSubTLVSRPreference) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *TunnelEncapSubTLVSRPreference) GetPreference() uint32 {
	if x != nil {
		return x.Preference
	}
	return 0
}

type TunnelEncapSubTLVSRCandidatePathName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CandidatePathName string `protobuf:"bytes,1,opt,name=candidate_path_name,json=candidatePathName,proto3" json:"candidate_path_name,omitempty"`
}

func (x *TunnelEncapSubTLVSRCandidatePathName) Reset() {
	*x = TunnelEncapSubTLVSRCandidatePathName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelEncapSubTLVSRCandidatePathName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelEncapSubTLVSRCandidatePathName) ProtoMessage() {}

func (x *TunnelEncapSubTLVSRCandidatePathName) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelEncapSubTLVSRCandidatePathName.ProtoReflect.Descriptor instead.
func (*TunnelEncapSubTLVSRCandidatePathName) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{22}
}

func (x *TunnelEncapSubTLVSRCandidatePathName) GetCandidatePathName() string {
	if x != nil {
		return x.CandidatePathName
	}
	return ""
}

type TunnelEncapSubTLVSRPriority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Priority uint32 `protobuf:"varint,1,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *TunnelEncapSubTLVSRPriority) Reset() {
	*x = TunnelEncapSubTLVSRPriority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelEncapSubTLVSRPriority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelEncapSubTLVSRPriority) ProtoMessage() {}

func (x *TunnelEncapSubTLVSRPriority) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelEncapSubTLVSRPriority.ProtoReflect.Descriptor instead.
func (*TunnelEncapSubTLVSRPriority) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{23}
}

func (x *TunnelEncapSubTLVSRPriority) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

type TunnelEncapSubTLVSRBindingSID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Bsid:
	//
	//	*TunnelEncapSubTLVSRBindingSID_SrBindingSid
	//	*TunnelEncapSubTLVSRBindingSID_Srv6BindingSid
	Bsid isTunnelEncapSubTLVSRBindingSID_Bsid `protobuf_oneof:"bsid"`
}

func (x *TunnelEncapSubTLVSRBindingSID) Reset() {
	*x = TunnelEncapSubTLVSRBindingSID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelEncapSubTLVSRBindingSID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelEncapSubTLVSRBindingSID) ProtoMessage() {}

func (x *TunnelEncapSubTLVSRBindingSID) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelEncapSubTLVSRBindingSID.ProtoReflect.Descriptor instead.
func (*TunnelEncapSubTLVSRBindingSID) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{24}
}

func (m *TunnelEncapSubTLVSRBindingSID) GetBsid() isTunnelEncapSubTLVSRBindingSID_Bsid {
	if m != nil {
		return m.Bsid
	}
	return nil
}

func (x *TunnelEncapSubTLVSRBindingSID) GetSrBindingSid() *SRBindingSID {
	if x, ok := x.GetBsid().(*TunnelEncapSubTLVSRBindingSID_SrBindingSid); ok {
		return x.SrBindingSid
	}
	return nil
}

func (x *TunnelEncapSubTLVSRBindingSID) GetSrv6BindingSid() *SRv6BindingSID {
	if x, ok := x.GetBsid().(*TunnelEncapSubTLVSRBindingSID_Srv6BindingSid); ok {
		return x.Srv6BindingSid
	}
	return nil
}

type isTunnelEncapSubTLVSRBindingSID_Bsid interface {
	isTunnelEncapSubTLVSRBindingSID_Bsid()
}

type TunnelEncapSubTLVSRBindingSID_SrBindingSid struct {
	SrBindingSid *SRBindingSID `protobuf:"bytes,1,opt,name=sr_binding_sid,json=srBindingSid,proto3,oneof"`
}

type TunnelEncapSubTLVSRBindingSID_Srv6BindingSid struct {
	Srv6BindingSid *SRv6BindingSID `protobuf:"bytes,2,opt,name=srv6_binding_sid,json=srv6BindingSid,proto3,oneof"`
}

func (*TunnelEncapSubTLVSRBindingSID_SrBindingSid) isTunnelEncapSubTLVSRBindingSID_Bsid() {}

func (*TunnelEncapSubTLVSRBindingSID_Srv6BindingSid) isTunnelEncapSubTLVSRBindingSID_Bsid() {}

type SRBindingSID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SFlag bool   `protobuf:"varint,1,opt,name=s_flag,json=sFlag,proto3" json:"s_flag,omitempty"`
	IFlag bool   `protobuf:"varint,2,opt,name=i_flag,json=iFlag,proto3" json:"i_flag,omitempty"`
	Sid   []byte `protobuf:"bytes,3,opt,name=sid,proto3" json:"sid,omitempty"`
}

func (x *SRBindingSID) Reset() {
	*x = SRBindingSID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRBindingSID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRBindingSID) ProtoMessage() {}

func (x *SRBindingSID) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRBindingSID.ProtoReflect.Descriptor instead.
func (*SRBindingSID) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{25}
}

func (x *SRBindingSID) GetSFlag() bool {
	if x != nil {
		return x.SFlag
	}
	return false
}

func (x *SRBindingSID) GetIFlag() bool {
	if x != nil {
		return x.IFlag
	}
	return false
}

func (x *SRBindingSID) GetSid() []byte {
	if x != nil {
		return x.Sid
	}
	return nil
}

type SRv6EndPointBehavior struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Behavior SRv6Behavior `protobuf:"varint,1,opt,name=behavior,proto3,enum=apipb.SRv6Behavior" json:"behavior,omitempty"`
	BlockLen uint32       `protobuf:"varint,2,opt,name=block_len,json=blockLen,proto3" json:"block_len,omitempty"`
	NodeLen  uint32       `protobuf:"varint,3,opt,name=node_len,json=nodeLen,proto3" json:"node_len,omitempty"`
	FuncLen  uint32       `protobuf:"varint,4,opt,name=func_len,json=funcLen,proto3" json:"func_len,omitempty"`
	ArgLen   uint32       `protobuf:"varint,5,opt,name=arg_len,json=argLen,proto3" json:"arg_len,omitempty"`
}

func (x *SRv6EndPointBehavior) Reset() {
	*x = SRv6EndPointBehavior{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRv6EndPointBehavior) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRv6EndPointBehavior) ProtoMessage() {}

func (x *SRv6EndPointBehavior) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRv6EndPointBehavior.ProtoReflect.Descriptor instead.
func (*SRv6EndPointBehavior) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{26}
}

func (x *SRv6EndPointBehavior) GetBehavior() SRv6Behavior {
	if x != nil {
		return x.Behavior
	}
	return SRv6Behavior_RESERVED
}

func (x *SRv6EndPointBehavior) GetBlockLen() uint32 {
	if x != nil {
		return x.BlockLen
	}
	return 0
}

func (x *SRv6EndPointBehavior) GetNodeLen() uint32 {
	if x != nil {
		return x.NodeLen
	}
	return 0
}

func (x *SRv6EndPointBehavior) GetFuncLen() uint32 {
	if x != nil {
		return x.FuncLen
	}
	return 0
}

func (x *SRv6EndPointBehavior) GetArgLen() uint32 {
	if x != nil {
		return x.ArgLen
	}
	return 0
}

type SRv6BindingSID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SFlag                     bool                  `protobuf:"varint,1,opt,name=s_flag,json=sFlag,proto3" json:"s_flag,omitempty"`
	IFlag                     bool                  `protobuf:"varint,2,opt,name=i_flag,json=iFlag,proto3" json:"i_flag,omitempty"`
	BFlag                     bool                  `protobuf:"varint,3,opt,name=b_flag,json=bFlag,proto3" json:"b_flag,omitempty"`
	Sid                       []byte                `protobuf:"bytes,4,opt,name=sid,proto3" json:"sid,omitempty"`
	EndpointBehaviorStructure *SRv6EndPointBehavior `protobuf:"bytes,5,opt,name=endpoint_behavior_structure,json=endpointBehaviorStructure,proto3" json:"endpoint_behavior_structure,omitempty"`
}

func (x *SRv6BindingSID) Reset() {
	*x = SRv6BindingSID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRv6BindingSID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRv6BindingSID) ProtoMessage() {}

func (x *SRv6BindingSID) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRv6BindingSID.ProtoReflect.Descriptor instead.
func (*SRv6BindingSID) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{27}
}

func (x *SRv6BindingSID) GetSFlag() bool {
	if x != nil {
		return x.SFlag
	}
	return false
}

func (x *SRv6BindingSID) GetIFlag() bool {
	if x != nil {
		return x.IFlag
	}
	return false
}

func (x *SRv6BindingSID) GetBFlag() bool {
	if x != nil {
		return x.BFlag
	}
	return false
}

func (x *SRv6BindingSID) GetSid() []byte {
	if x != nil {
		return x.Sid
	}
	return nil
}

func (x *SRv6BindingSID) GetEndpointBehaviorStructure() *SRv6EndPointBehavior {
	if x != nil {
		return x.EndpointBehaviorStructure
	}
	return nil
}

type TunnelEncapSubTLVSRENLP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags uint32   `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	Enlp  ENLPType `protobuf:"varint,2,opt,name=enlp,proto3,enum=apipb.ENLPType" json:"enlp,omitempty"`
}

func (x *TunnelEncapSubTLVSRENLP) Reset() {
	*x = TunnelEncapSubTLVSRENLP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelEncapSubTLVSRENLP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelEncapSubTLVSRENLP) ProtoMessage() {}

func (x *TunnelEncapSubTLVSRENLP) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelEncapSubTLVSRENLP.ProtoReflect.Descriptor instead.
func (*TunnelEncapSubTLVSRENLP) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{28}
}

func (x *TunnelEncapSubTLVSRENLP) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *TunnelEncapSubTLVSRENLP) GetEnlp() ENLPType {
	if x != nil {
		return x.Enlp
	}
	return ENLPType_Reserved
}

type SRWeight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags  uint32 `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	Weight uint32 `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *SRWeight) Reset() {
	*x = SRWeight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRWeight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRWeight) ProtoMessage() {}

func (x *SRWeight) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRWeight.ProtoReflect.Descriptor instead.
func (*SRWeight) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{29}
}

func (x *SRWeight) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *SRWeight) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type SegmentFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VFlag bool `protobuf:"varint,1,opt,name=v_flag,json=vFlag,proto3" json:"v_flag,omitempty"`
	AFlag bool `protobuf:"varint,2,opt,name=a_flag,json=aFlag,proto3" json:"a_flag,omitempty"`
	SFlag bool `protobuf:"varint,3,opt,name=s_flag,json=sFlag,proto3" json:"s_flag,omitempty"`
	BFlag bool `protobuf:"varint,4,opt,name=b_flag,json=bFlag,proto3" json:"b_flag,omitempty"`
}

func (x *SegmentFlags) Reset() {
	*x = SegmentFlags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentFlags) ProtoMessage() {}

func (x *SegmentFlags) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentFlags.ProtoReflect.Descriptor instead.
func (*SegmentFlags) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{30}
}

func (x *SegmentFlags) GetVFlag() bool {
	if x != nil {
		return x.VFlag
	}
	return false
}

func (x *SegmentFlags) GetAFlag() bool {
	if x != nil {
		return x.AFlag
	}
	return false
}

func (x *SegmentFlags) GetSFlag() bool {
	if x != nil {
		return x.SFlag
	}
	return false
}

func (x *SegmentFlags) GetBFlag() bool {
	if x != nil {
		return x.BFlag
	}
	return false
}

type SegmentTypeA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags *SegmentFlags `protobuf:"bytes,1,opt,name=flags,proto3" json:"flags,omitempty"`
	Label uint32        `protobuf:"varint,2,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *SegmentTypeA) Reset() {
	*x = SegmentTypeA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentTypeA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentTypeA) ProtoMessage() {}

func (x *SegmentTypeA) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentTypeA.ProtoReflect.Descriptor instead.
func (*SegmentTypeA) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{31}
}

func (x *SegmentTypeA) GetFlags() *SegmentFlags {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *SegmentTypeA) GetLabel() uint32 {
	if x != nil {
		return x.Label
	}
	return 0
}

type SegmentTypeB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags                     *SegmentFlags         `protobuf:"bytes,1,opt,name=flags,proto3" json:"flags,omitempty"`
	Sid                       []byte                `protobuf:"bytes,2,opt,name=sid,proto3" json:"sid,omitempty"`
	EndpointBehaviorStructure *SRv6EndPointBehavior `protobuf:"bytes,3,opt,name=endpoint_behavior_structure,json=endpointBehaviorStructure,proto3" json:"endpoint_behavior_structure,omitempty"`
}

func (x *SegmentTypeB) Reset() {
	*x = SegmentTypeB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentTypeB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentTypeB) ProtoMessage() {}

func (x *SegmentTypeB) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentTypeB.ProtoReflect.Descriptor instead.
func (*SegmentTypeB) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{32}
}

func (x *SegmentTypeB) GetFlags() *SegmentFlags {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *SegmentTypeB) GetSid() []byte {
	if x != nil {
		return x.Sid
	}
	return nil
}

func (x *SegmentTypeB) GetEndpointBehaviorStructure() *SRv6EndPointBehavior {
	if x != nil {
		return x.EndpointBehaviorStructure
	}
	return nil
}

type TunnelEncapSubTLVSRSegmentList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Weight   *SRWeight                                 `protobuf:"bytes,1,opt,name=weight,proto3" json:"weight,omitempty"`
	Segments []*TunnelEncapSubTLVSRSegmentList_Segment `protobuf:"bytes,2,rep,name=segments,proto3" json:"segments,omitempty"`
}

func (x *TunnelEncapSubTLVSRSegmentList) Reset() {
	*x = TunnelEncapSubTLVSRSegmentList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelEncapSubTLVSRSegmentList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelEncapSubTLVSRSegmentList) ProtoMessage() {}

func (x *TunnelEncapSubTLVSRSegmentList) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelEncapSubTLVSRSegmentList.ProtoReflect.Descriptor instead.
func (*TunnelEncapSubTLVSRSegmentList) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{33}
}

func (x *TunnelEncapSubTLVSRSegmentList) GetWeight() *SRWeight {
	if x != nil {
		return x.Weight
	}
	return nil
}

func (x *TunnelEncapSubTLVSRSegmentList) GetSegments() []*TunnelEncapSubTLVSRSegmentList_Segment {
	if x != nil {
		return x.Segments
	}
	return nil
}

type TunnelEncapSubTLVEgressEndpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *TunnelEncapSubTLVEgressEndpoint) Reset() {
	*x = TunnelEncapSubTLVEgressEndpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelEncapSubTLVEgressEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelEncapSubTLVEgressEndpoint) ProtoMessage() {}

func (x *TunnelEncapSubTLVEgressEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelEncapSubTLVEgressEndpoint.ProtoReflect.Descriptor instead.
func (*TunnelEncapSubTLVEgressEndpoint) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{34}
}

func (x *TunnelEncapSubTLVEgressEndpoint) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type TunnelEncapSubTLVUDPDestPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port uint32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *TunnelEncapSubTLVUDPDestPort) Reset() {
	*x = TunnelEncapSubTLVUDPDestPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelEncapSubTLVUDPDestPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelEncapSubTLVUDPDestPort) ProtoMessage() {}

func (x *TunnelEncapSubTLVUDPDestPort) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelEncapSubTLVUDPDestPort.ProtoReflect.Descriptor instead.
func (*TunnelEncapSubTLVUDPDestPort) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{35}
}

func (x *TunnelEncapSubTLVUDPDestPort) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type TunnelEncapSubTLVUnknown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TunnelEncapSubTLVUnknown) Reset() {
	*x = TunnelEncapSubTLVUnknown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelEncapSubTLVUnknown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelEncapSubTLVUnknown) ProtoMessage() {}

func (x *TunnelEncapSubTLVUnknown) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelEncapSubTLVUnknown.ProtoReflect.Descriptor instead.
func (*TunnelEncapSubTLVUnknown) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{36}
}

func (x *TunnelEncapSubTLVUnknown) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *TunnelEncapSubTLVUnknown) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type TunnelEncapTLV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type uint32                `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Tlvs []*TunnelEncapTLV_TLV `protobuf:"bytes,2,rep,name=tlvs,proto3" json:"tlvs,omitempty"`
}

func (x *TunnelEncapTLV) Reset() {
	*x = TunnelEncapTLV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelEncapTLV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelEncapTLV) ProtoMessage() {}

func (x *TunnelEncapTLV) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelEncapTLV.ProtoReflect.Descriptor instead.
func (*TunnelEncapTLV) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{37}
}

func (x *TunnelEncapTLV) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *TunnelEncapTLV) GetTlvs() []*TunnelEncapTLV_TLV {
	if x != nil {
		return x.Tlvs
	}
	return nil
}

type TunnelEncapAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tlvs []*TunnelEncapTLV `protobuf:"bytes,1,rep,name=tlvs,proto3" json:"tlvs,omitempty"`
}

func (x *TunnelEncapAttribute) Reset() {
	*x = TunnelEncapAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelEncapAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelEncapAttribute) ProtoMessage() {}

func (x *TunnelEncapAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelEncapAttribute.ProtoReflect.Descriptor instead.
func (*TunnelEncapAttribute) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{38}
}

func (x *TunnelEncapAttribute) GetTlvs() []*TunnelEncapTLV {
	if x != nil {
		return x.Tlvs
	}
	return nil
}

type IPv6AddressSpecificExtended struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsTransitive bool   `protobuf:"varint,1,opt,name=is_transitive,json=isTransitive,proto3" json:"is_transitive,omitempty"`
	SubType      uint32 `protobuf:"varint,2,opt,name=sub_type,json=subType,proto3" json:"sub_type,omitempty"`
	Address      string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	LocalAdmin   uint32 `protobuf:"varint,4,opt,name=local_admin,json=localAdmin,proto3" json:"local_admin,omitempty"`
}

func (x *IPv6AddressSpecificExtended) Reset() {
	*x = IPv6AddressSpecificExtended{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPv6AddressSpecificExtended) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPv6AddressSpecificExtended) ProtoMessage() {}

func (x *IPv6AddressSpecificExtended) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPv6AddressSpecificExtended.ProtoReflect.Descriptor instead.
func (*IPv6AddressSpecificExtended) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{39}
}

func (x *IPv6AddressSpecificExtended) GetIsTransitive() bool {
	if x != nil {
		return x.IsTransitive
	}
	return false
}

func (x *IPv6AddressSpecificExtended) GetSubType() uint32 {
	if x != nil {
		return x.SubType
	}
	return 0
}

func (x *IPv6AddressSpecificExtended) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *IPv6AddressSpecificExtended) GetLocalAdmin() uint32 {
	if x != nil {
		return x.LocalAdmin
	}
	return 0
}

type RedirectIPv6AddressSpecificExtended struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address    string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	LocalAdmin uint32 `protobuf:"varint,2,opt,name=local_admin,json=localAdmin,proto3" json:"local_admin,omitempty"`
}

func (x *RedirectIPv6AddressSpecificExtended) Reset() {
	*x = RedirectIPv6AddressSpecificExtended{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedirectIPv6AddressSpecificExtended) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedirectIPv6AddressSpecificExtended) ProtoMessage() {}

func (x *RedirectIPv6AddressSpecificExtended) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedirectIPv6AddressSpecificExtended.ProtoReflect.Descriptor instead.
func (*RedirectIPv6AddressSpecificExtended) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{40}
}

func (x *RedirectIPv6AddressSpecificExtended) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *RedirectIPv6AddressSpecificExtended) GetLocalAdmin() uint32 {
	if x != nil {
		return x.LocalAdmin
	}
	return 0
}

type IP6ExtendedCommunitiesAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Communities []*IP6ExtendedCommunitiesAttribute_Community `protobuf:"bytes,1,rep,name=communities,proto3" json:"communities,omitempty"`
}

func (x *IP6ExtendedCommunitiesAttribute) Reset() {
	*x = IP6ExtendedCommunitiesAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IP6ExtendedCommunitiesAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IP6ExtendedCommunitiesAttribute) ProtoMessage() {}

func (x *IP6ExtendedCommunitiesAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IP6ExtendedCommunitiesAttribute.ProtoReflect.Descriptor instead.
func (*IP6ExtendedCommunitiesAttribute) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{41}
}

func (x *IP6ExtendedCommunitiesAttribute) GetCommunities() []*IP6ExtendedCommunitiesAttribute_Community {
	if x != nil {
		return x.Communities
	}
	return nil
}

type AigpTLVIGPMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metric uint64 `protobuf:"varint,1,opt,name=metric,proto3" json:"metric,omitempty"`
}

func (x *AigpTLVIGPMetric) Reset() {
	*x = AigpTLVIGPMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AigpTLVIGPMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AigpTLVIGPMetric) ProtoMessage() {}

func (x *AigpTLVIGPMetric) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AigpTLVIGPMetric.ProtoReflect.Descriptor instead.
func (*AigpTLVIGPMetric) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{42}
}

func (x *AigpTLVIGPMetric) GetMetric() uint64 {
	if x != nil {
		return x.Metric
	}
	return 0
}

type AigpTLVUnknown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AigpTLVUnknown) Reset() {
	*x = AigpTLVUnknown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AigpTLVUnknown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AigpTLVUnknown) ProtoMessage() {}

func (x *AigpTLVUnknown) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AigpTLVUnknown.ProtoReflect.Descriptor instead.
func (*AigpTLVUnknown) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{43}
}

func (x *AigpTLVUnknown) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *AigpTLVUnknown) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type AigpAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tlvs []*AigpAttribute_TLV `protobuf:"bytes,1,rep,name=tlvs,proto3" json:"tlvs,omitempty"`
}

func (x *AigpAttribute) Reset() {
	*x = AigpAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AigpAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AigpAttribute) ProtoMessage() {}

func (x *AigpAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AigpAttribute.ProtoReflect.Descriptor instead.
func (*AigpAttribute) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{44}
}

func (x *AigpAttribute) GetTlvs() []*AigpAttribute_TLV {
	if x != nil {
		return x.Tlvs
	}
	return nil
}

type LargeCommunity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GlobalAdmin uint32 `protobuf:"varint,1,opt,name=global_admin,json=globalAdmin,proto3" json:"global_admin,omitempty"`
	LocalData1  uint32 `protobuf:"varint,2,opt,name=local_data1,json=localData1,proto3" json:"local_data1,omitempty"`
	LocalData2  uint32 `protobuf:"varint,3,opt,name=local_data2,json=localData2,proto3" json:"local_data2,omitempty"`
}

func (x *LargeCommunity) Reset() {
	*x = LargeCommunity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LargeCommunity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LargeCommunity) ProtoMessage() {}

func (x *LargeCommunity) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LargeCommunity.ProtoReflect.Descriptor instead.
func (*LargeCommunity) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{45}
}

func (x *LargeCommunity) GetGlobalAdmin() uint32 {
	if x != nil {
		return x.GlobalAdmin
	}
	return 0
}

func (x *LargeCommunity) GetLocalData1() uint32 {
	if x != nil {
		return x.LocalData1
	}
	return 0
}

func (x *LargeCommunity) GetLocalData2() uint32 {
	if x != nil {
		return x.LocalData2
	}
	return 0
}

type LargeCommunitiesAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Communities []*LargeCommunity `protobuf:"bytes,1,rep,name=communities,proto3" json:"communities,omitempty"`
}

func (x *LargeCommunitiesAttribute) Reset() {
	*x = LargeCommunitiesAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LargeCommunitiesAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LargeCommunitiesAttribute) ProtoMessage() {}

func (x *LargeCommunitiesAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LargeCommunitiesAttribute.ProtoReflect.Descriptor instead.
func (*LargeCommunitiesAttribute) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{46}
}

func (x *LargeCommunitiesAttribute) GetCommunities() []*LargeCommunity {
	if x != nil {
		return x.Communities
	}
	return nil
}

type LsNodeFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Overload bool `protobuf:"varint,1,opt,name=overload,proto3" json:"overload,omitempty"`
	Attached bool `protobuf:"varint,2,opt,name=attached,proto3" json:"attached,omitempty"`
	External bool `protobuf:"varint,3,opt,name=external,proto3" json:"external,omitempty"`
	Abr      bool `protobuf:"varint,4,opt,name=abr,proto3" json:"abr,omitempty"`
	Router   bool `protobuf:"varint,5,opt,name=router,proto3" json:"router,omitempty"`
	V6       bool `protobuf:"varint,6,opt,name=v6,proto3" json:"v6,omitempty"`
}

func (x *LsNodeFlags) Reset() {
	*x = LsNodeFlags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LsNodeFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LsNodeFlags) ProtoMessage() {}

func (x *LsNodeFlags) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LsNodeFlags.ProtoReflect.Descriptor instead.
func (*LsNodeFlags) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{47}
}

func (x *LsNodeFlags) GetOverload() bool {
	if x != nil {
		return x.Overload
	}
	return false
}

func (x *LsNodeFlags) GetAttached() bool {
	if x != nil {
		return x.Attached
	}
	return false
}

func (x *LsNodeFlags) GetExternal() bool {
	if x != nil {
		return x.External
	}
	return false
}

func (x *LsNodeFlags) GetAbr() bool {
	if x != nil {
		return x.Abr
	}
	return false
}

func (x *LsNodeFlags) GetRouter() bool {
	if x != nil {
		return x.Router
	}
	return false
}

func (x *LsNodeFlags) GetV6() bool {
	if x != nil {
		return x.V6
	}
	return false
}

type LsIGPFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Down          bool `protobuf:"varint,1,opt,name=down,proto3" json:"down,omitempty"`
	NoUnicast     bool `protobuf:"varint,2,opt,name=no_unicast,json=noUnicast,proto3" json:"no_unicast,omitempty"`
	LocalAddress  bool `protobuf:"varint,3,opt,name=local_address,json=localAddress,proto3" json:"local_address,omitempty"`
	PropagateNssa bool `protobuf:"varint,4,opt,name=propagate_nssa,json=propagateNssa,proto3" json:"propagate_nssa,omitempty"`
}

func (x *LsIGPFlags) Reset() {
	*x = LsIGPFlags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LsIGPFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LsIGPFlags) ProtoMessage() {}

func (x *LsIGPFlags) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LsIGPFlags.ProtoReflect.Descriptor instead.
func (*LsIGPFlags) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{48}
}

func (x *LsIGPFlags) GetDown() bool {
	if x != nil {
		return x.Down
	}
	return false
}

func (x *LsIGPFlags) GetNoUnicast() bool {
	if x != nil {
		return x.NoUnicast
	}
	return false
}

func (x *LsIGPFlags) GetLocalAddress() bool {
	if x != nil {
		return x.LocalAddress
	}
	return false
}

func (x *LsIGPFlags) GetPropagateNssa() bool {
	if x != nil {
		return x.PropagateNssa
	}
	return false
}

type LsSrRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Begin uint32 `protobuf:"varint,1,opt,name=begin,proto3" json:"begin,omitempty"`
	End   uint32 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *LsSrRange) Reset() {
	*x = LsSrRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LsSrRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LsSrRange) ProtoMessage() {}

func (x *LsSrRange) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LsSrRange.ProtoReflect.Descriptor instead.
func (*LsSrRange) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{49}
}

func (x *LsSrRange) GetBegin() uint32 {
	if x != nil {
		return x.Begin
	}
	return 0
}

func (x *LsSrRange) GetEnd() uint32 {
	if x != nil {
		return x.End
	}
	return 0
}

type LsSrCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipv4Supported bool         `protobuf:"varint,1,opt,name=ipv4_supported,json=ipv4Supported,proto3" json:"ipv4_supported,omitempty"`
	Ipv6Supported bool         `protobuf:"varint,2,opt,name=ipv6_supported,json=ipv6Supported,proto3" json:"ipv6_supported,omitempty"`
	Ranges        []*LsSrRange `protobuf:"bytes,3,rep,name=ranges,proto3" json:"ranges,omitempty"`
}

func (x *LsSrCapabilities) Reset() {
	*x = LsSrCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LsSrCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LsSrCapabilities) ProtoMessage() {}

func (x *LsSrCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LsSrCapabilities.ProtoReflect.Descriptor instead.
func (*LsSrCapabilities) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{50}
}

func (x *LsSrCapabilities) GetIpv4Supported() bool {
	if x != nil {
		return x.Ipv4Supported
	}
	return false
}

func (x *LsSrCapabilities) GetIpv6Supported() bool {
	if x != nil {
		return x.Ipv6Supported
	}
	return false
}

func (x *LsSrCapabilities) GetRanges() []*LsSrRange {
	if x != nil {
		return x.Ranges
	}
	return nil
}

type LsSrLocalBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ranges []*LsSrRange `protobuf:"bytes,1,rep,name=ranges,proto3" json:"ranges,omitempty"`
}

func (x *LsSrLocalBlock) Reset() {
	*x = LsSrLocalBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LsSrLocalBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LsSrLocalBlock) ProtoMessage() {}

func (x *LsSrLocalBlock) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LsSrLocalBlock.ProtoReflect.Descriptor instead.
func (*LsSrLocalBlock) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{51}
}

func (x *LsSrLocalBlock) GetRanges() []*LsSrRange {
	if x != nil {
		return x.Ranges
	}
	return nil
}

type LsAttributeNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Flags           *LsNodeFlags      `protobuf:"bytes,2,opt,name=flags,proto3" json:"flags,omitempty"`
	LocalRouterId   string            `protobuf:"bytes,3,opt,name=local_router_id,json=localRouterId,proto3" json:"local_router_id,omitempty"`
	LocalRouterIdV6 string            `protobuf:"bytes,4,opt,name=local_router_id_v6,json=localRouterIdV6,proto3" json:"local_router_id_v6,omitempty"`
	IsisArea        []byte            `protobuf:"bytes,5,opt,name=isis_area,json=isisArea,proto3" json:"isis_area,omitempty"`
	Opaque          []byte            `protobuf:"bytes,6,opt,name=opaque,proto3" json:"opaque,omitempty"`
	SrCapabilities  *LsSrCapabilities `protobuf:"bytes,7,opt,name=sr_capabilities,json=srCapabilities,proto3" json:"sr_capabilities,omitempty"`
	SrAlgorithms    []byte            `protobuf:"bytes,8,opt,name=sr_algorithms,json=srAlgorithms,proto3" json:"sr_algorithms,omitempty"`
	SrLocalBlock    *LsSrLocalBlock   `protobuf:"bytes,9,opt,name=sr_local_block,json=srLocalBlock,proto3" json:"sr_local_block,omitempty"`
}

func (x *LsAttributeNode) Reset() {
	*x = LsAttributeNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LsAttributeNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LsAttributeNode) ProtoMessage() {}

func (x *LsAttributeNode) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LsAttributeNode.ProtoReflect.Descriptor instead.
func (*LsAttributeNode) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{52}
}

func (x *LsAttributeNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LsAttributeNode) GetFlags() *LsNodeFlags {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *LsAttributeNode) GetLocalRouterId() string {
	if x != nil {
		return x.LocalRouterId
	}
	return ""
}

func (x *LsAttributeNode) GetLocalRouterIdV6() string {
	if x != nil {
		return x.LocalRouterIdV6
	}
	return ""
}

func (x *LsAttributeNode) GetIsisArea() []byte {
	if x != nil {
		return x.IsisArea
	}
	return nil
}

func (x *LsAttributeNode) GetOpaque() []byte {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *LsAttributeNode) GetSrCapabilities() *LsSrCapabilities {
	if x != nil {
		return x.SrCapabilities
	}
	return nil
}

func (x *LsAttributeNode) GetSrAlgorithms() []byte {
	if x != nil {
		return x.SrAlgorithms
	}
	return nil
}

func (x *LsAttributeNode) GetSrLocalBlock() *LsSrLocalBlock {
	if x != nil {
		return x.SrLocalBlock
	}
	return nil
}

type LsAttributeLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	LocalRouterId       string    `protobuf:"bytes,2,opt,name=local_router_id,json=localRouterId,proto3" json:"local_router_id,omitempty"`
	LocalRouterIdV6     string    `protobuf:"bytes,3,opt,name=local_router_id_v6,json=localRouterIdV6,proto3" json:"local_router_id_v6,omitempty"`
	RemoteRouterId      string    `protobuf:"bytes,4,opt,name=remote_router_id,json=remoteRouterId,proto3" json:"remote_router_id,omitempty"`
	RemoteRouterIdV6    string    `protobuf:"bytes,5,opt,name=remote_router_id_v6,json=remoteRouterIdV6,proto3" json:"remote_router_id_v6,omitempty"`
	AdminGroup          uint32    `protobuf:"varint,6,opt,name=admin_group,json=adminGroup,proto3" json:"admin_group,omitempty"`
	DefaultTeMetric     uint32    `protobuf:"varint,7,opt,name=default_te_metric,json=defaultTeMetric,proto3" json:"default_te_metric,omitempty"`
	IgpMetric           uint32    `protobuf:"varint,8,opt,name=igp_metric,json=igpMetric,proto3" json:"igp_metric,omitempty"`
	Opaque              []byte    `protobuf:"bytes,9,opt,name=opaque,proto3" json:"opaque,omitempty"`
	Bandwidth           float32   `protobuf:"fixed32,10,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	ReservableBandwidth float32   `protobuf:"fixed32,11,opt,name=reservable_bandwidth,json=reservableBandwidth,proto3" json:"reservable_bandwidth,omitempty"`
	UnreservedBandwidth []float32 `protobuf:"fixed32,12,rep,packed,name=unreserved_bandwidth,json=unreservedBandwidth,proto3" json:"unreserved_bandwidth,omitempty"`
	SrAdjacencySid      uint32    `protobuf:"varint,13,opt,name=sr_adjacency_sid,json=srAdjacencySid,proto3" json:"sr_adjacency_sid,omitempty"`
	Srlgs               []uint32  `protobuf:"varint,14,rep,packed,name=srlgs,proto3" json:"srlgs,omitempty"`
}

func (x *LsAttributeLink) Reset() {
	*x = LsAttributeLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LsAttributeLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LsAttributeLink) ProtoMessage() {}

func (x *LsAttributeLink) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LsAttributeLink.ProtoReflect.Descriptor instead.
func (*LsAttributeLink) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{53}
}

func (x *LsAttributeLink) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LsAttributeLink) GetLocalRouterId() string {
	if x != nil {
		return x.LocalRouterId
	}
	return ""
}

func (x *LsAttributeLink) GetLocalRouterIdV6() string {
	if x != nil {
		return x.LocalRouterIdV6
	}
	return ""
}

func (x *LsAttributeLink) GetRemoteRouterId() string {
	if x != nil {
		return x.RemoteRouterId
	}
	return ""
}

func (x *LsAttributeLink) GetRemoteRouterIdV6() string {
	if x != nil {
		return x.RemoteRouterIdV6
	}
	return ""
}

func (x *LsAttributeLink) GetAdminGroup() uint32 {
	if x != nil {
		return x.AdminGroup
	}
	return 0
}

func (x *LsAttributeLink) GetDefaultTeMetric() uint32 {
	if x != nil {
		return x.DefaultTeMetric
	}
	return 0
}

func (x *LsAttributeLink) GetIgpMetric() uint32 {
	if x != nil {
		return x.IgpMetric
	}
	return 0
}

func (x *LsAttributeLink) GetOpaque() []byte {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *LsAttributeLink) GetBandwidth() float32 {
	if x != nil {
		return x.Bandwidth
	}
	return 0
}

func (x *LsAttributeLink) GetReservableBandwidth() float32 {
	if x != nil {
		return x.ReservableBandwidth
	}
	return 0
}

func (x *LsAttributeLink) GetUnreservedBandwidth() []float32 {
	if x != nil {
		return x.UnreservedBandwidth
	}
	return nil
}

func (x *LsAttributeLink) GetSrAdjacencySid() uint32 {
	if x != nil {
		return x.SrAdjacencySid
	}
	return 0
}

func (x *LsAttributeLink) GetSrlgs() []uint32 {
	if x != nil {
		return x.Srlgs
	}
	return nil
}

type LsAttributePrefix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IgpFlags    *LsIGPFlags `protobuf:"bytes,1,opt,name=igp_flags,json=igpFlags,proto3" json:"igp_flags,omitempty"`
	Opaque      []byte      `protobuf:"bytes,2,opt,name=opaque,proto3" json:"opaque,omitempty"`
	SrPrefixSid uint32      `protobuf:"varint,3,opt,name=sr_prefix_sid,json=srPrefixSid,proto3" json:"sr_prefix_sid,omitempty"`
}

func (x *LsAttributePrefix) Reset() {
	*x = LsAttributePrefix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LsAttributePrefix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LsAttributePrefix) ProtoMessage() {}

func (x *LsAttributePrefix) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LsAttributePrefix.ProtoReflect.Descriptor instead.
func (*LsAttributePrefix) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{54}
}

func (x *LsAttributePrefix) GetIgpFlags() *LsIGPFlags {
	if x != nil {
		return x.IgpFlags
	}
	return nil
}

func (x *LsAttributePrefix) GetOpaque() []byte {
	if x != nil {
		return x.Opaque
	}
	return nil
}

func (x *LsAttributePrefix) GetSrPrefixSid() uint32 {
	if x != nil {
		return x.SrPrefixSid
	}
	return 0
}

type LsBgpPeerSegmentSIDFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value      bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	Local      bool `protobuf:"varint,2,opt,name=local,proto3" json:"local,omitempty"`
	Backup     bool `protobuf:"varint,3,opt,name=backup,proto3" json:"backup,omitempty"`
	Persistent bool `protobuf:"varint,4,opt,name=persistent,proto3" json:"persistent,omitempty"`
}

func (x *LsBgpPeerSegmentSIDFlags) Reset() {
	*x = LsBgpPeerSegmentSIDFlags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LsBgpPeerSegmentSIDFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LsBgpPeerSegmentSIDFlags) ProtoMessage() {}

func (x *LsBgpPeerSegmentSIDFlags) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LsBgpPeerSegmentSIDFlags.ProtoReflect.Descriptor instead.
func (*LsBgpPeerSegmentSIDFlags) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{55}
}

func (x *LsBgpPeerSegmentSIDFlags) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

func (x *LsBgpPeerSegmentSIDFlags) GetLocal() bool {
	if x != nil {
		return x.Local
	}
	return false
}

func (x *LsBgpPeerSegmentSIDFlags) GetBackup() bool {
	if x != nil {
		return x.Backup
	}
	return false
}

func (x *LsBgpPeerSegmentSIDFlags) GetPersistent() bool {
	if x != nil {
		return x.Persistent
	}
	return false
}

type LsBgpPeerSegmentSID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags  *LsBgpPeerSegmentSIDFlags `protobuf:"bytes,1,opt,name=flags,proto3" json:"flags,omitempty"`
	Weight uint32                    `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	Sid    uint32                    `protobuf:"varint,3,opt,name=sid,proto3" json:"sid,omitempty"`
}

func (x *LsBgpPeerSegmentSID) Reset() {
	*x = LsBgpPeerSegmentSID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LsBgpPeerSegmentSID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LsBgpPeerSegmentSID) ProtoMessage() {}

func (x *LsBgpPeerSegmentSID) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LsBgpPeerSegmentSID.ProtoReflect.Descriptor instead.
func (*LsBgpPeerSegmentSID) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{56}
}

func (x *LsBgpPeerSegmentSID) GetFlags() *LsBgpPeerSegmentSIDFlags {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *LsBgpPeerSegmentSID) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *LsBgpPeerSegmentSID) GetSid() uint32 {
	if x != nil {
		return x.Sid
	}
	return 0
}

type LsAttributeBgpPeerSegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BgpPeerNodeSid      *LsBgpPeerSegmentSID `protobuf:"bytes,1,opt,name=bgp_peer_node_sid,json=bgpPeerNodeSid,proto3" json:"bgp_peer_node_sid,omitempty"`
	BgpPeerAdjacencySid *LsBgpPeerSegmentSID `protobuf:"bytes,2,opt,name=bgp_peer_adjacency_sid,json=bgpPeerAdjacencySid,proto3" json:"bgp_peer_adjacency_sid,omitempty"`
	BgpPeerSetSid       *LsBgpPeerSegmentSID `protobuf:"bytes,3,opt,name=bgp_peer_set_sid,json=bgpPeerSetSid,proto3" json:"bgp_peer_set_sid,omitempty"`
}

func (x *LsAttributeBgpPeerSegment) Reset() {
	*x = LsAttributeBgpPeerSegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LsAttributeBgpPeerSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LsAttributeBgpPeerSegment) ProtoMessage() {}

func (x *LsAttributeBgpPeerSegment) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LsAttributeBgpPeerSegment.ProtoReflect.Descriptor instead.
func (*LsAttributeBgpPeerSegment) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{57}
}

func (x *LsAttributeBgpPeerSegment) GetBgpPeerNodeSid() *LsBgpPeerSegmentSID {
	if x != nil {
		return x.BgpPeerNodeSid
	}
	return nil
}

func (x *LsAttributeBgpPeerSegment) GetBgpPeerAdjacencySid() *LsBgpPeerSegmentSID {
	if x != nil {
		return x.BgpPeerAdjacencySid
	}
	return nil
}

func (x *LsAttributeBgpPeerSegment) GetBgpPeerSetSid() *LsBgpPeerSegmentSID {
	if x != nil {
		return x.BgpPeerSetSid
	}
	return nil
}

type LsAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node           *LsAttributeNode           `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	Link           *LsAttributeLink           `protobuf:"bytes,2,opt,name=link,proto3" json:"link,omitempty"`
	Prefix         *LsAttributePrefix         `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
	BgpPeerSegment *LsAttributeBgpPeerSegment `protobuf:"bytes,4,opt,name=bgp_peer_segment,json=bgpPeerSegment,proto3" json:"bgp_peer_segment,omitempty"`
}

func (x *LsAttribute) Reset() {
	*x = LsAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LsAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LsAttribute) ProtoMessage() {}

func (x *LsAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LsAttribute.ProtoReflect.Descriptor instead.
func (*LsAttribute) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{58}
}

func (x *LsAttribute) GetNode() *LsAttributeNode {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *LsAttribute) GetLink() *LsAttributeLink {
	if x != nil {
		return x.Link
	}
	return nil
}

func (x *LsAttribute) GetPrefix() *LsAttributePrefix {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *LsAttribute) GetBgpPeerSegment() *LsAttributeBgpPeerSegment {
	if x != nil {
		return x.BgpPeerSegment
	}
	return nil
}

type UnknownAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flags uint32 `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	Type  uint32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Value []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UnknownAttribute) Reset() {
	*x = UnknownAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnknownAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnknownAttribute) ProtoMessage() {}

func (x *UnknownAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnknownAttribute.ProtoReflect.Descriptor instead.
func (*UnknownAttribute) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{59}
}

func (x *UnknownAttribute) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *UnknownAttribute) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *UnknownAttribute) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// https://www.rfc-editor.org/rfc/rfc9252.html#section-3.2.1
type SRv6StructureSubSubTLV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocatorBlockLength  uint32 `protobuf:"varint,1,opt,name=locator_block_length,json=locatorBlockLength,proto3" json:"locator_block_length,omitempty"`
	LocatorNodeLength   uint32 `protobuf:"varint,2,opt,name=locator_node_length,json=locatorNodeLength,proto3" json:"locator_node_length,omitempty"`
	FunctionLength      uint32 `protobuf:"varint,3,opt,name=function_length,json=functionLength,proto3" json:"function_length,omitempty"`
	ArgumentLength      uint32 `protobuf:"varint,4,opt,name=argument_length,json=argumentLength,proto3" json:"argument_length,omitempty"`
	TranspositionLength uint32 `protobuf:"varint,5,opt,name=transposition_length,json=transpositionLength,proto3" json:"transposition_length,omitempty"`
	TranspositionOffset uint32 `protobuf:"varint,6,opt,name=transposition_offset,json=transpositionOffset,proto3" json:"transposition_offset,omitempty"`
}

func (x *SRv6StructureSubSubTLV) Reset() {
	*x = SRv6StructureSubSubTLV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRv6StructureSubSubTLV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRv6StructureSubSubTLV) ProtoMessage() {}

func (x *SRv6StructureSubSubTLV) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRv6StructureSubSubTLV.ProtoReflect.Descriptor instead.
func (*SRv6StructureSubSubTLV) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{60}
}

func (x *SRv6StructureSubSubTLV) GetLocatorBlockLength() uint32 {
	if x != nil {
		return x.LocatorBlockLength
	}
	return 0
}

func (x *SRv6StructureSubSubTLV) GetLocatorNodeLength() uint32 {
	if x != nil {
		return x.LocatorNodeLength
	}
	return 0
}

func (x *SRv6StructureSubSubTLV) GetFunctionLength() uint32 {
	if x != nil {
		return x.FunctionLength
	}
	return 0
}

func (x *SRv6StructureSubSubTLV) GetArgumentLength() uint32 {
	if x != nil {
		return x.ArgumentLength
	}
	return 0
}

func (x *SRv6StructureSubSubTLV) GetTranspositionLength() uint32 {
	if x != nil {
		return x.TranspositionLength
	}
	return 0
}

func (x *SRv6StructureSubSubTLV) GetTranspositionOffset() uint32 {
	if x != nil {
		return x.TranspositionOffset
	}
	return 0
}

type SRv6SubSubTLV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Tlv:
	//
	//	*SRv6SubSubTLV_Structure
	Tlv isSRv6SubSubTLV_Tlv `protobuf_oneof:"tlv"`
}

func (x *SRv6SubSubTLV) Reset() {
	*x = SRv6SubSubTLV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRv6SubSubTLV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRv6SubSubTLV) ProtoMessage() {}

func (x *SRv6SubSubTLV) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRv6SubSubTLV.ProtoReflect.Descriptor instead.
func (*SRv6SubSubTLV) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{61}
}

func (m *SRv6SubSubTLV) GetTlv() isSRv6SubSubTLV_Tlv {
	if m != nil {
		return m.Tlv
	}
	return nil
}

func (x *SRv6SubSubTLV) GetStructure() *SRv6StructureSubSubTLV {
	if x, ok := x.GetTlv().(*SRv6SubSubTLV_Structure); ok {
		return x.Structure
	}
	return nil
}

type isSRv6SubSubTLV_Tlv interface {
	isSRv6SubSubTLV_Tlv()
}

type SRv6SubSubTLV_Structure struct {
	Structure *SRv6StructureSubSubTLV `protobuf:"bytes,1,opt,name=structure,proto3,oneof"`
}

func (*SRv6SubSubTLV_Structure) isSRv6SubSubTLV_Tlv() {}

type SRv6SubSubTLVs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tlvs []*SRv6SubSubTLV `protobuf:"bytes,1,rep,name=tlvs,proto3" json:"tlvs,omitempty"`
}

func (x *SRv6SubSubTLVs) Reset() {
	*x = SRv6SubSubTLVs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRv6SubSubTLVs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRv6SubSubTLVs) ProtoMessage() {}

func (x *SRv6SubSubTLVs) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRv6SubSubTLVs.ProtoReflect.Descriptor instead.
func (*SRv6SubSubTLVs) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{62}
}

func (x *SRv6SubSubTLVs) GetTlvs() []*SRv6SubSubTLV {
	if x != nil {
		return x.Tlvs
	}
	return nil
}

type SRv6SIDFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Placeholder for future sid flags
	Flag_1 bool `protobuf:"varint,1,opt,name=flag_1,json=flag1,proto3" json:"flag_1,omitempty"`
}

func (x *SRv6SIDFlags) Reset() {
	*x = SRv6SIDFlags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRv6SIDFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRv6SIDFlags) ProtoMessage() {}

func (x *SRv6SIDFlags) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRv6SIDFlags.ProtoReflect.Descriptor instead.
func (*SRv6SIDFlags) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{63}
}

func (x *SRv6SIDFlags) GetFlag_1() bool {
	if x != nil {
		return x.Flag_1
	}
	return false
}

// https://tools.ietf.org/html/draft-dawra-bess-srv6-services-02#section-2.1.1
type SRv6InformationSubTLV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sid              []byte                     `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	Flags            *SRv6SIDFlags              `protobuf:"bytes,2,opt,name=flags,proto3" json:"flags,omitempty"`
	EndpointBehavior uint32                     `protobuf:"varint,3,opt,name=endpoint_behavior,json=endpointBehavior,proto3" json:"endpoint_behavior,omitempty"`
	SubSubTlvs       map[uint32]*SRv6SubSubTLVs `protobuf:"bytes,4,rep,name=sub_sub_tlvs,json=subSubTlvs,proto3" json:"sub_sub_tlvs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SRv6InformationSubTLV) Reset() {
	*x = SRv6InformationSubTLV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRv6InformationSubTLV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRv6InformationSubTLV) ProtoMessage() {}

func (x *SRv6InformationSubTLV) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRv6InformationSubTLV.ProtoReflect.Descriptor instead.
func (*SRv6InformationSubTLV) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{64}
}

func (x *SRv6InformationSubTLV) GetSid() []byte {
	if x != nil {
		return x.Sid
	}
	return nil
}

func (x *SRv6InformationSubTLV) GetFlags() *SRv6SIDFlags {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *SRv6InformationSubTLV) GetEndpointBehavior() uint32 {
	if x != nil {
		return x.EndpointBehavior
	}
	return 0
}

func (x *SRv6InformationSubTLV) GetSubSubTlvs() map[uint32]*SRv6SubSubTLVs {
	if x != nil {
		return x.SubSubTlvs
	}
	return nil
}

type SRv6SubTLV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Tlv:
	//
	//	*SRv6SubTLV_Information
	Tlv isSRv6SubTLV_Tlv `protobuf_oneof:"tlv"`
}

func (x *SRv6SubTLV) Reset() {
	*x = SRv6SubTLV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRv6SubTLV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRv6SubTLV) ProtoMessage() {}

func (x *SRv6SubTLV) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRv6SubTLV.ProtoReflect.Descriptor instead.
func (*SRv6SubTLV) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{65}
}

func (m *SRv6SubTLV) GetTlv() isSRv6SubTLV_Tlv {
	if m != nil {
		return m.Tlv
	}
	return nil
}

func (x *SRv6SubTLV) GetInformation() *SRv6InformationSubTLV {
	if x, ok := x.GetTlv().(*SRv6SubTLV_Information); ok {
		return x.Information
	}
	return nil
}

type isSRv6SubTLV_Tlv interface {
	isSRv6SubTLV_Tlv()
}

type SRv6SubTLV_Information struct {
	Information *SRv6InformationSubTLV `protobuf:"bytes,1,opt,name=information,proto3,oneof"`
}

func (*SRv6SubTLV_Information) isSRv6SubTLV_Tlv() {}

type SRv6SubTLVs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tlvs []*SRv6SubTLV `protobuf:"bytes,1,rep,name=tlvs,proto3" json:"tlvs,omitempty"`
}

func (x *SRv6SubTLVs) Reset() {
	*x = SRv6SubTLVs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRv6SubTLVs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRv6SubTLVs) ProtoMessage() {}

func (x *SRv6SubTLVs) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRv6SubTLVs.ProtoReflect.Descriptor instead.
func (*SRv6SubTLVs) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{66}
}

func (x *SRv6SubTLVs) GetTlvs() []*SRv6SubTLV {
	if x != nil {
		return x.Tlvs
	}
	return nil
}

// https://www.rfc-editor.org/rfc/rfc9252.html#section-2
type SRv6L3ServiceTLV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubTlvs map[uint32]*SRv6SubTLVs `protobuf:"bytes,1,rep,name=sub_tlvs,json=subTlvs,proto3" json:"sub_tlvs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SRv6L3ServiceTLV) Reset() {
	*x = SRv6L3ServiceTLV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRv6L3ServiceTLV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRv6L3ServiceTLV) ProtoMessage() {}

func (x *SRv6L3ServiceTLV) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRv6L3ServiceTLV.ProtoReflect.Descriptor instead.
func (*SRv6L3ServiceTLV) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{67}
}

func (x *SRv6L3ServiceTLV) GetSubTlvs() map[uint32]*SRv6SubTLVs {
	if x != nil {
		return x.SubTlvs
	}
	return nil
}

// https://www.rfc-editor.org/rfc/rfc9252.html#section-2
type SRv6L2ServiceTLV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubTlvs map[uint32]*SRv6SubTLVs `protobuf:"bytes,1,rep,name=sub_tlvs,json=subTlvs,proto3" json:"sub_tlvs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SRv6L2ServiceTLV) Reset() {
	*x = SRv6L2ServiceTLV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRv6L2ServiceTLV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRv6L2ServiceTLV) ProtoMessage() {}

func (x *SRv6L2ServiceTLV) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRv6L2ServiceTLV.ProtoReflect.Descriptor instead.
func (*SRv6L2ServiceTLV) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{68}
}

func (x *SRv6L2ServiceTLV) GetSubTlvs() map[uint32]*SRv6SubTLVs {
	if x != nil {
		return x.SubTlvs
	}
	return nil
}

// https://tools.ietf.org/html/rfc8669
type PrefixSID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tlvs []*PrefixSID_TLV `protobuf:"bytes,1,rep,name=tlvs,proto3" json:"tlvs,omitempty"`
}

func (x *PrefixSID) Reset() {
	*x = PrefixSID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrefixSID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrefixSID) ProtoMessage() {}

func (x *PrefixSID) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrefixSID.ProtoReflect.Descriptor instead.
func (*PrefixSID) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{69}
}

func (x *PrefixSID) GetTlvs() []*PrefixSID_TLV {
	if x != nil {
		return x.Tlvs
	}
	return nil
}

type TunnelEncapSubTLVSRSegmentList_Segment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Segment:
	//
	//	*TunnelEncapSubTLVSRSegmentList_Segment_A
	//	*TunnelEncapSubTLVSRSegmentList_Segment_B
	Segment isTunnelEncapSubTLVSRSegmentList_Segment_Segment `protobuf_oneof:"segment"`
}

func (x *TunnelEncapSubTLVSRSegmentList_Segment) Reset() {
	*x = TunnelEncapSubTLVSRSegmentList_Segment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelEncapSubTLVSRSegmentList_Segment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelEncapSubTLVSRSegmentList_Segment) ProtoMessage() {}

func (x *TunnelEncapSubTLVSRSegmentList_Segment) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelEncapSubTLVSRSegmentList_Segment.ProtoReflect.Descriptor instead.
func (*TunnelEncapSubTLVSRSegmentList_Segment) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{33, 0}
}

func (m *TunnelEncapSubTLVSRSegmentList_Segment) GetSegment() isTunnelEncapSubTLVSRSegmentList_Segment_Segment {
	if m != nil {
		return m.Segment
	}
	return nil
}

func (x *TunnelEncapSubTLVSRSegmentList_Segment) GetA() *SegmentTypeA {
	if x, ok := x.GetSegment().(*TunnelEncapSubTLVSRSegmentList_Segment_A); ok {
		return x.A
	}
	return nil
}

func (x *TunnelEncapSubTLVSRSegmentList_Segment) GetB() *SegmentTypeB {
	if x, ok := x.GetSegment().(*TunnelEncapSubTLVSRSegmentList_Segment_B); ok {
		return x.B
	}
	return nil
}

type isTunnelEncapSubTLVSRSegmentList_Segment_Segment interface {
	isTunnelEncapSubTLVSRSegmentList_Segment_Segment()
}

type TunnelEncapSubTLVSRSegmentList_Segment_A struct {
	A *SegmentTypeA `protobuf:"bytes,1,opt,name=a,proto3,oneof"`
}

type TunnelEncapSubTLVSRSegmentList_Segment_B struct {
	B *SegmentTypeB `protobuf:"bytes,2,opt,name=b,proto3,oneof"`
}

func (*TunnelEncapSubTLVSRSegmentList_Segment_A) isTunnelEncapSubTLVSRSegmentList_Segment_Segment() {}

func (*TunnelEncapSubTLVSRSegmentList_Segment_B) isTunnelEncapSubTLVSRSegmentList_Segment_Segment() {}

type TunnelEncapTLV_TLV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Tlv:
	//
	//	*TunnelEncapTLV_TLV_Unknown
	//	*TunnelEncapTLV_TLV_Encapsulation
	//	*TunnelEncapTLV_TLV_Protocol
	//	*TunnelEncapTLV_TLV_Color
	//	*TunnelEncapTLV_TLV_EgressEndpoint
	//	*TunnelEncapTLV_TLV_UdpDestPort
	//	*TunnelEncapTLV_TLV_SrPreference
	//	*TunnelEncapTLV_TLV_SrPriority
	//	*TunnelEncapTLV_TLV_SrCandidatePathName
	//	*TunnelEncapTLV_TLV_SrEnlp
	//	*TunnelEncapTLV_TLV_SrBindingSid
	//	*TunnelEncapTLV_TLV_SrSegmentList
	Tlv isTunnelEncapTLV_TLV_Tlv `protobuf_oneof:"tlv"`
}

func (x *TunnelEncapTLV_TLV) Reset() {
	*x = TunnelEncapTLV_TLV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelEncapTLV_TLV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelEncapTLV_TLV) ProtoMessage() {}

func (x *TunnelEncapTLV_TLV) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelEncapTLV_TLV.ProtoReflect.Descriptor instead.
func (*TunnelEncapTLV_TLV) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{37, 0}
}

func (m *TunnelEncapTLV_TLV) GetTlv() isTunnelEncapTLV_TLV_Tlv {
	if m != nil {
		return m.Tlv
	}
	return nil
}

func (x *TunnelEncapTLV_TLV) GetUnknown() *TunnelEncapSubTLVUnknown {
	if x, ok := x.GetTlv().(*TunnelEncapTLV_TLV_Unknown); ok {
		return x.Unknown
	}
	return nil
}

func (x *TunnelEncapTLV_TLV) GetEncapsulation() *TunnelEncapSubTLVEncapsulation {
	if x, ok := x.GetTlv().(*TunnelEncapTLV_TLV_Encapsulation); ok {
		return x.Encapsulation
	}
	return nil
}

func (x *TunnelEncapTLV_TLV) GetProtocol() *TunnelEncapSubTLVProtocol {
	if x, ok := x.GetTlv().(*TunnelEncapTLV_TLV_Protocol); ok {
		return x.Protocol
	}
	return nil
}

func (x *TunnelEncapTLV_TLV) GetColor() *TunnelEncapSubTLVColor {
	if x, ok := x.GetTlv().(*TunnelEncapTLV_TLV_Color); ok {
		return x.Color
	}
	return nil
}

func (x *TunnelEncapTLV_TLV) GetEgressEndpoint() *TunnelEncapSubTLVEgressEndpoint {
	if x, ok := x.GetTlv().(*TunnelEncapTLV_TLV_EgressEndpoint); ok {
		return x.EgressEndpoint
	}
	return nil
}

func (x *TunnelEncapTLV_TLV) GetUdpDestPort() *TunnelEncapSubTLVUDPDestPort {
	if x, ok := x.GetTlv().(*TunnelEncapTLV_TLV_UdpDestPort); ok {
		return x.UdpDestPort
	}
	return nil
}

func (x *TunnelEncapTLV_TLV) GetSrPreference() *TunnelEncapSubTLVSRPreference {
	if x, ok := x.GetTlv().(*TunnelEncapTLV_TLV_SrPreference); ok {
		return x.SrPreference
	}
	return nil
}

func (x *TunnelEncapTLV_TLV) GetSrPriority() *TunnelEncapSubTLVSRPriority {
	if x, ok := x.GetTlv().(*TunnelEncapTLV_TLV_SrPriority); ok {
		return x.SrPriority
	}
	return nil
}

func (x *TunnelEncapTLV_TLV) GetSrCandidatePathName() *TunnelEncapSubTLVSRCandidatePathName {
	if x, ok := x.GetTlv().(*TunnelEncapTLV_TLV_SrCandidatePathName); ok {
		return x.SrCandidatePathName
	}
	return nil
}

func (x *TunnelEncapTLV_TLV) GetSrEnlp() *TunnelEncapSubTLVSRENLP {
	if x, ok := x.GetTlv().(*TunnelEncapTLV_TLV_SrEnlp); ok {
		return x.SrEnlp
	}
	return nil
}

func (x *TunnelEncapTLV_TLV) GetSrBindingSid() *TunnelEncapSubTLVSRBindingSID {
	if x, ok := x.GetTlv().(*TunnelEncapTLV_TLV_SrBindingSid); ok {
		return x.SrBindingSid
	}
	return nil
}

func (x *TunnelEncapTLV_TLV) GetSrSegmentList() *TunnelEncapSubTLVSRSegmentList {
	if x, ok := x.GetTlv().(*TunnelEncapTLV_TLV_SrSegmentList); ok {
		return x.SrSegmentList
	}
	return nil
}

type isTunnelEncapTLV_TLV_Tlv interface {
	isTunnelEncapTLV_TLV_Tlv()
}

type TunnelEncapTLV_TLV_Unknown struct {
	Unknown *TunnelEncapSubTLVUnknown `protobuf:"bytes,1,opt,name=unknown,proto3,oneof"`
}

type TunnelEncapTLV_TLV_Encapsulation struct {
	Encapsulation *TunnelEncapSubTLVEncapsulation `protobuf:"bytes,2,opt,name=encapsulation,proto3,oneof"`
}

type TunnelEncapTLV_TLV_Protocol struct {
	Protocol *TunnelEncapSubTLVProtocol `protobuf:"bytes,3,opt,name=protocol,proto3,oneof"`
}

type TunnelEncapTLV_TLV_Color struct {
	Color *TunnelEncapSubTLVColor `protobuf:"bytes,4,opt,name=color,proto3,oneof"`
}

type TunnelEncapTLV_TLV_EgressEndpoint struct {
	EgressEndpoint *TunnelEncapSubTLVEgressEndpoint `protobuf:"bytes,5,opt,name=egress_endpoint,json=egressEndpoint,proto3,oneof"`
}

type TunnelEncapTLV_TLV_UdpDestPort struct {
	UdpDestPort *TunnelEncapSubTLVUDPDestPort `protobuf:"bytes,6,opt,name=udp_dest_port,json=udpDestPort,proto3,oneof"`
}

type TunnelEncapTLV_TLV_SrPreference struct {
	SrPreference *TunnelEncapSubTLVSRPreference `protobuf:"bytes,7,opt,name=sr_preference,json=srPreference,proto3,oneof"`
}

type TunnelEncapTLV_TLV_SrPriority struct {
	SrPriority *TunnelEncapSubTLVSRPriority `protobuf:"bytes,8,opt,name=sr_priority,json=srPriority,proto3,oneof"`
}

type TunnelEncapTLV_TLV_SrCandidatePathName struct {
	SrCandidatePathName *TunnelEncapSubTLVSRCandidatePathName `protobuf:"bytes,9,opt,name=sr_candidate_path_name,json=srCandidatePathName,proto3,oneof"`
}

type TunnelEncapTLV_TLV_SrEnlp struct {
	SrEnlp *TunnelEncapSubTLVSRENLP `protobuf:"bytes,10,opt,name=sr_enlp,json=srEnlp,proto3,oneof"`
}

type TunnelEncapTLV_TLV_SrBindingSid struct {
	SrBindingSid *TunnelEncapSubTLVSRBindingSID `protobuf:"bytes,11,opt,name=sr_binding_sid,json=srBindingSid,proto3,oneof"`
}

type TunnelEncapTLV_TLV_SrSegmentList struct {
	SrSegmentList *TunnelEncapSubTLVSRSegmentList `protobuf:"bytes,12,opt,name=sr_segment_list,json=srSegmentList,proto3,oneof"`
}

func (*TunnelEncapTLV_TLV_Unknown) isTunnelEncapTLV_TLV_Tlv() {}

func (*TunnelEncapTLV_TLV_Encapsulation) isTunnelEncapTLV_TLV_Tlv() {}

func (*TunnelEncapTLV_TLV_Protocol) isTunnelEncapTLV_TLV_Tlv() {}

func (*TunnelEncapTLV_TLV_Color) isTunnelEncapTLV_TLV_Tlv() {}

func (*TunnelEncapTLV_TLV_EgressEndpoint) isTunnelEncapTLV_TLV_Tlv() {}

func (*TunnelEncapTLV_TLV_UdpDestPort) isTunnelEncapTLV_TLV_Tlv() {}

func (*TunnelEncapTLV_TLV_SrPreference) isTunnelEncapTLV_TLV_Tlv() {}

func (*TunnelEncapTLV_TLV_SrPriority) isTunnelEncapTLV_TLV_Tlv() {}

func (*TunnelEncapTLV_TLV_SrCandidatePathName) isTunnelEncapTLV_TLV_Tlv() {}

func (*TunnelEncapTLV_TLV_SrEnlp) isTunnelEncapTLV_TLV_Tlv() {}

func (*TunnelEncapTLV_TLV_SrBindingSid) isTunnelEncapTLV_TLV_Tlv() {}

func (*TunnelEncapTLV_TLV_SrSegmentList) isTunnelEncapTLV_TLV_Tlv() {}

type IP6ExtendedCommunitiesAttribute_Community struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Extcom:
	//
	//	*IP6ExtendedCommunitiesAttribute_Community_Ipv6AddressSpecific
	//	*IP6ExtendedCommunitiesAttribute_Community_RedirectIpv6AddressSpecific
	Extcom isIP6ExtendedCommunitiesAttribute_Community_Extcom `protobuf_oneof:"extcom"`
}

func (x *IP6ExtendedCommunitiesAttribute_Community) Reset() {
	*x = IP6ExtendedCommunitiesAttribute_Community{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IP6ExtendedCommunitiesAttribute_Community) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IP6ExtendedCommunitiesAttribute_Community) ProtoMessage() {}

func (x *IP6ExtendedCommunitiesAttribute_Community) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IP6ExtendedCommunitiesAttribute_Community.ProtoReflect.Descriptor instead.
func (*IP6ExtendedCommunitiesAttribute_Community) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{41, 0}
}

func (m *IP6ExtendedCommunitiesAttribute_Community) GetExtcom() isIP6ExtendedCommunitiesAttribute_Community_Extcom {
	if m != nil {
		return m.Extcom
	}
	return nil
}

func (x *IP6ExtendedCommunitiesAttribute_Community) GetIpv6AddressSpecific() *IPv6AddressSpecificExtended {
	if x, ok := x.GetExtcom().(*IP6ExtendedCommunitiesAttribute_Community_Ipv6AddressSpecific); ok {
		return x.Ipv6AddressSpecific
	}
	return nil
}

func (x *IP6ExtendedCommunitiesAttribute_Community) GetRedirectIpv6AddressSpecific() *RedirectIPv6AddressSpecificExtended {
	if x, ok := x.GetExtcom().(*IP6ExtendedCommunitiesAttribute_Community_RedirectIpv6AddressSpecific); ok {
		return x.RedirectIpv6AddressSpecific
	}
	return nil
}

type isIP6ExtendedCommunitiesAttribute_Community_Extcom interface {
	isIP6ExtendedCommunitiesAttribute_Community_Extcom()
}

type IP6ExtendedCommunitiesAttribute_Community_Ipv6AddressSpecific struct {
	Ipv6AddressSpecific *IPv6AddressSpecificExtended `protobuf:"bytes,1,opt,name=ipv6_address_specific,json=ipv6AddressSpecific,proto3,oneof"`
}

type IP6ExtendedCommunitiesAttribute_Community_RedirectIpv6AddressSpecific struct {
	RedirectIpv6AddressSpecific *RedirectIPv6AddressSpecificExtended `protobuf:"bytes,2,opt,name=redirect_ipv6_address_specific,json=redirectIpv6AddressSpecific,proto3,oneof"`
}

func (*IP6ExtendedCommunitiesAttribute_Community_Ipv6AddressSpecific) isIP6ExtendedCommunitiesAttribute_Community_Extcom() {
}

func (*IP6ExtendedCommunitiesAttribute_Community_RedirectIpv6AddressSpecific) isIP6ExtendedCommunitiesAttribute_Community_Extcom() {
}

type AigpAttribute_TLV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Tlv:
	//
	//	*AigpAttribute_TLV_Unknown
	//	*AigpAttribute_TLV_IgpMetric
	Tlv isAigpAttribute_TLV_Tlv `protobuf_oneof:"tlv"`
}

func (x *AigpAttribute_TLV) Reset() {
	*x = AigpAttribute_TLV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AigpAttribute_TLV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AigpAttribute_TLV) ProtoMessage() {}

func (x *AigpAttribute_TLV) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AigpAttribute_TLV.ProtoReflect.Descriptor instead.
func (*AigpAttribute_TLV) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{44, 0}
}

func (m *AigpAttribute_TLV) GetTlv() isAigpAttribute_TLV_Tlv {
	if m != nil {
		return m.Tlv
	}
	return nil
}

func (x *AigpAttribute_TLV) GetUnknown() *AigpTLVUnknown {
	if x, ok := x.GetTlv().(*AigpAttribute_TLV_Unknown); ok {
		return x.Unknown
	}
	return nil
}

func (x *AigpAttribute_TLV) GetIgpMetric() *AigpTLVIGPMetric {
	if x, ok := x.GetTlv().(*AigpAttribute_TLV_IgpMetric); ok {
		return x.IgpMetric
	}
	return nil
}

type isAigpAttribute_TLV_Tlv interface {
	isAigpAttribute_TLV_Tlv()
}

type AigpAttribute_TLV_Unknown struct {
	Unknown *AigpTLVUnknown `protobuf:"bytes,1,opt,name=unknown,proto3,oneof"`
}

type AigpAttribute_TLV_IgpMetric struct {
	IgpMetric *AigpTLVIGPMetric `protobuf:"bytes,2,opt,name=igp_metric,json=igpMetric,proto3,oneof"`
}

func (*AigpAttribute_TLV_Unknown) isAigpAttribute_TLV_Tlv() {}

func (*AigpAttribute_TLV_IgpMetric) isAigpAttribute_TLV_Tlv() {}

// tlv is one of:
type PrefixSID_TLV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Tlv:
	//
	//	*PrefixSID_TLV_L3Service
	//	*PrefixSID_TLV_L2Service
	Tlv isPrefixSID_TLV_Tlv `protobuf_oneof:"tlv"`
}

func (x *PrefixSID_TLV) Reset() {
	*x = PrefixSID_TLV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_attribute_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrefixSID_TLV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrefixSID_TLV) ProtoMessage() {}

func (x *PrefixSID_TLV) ProtoReflect() protoreflect.Message {
	mi := &file_attribute_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrefixSID_TLV.ProtoReflect.Descriptor instead.
func (*PrefixSID_TLV) Descriptor() ([]byte, []int) {
	return file_attribute_proto_rawDescGZIP(), []int{69, 0}
}

func (m *PrefixSID_TLV) GetTlv() isPrefixSID_TLV_Tlv {
	if m != nil {
		return m.Tlv
	}
	return nil
}

func (x *PrefixSID_TLV) GetL3Service() *SRv6L3ServiceTLV {
	if x, ok := x.GetTlv().(*PrefixSID_TLV_L3Service); ok {
		return x.L3Service
	}
	return nil
}

func (x *PrefixSID_TLV) GetL2Service() *SRv6L2ServiceTLV {
	if x, ok := x.GetTlv().(*PrefixSID_TLV_L2Service); ok {
		return x.L2Service
	}
	return nil
}

type isPrefixSID_TLV_Tlv interface {
	isPrefixSID_TLV_Tlv()
}

type PrefixSID_TLV_L3Service struct {
	// IndexLabelTLV Type 1 (not yet implemented)
	// OriginatorSRGBTLV Type 3 (not yet implemented)
	L3Service *SRv6L3ServiceTLV `protobuf:"bytes,3,opt,name=l3_service,json=l3Service,proto3,oneof"`
}

type PrefixSID_TLV_L2Service struct {
	L2Service *SRv6L2ServiceTLV `protobuf:"bytes,4,opt,name=l2_service,json=l2Service,proto3,oneof"`
}

func (*PrefixSID_TLV_L3Service) isPrefixSID_TLV_Tlv() {}

func (*PrefixSID_TLV_L2Service) isPrefixSID_TLV_Tlv() {}

var File_attribute_proto protoreflect.FileDescriptor

var file_attribute_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x05, 0x61, 0x70, 0x69, 0x70, 0x62, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x65, 0x78, 0x74, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x6e, 0x6c, 0x72, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xc9, 0x0b, 0x0a, 0x09, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x33,
	0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x48, 0x00, 0x52, 0x07, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x12, 0x30, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x48, 0x00, 0x52, 0x06, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x31, 0x0a, 0x07, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x41,
	0x73, 0x50, 0x61, 0x74, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x06, 0x61, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x68, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69,
	0x70, 0x62, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x12, 0x47,
	0x0a, 0x0f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x64, 0x69, 0x73,
	0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x45, 0x78, 0x69, 0x74, 0x44, 0x69, 0x73, 0x63, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x45,
	0x78, 0x69, 0x74, 0x44, 0x69, 0x73, 0x63, 0x12, 0x3a, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70,
	0x69, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50,
	0x72, 0x65, 0x66, 0x12, 0x4c, 0x0a, 0x10, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x0f, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x3f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x43, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70,
	0x69, 0x70, 0x62, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x6d, 0x70, 0x5f, 0x72, 0x65,
	0x61, 0x63, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x70,
	0x62, 0x2e, 0x4d, 0x70, 0x52, 0x65, 0x61, 0x63, 0x68, 0x4e, 0x4c, 0x52, 0x49, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x70, 0x52, 0x65, 0x61, 0x63,
	0x68, 0x12, 0x3e, 0x0a, 0x0a, 0x6d, 0x70, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x4d, 0x70,
	0x55, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x4e, 0x4c, 0x52, 0x49, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x70, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x63,
	0x68, 0x12, 0x58, 0x0a, 0x14, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x48, 0x00, 0x52, 0x13, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x61,
	0x73, 0x34, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x34, 0x50, 0x61, 0x74, 0x68, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x48, 0x00, 0x52, 0x07, 0x61, 0x73, 0x34, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x46, 0x0a, 0x0e, 0x61, 0x73, 0x34, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x70,
	0x62, 0x2e, 0x41, 0x73, 0x34, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x73, 0x34, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x0b, 0x70, 0x6d, 0x73,
	0x69, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x50, 0x6d, 0x73, 0x69, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x6d,
	0x73, 0x69, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x40, 0x0a, 0x0c, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x63,
	0x61, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x12, 0x62, 0x0a, 0x18, 0x69, 0x70,
	0x36, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61,
	0x70, 0x69, 0x70, 0x62, 0x2e, 0x49, 0x50, 0x36, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x48, 0x00, 0x52, 0x16, 0x69, 0x70, 0x36, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2a,
	0x0a, 0x04, 0x61, 0x69, 0x67, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61,
	0x70, 0x69, 0x70, 0x62, 0x2e, 0x41, 0x69, 0x67, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x61, 0x69, 0x67, 0x70, 0x12, 0x4f, 0x0a, 0x11, 0x6c, 0x61,
	0x72, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x4c, 0x61,
	0x72, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x48, 0x00, 0x52, 0x10, 0x6c, 0x61, 0x72, 0x67, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x02, 0x6c,
	0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e,
	0x4c, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x48, 0x00, 0x52, 0x02, 0x6c,
	0x73, 0x12, 0x31, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x73, 0x69, 0x64, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x53, 0x49, 0x44, 0x48, 0x00, 0x52, 0x09, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x53, 0x69, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x22, 0x29, 0x0a, 0x0f,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x22, 0xad, 0x01, 0x0a, 0x09, 0x41, 0x73, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x5b, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x41, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x41,
	0x53, 0x5f, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12,
	0x41, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x45, 0x44, 0x5f, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4e,
	0x43, 0x45, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x45,
	0x44, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x04, 0x22, 0x3f, 0x0a, 0x0f, 0x41, 0x73, 0x50, 0x61, 0x74,
	0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61,
	0x70, 0x69, 0x70, 0x62, 0x2e, 0x41, 0x73, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x2d, 0x0a, 0x10, 0x4e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x22, 0x2a, 0x0a, 0x16, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x45, 0x78, 0x69, 0x74, 0x44, 0x69, 0x73, 0x63, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6d, 0x65, 0x64, 0x22, 0x33, 0x0a, 0x12, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x66,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x22, 0x1a, 0x0a, 0x18, 0x41, 0x74, 0x6f, 0x6d,
	0x69, 0x63, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x22, 0x41, 0x0a, 0x13, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x6f, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x61, 0x73, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x38, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x22, 0x27, 0x0a, 0x15, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x28, 0x0a, 0x14, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x03, 0x69, 0x64, 0x73, 0x22, 0x7d, 0x0a, 0x14, 0x4d, 0x70, 0x52, 0x65, 0x61, 0x63, 0x68, 0x4e,
	0x4c, 0x52, 0x49, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x06,
	0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61,
	0x70, 0x69, 0x70, 0x62, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x52, 0x06, 0x66, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x73,
	0x12, 0x21, 0x0a, 0x05, 0x6e, 0x6c, 0x72, 0x69, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x4e, 0x4c, 0x52, 0x49, 0x52, 0x05, 0x6e, 0x6c,
	0x72, 0x69, 0x73, 0x22, 0x62, 0x0a, 0x16, 0x4d, 0x70, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68,
	0x4e, 0x4c, 0x52, 0x49, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x25, 0x0a,
	0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x52, 0x06, 0x66, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x12, 0x21, 0x0a, 0x05, 0x6e, 0x6c, 0x72, 0x69, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x4e, 0x4c, 0x52, 0x49,
	0x52, 0x05, 0x6e, 0x6c, 0x72, 0x69, 0x73, 0x22, 0x5a, 0x0a, 0x1c, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61,
	0x70, 0x69, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x22, 0x40, 0x0a, 0x10, 0x41, 0x73, 0x34, 0x50, 0x61, 0x74, 0x68, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x70,
	0x62, 0x2e, 0x41, 0x73, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x44, 0x0a, 0x16, 0x41, 0x73, 0x34, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x73, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x61, 0x73,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x65, 0x0a, 0x13, 0x50,
	0x6d, 0x73, 0x69, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x4a, 0x0a, 0x1e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x61,
	0x70, 0x53, 0x75, 0x62, 0x54, 0x4c, 0x56, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x22, 0x37,
	0x0a, 0x19, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x53, 0x75, 0x62,
	0x54, 0x4c, 0x56, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x2e, 0x0a, 0x16, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x53, 0x75, 0x62, 0x54, 0x4c, 0x56, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x55, 0x0a, 0x1d, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x53, 0x75, 0x62, 0x54, 0x4c, 0x56, 0x53, 0x52, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x56,
	0x0a, 0x24, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x53, 0x75, 0x62,
	0x54, 0x4c, 0x56, 0x53, 0x52, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x39, 0x0a, 0x1b, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x45, 0x6e, 0x63, 0x61, 0x70, 0x53, 0x75, 0x62, 0x54, 0x4c, 0x56, 0x53, 0x52, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x22, 0xa7, 0x01, 0x0a, 0x1d, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x61,
	0x70, 0x53, 0x75, 0x62, 0x54, 0x4c, 0x56, 0x53, 0x52, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x53, 0x49, 0x44, 0x12, 0x3b, 0x0a, 0x0e, 0x73, 0x72, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70,
	0x69, 0x70, 0x62, 0x2e, 0x53, 0x52, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x49, 0x44,
	0x48, 0x00, 0x52, 0x0c, 0x73, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x64,
	0x12, 0x41, 0x0a, 0x10, 0x73, 0x72, 0x76, 0x36, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69,
	0x70, 0x62, 0x2e, 0x53, 0x52, 0x76, 0x36, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x49,
	0x44, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x72, 0x76, 0x36, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x53, 0x69, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x62, 0x73, 0x69, 0x64, 0x22, 0x4e, 0x0a, 0x0c, 0x53,
	0x52, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x49, 0x44, 0x12, 0x15, 0x0a, 0x06, 0x73,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x69, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x73, 0x69, 0x64, 0x22, 0xb3, 0x01, 0x0a, 0x14,
	0x53, 0x52, 0x76, 0x36, 0x45, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x08, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x53,
	0x52, 0x76, 0x36, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52, 0x08, 0x62, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6c,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4c,
	0x65, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x65, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x66, 0x75, 0x6e, 0x63, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x66, 0x75, 0x6e, 0x63, 0x4c, 0x65, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x72, 0x67, 0x5f,
	0x6c, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x72, 0x67, 0x4c, 0x65,
	0x6e, 0x22, 0xc4, 0x01, 0x0a, 0x0e, 0x53, 0x52, 0x76, 0x36, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x53, 0x49, 0x44, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x69,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x62, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x5b, 0x0a, 0x1b, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x53, 0x52, 0x76, 0x36, 0x45, 0x6e, 0x64,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52, 0x19, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x22, 0x54, 0x0a, 0x17, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x53, 0x75, 0x62, 0x54, 0x4c, 0x56, 0x53, 0x52, 0x45,
	0x4e, 0x4c, 0x50, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x65, 0x6e, 0x6c,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e,
	0x45, 0x4e, 0x4c, 0x50, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x65, 0x6e, 0x6c, 0x70, 0x22, 0x38,
	0x0a, 0x08, 0x53, 0x52, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x6a, 0x0a, 0x0c, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x15, 0x0a, 0x06, 0x61, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x61, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x15, 0x0a,
	0x06, 0x62, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x62,
	0x46, 0x6c, 0x61, 0x67, 0x22, 0x4f, 0x0a, 0x0c, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x41, 0x12, 0x29, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0xa8, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x12, 0x29, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03,
	0x73, 0x69, 0x64, 0x12, 0x5b, 0x0a, 0x1b, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62,
	0x2e, 0x53, 0x52, 0x76, 0x36, 0x45, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x52, 0x19, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x22, 0xf4, 0x01, 0x0a, 0x1e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70,
	0x53, 0x75, 0x62, 0x54, 0x4c, 0x56, 0x53, 0x52, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x53, 0x52, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x49, 0x0a, 0x08,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x63,
	0x61, 0x70, 0x53, 0x75, 0x62, 0x54, 0x4c, 0x56, 0x53, 0x52, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x5e, 0x0a, 0x07, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x23, 0x0a, 0x01, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x41, 0x48, 0x00, 0x52, 0x01, 0x61, 0x12, 0x23, 0x0a, 0x01, 0x62, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x48, 0x00, 0x52, 0x01, 0x62, 0x42, 0x09, 0x0a, 0x07,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x3b, 0x0a, 0x1f, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x53, 0x75, 0x62, 0x54, 0x4c, 0x56, 0x45, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x32, 0x0a, 0x1c, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e,
	0x63, 0x61, 0x70, 0x53, 0x75, 0x62, 0x54, 0x4c, 0x56, 0x55, 0x44, 0x50, 0x44, 0x65, 0x73, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x44, 0x0a, 0x18, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x53, 0x75, 0x62, 0x54, 0x4c, 0x56, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd5,
	0x07, 0x0a, 0x0e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x54, 0x4c,
	0x56, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x6c, 0x76, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x54, 0x4c, 0x56, 0x2e, 0x54, 0x4c, 0x56, 0x52, 0x04,
	0x74, 0x6c, 0x76, 0x73, 0x1a, 0xff, 0x06, 0x0a, 0x03, 0x54, 0x4c, 0x56, 0x12, 0x3b, 0x0a, 0x07,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x61,
	0x70, 0x53, 0x75, 0x62, 0x54, 0x4c, 0x56, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x48, 0x00,
	0x52, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x4d, 0x0a, 0x0d, 0x65, 0x6e, 0x63,
	0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45,
	0x6e, 0x63, 0x61, 0x70, 0x53, 0x75, 0x62, 0x54, 0x4c, 0x56, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x61, 0x70,
	0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69,
	0x70, 0x62, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x53, 0x75,
	0x62, 0x54, 0x4c, 0x56, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x48, 0x00, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x35, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x53, 0x75, 0x62, 0x54, 0x4c,
	0x56, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x51, 0x0a, 0x0f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62,
	0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x53, 0x75, 0x62, 0x54,
	0x4c, 0x56, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x0e, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x49, 0x0a, 0x0d, 0x75, 0x64, 0x70, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x70,
	0x62, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x53, 0x75, 0x62,
	0x54, 0x4c, 0x56, 0x55, 0x44, 0x50, 0x44, 0x65, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x48, 0x00,
	0x52, 0x0b, 0x75, 0x64, 0x70, 0x44, 0x65, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x4b, 0x0a,
	0x0d, 0x73, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x53, 0x75, 0x62, 0x54, 0x4c, 0x56, 0x53, 0x52,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x72,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x73, 0x72,
	0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e,
	0x63, 0x61, 0x70, 0x53, 0x75, 0x62, 0x54, 0x4c, 0x56, 0x53, 0x52, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x72, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x62, 0x0a, 0x16, 0x73, 0x72, 0x5f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x45, 0x6e, 0x63, 0x61, 0x70, 0x53, 0x75, 0x62, 0x54, 0x4c, 0x56, 0x53, 0x52, 0x43, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x00,
	0x52, 0x13, 0x73, 0x72, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x73, 0x72, 0x5f, 0x65, 0x6e, 0x6c, 0x70,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x53, 0x75, 0x62, 0x54, 0x4c, 0x56,
	0x53, 0x52, 0x45, 0x4e, 0x4c, 0x50, 0x48, 0x00, 0x52, 0x06, 0x73, 0x72, 0x45, 0x6e, 0x6c, 0x70,
	0x12, 0x4c, 0x0a, 0x0e, 0x73, 0x72, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62,
	0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x53, 0x75, 0x62, 0x54,
	0x4c, 0x56, 0x53, 0x52, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x49, 0x44, 0x48, 0x00,
	0x52, 0x0c, 0x73, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x64, 0x12, 0x4f,
	0x0a, 0x0f, 0x73, 0x72, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x53, 0x75, 0x62, 0x54, 0x4c,
	0x56, 0x53, 0x52, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x0d, 0x73, 0x72, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x05, 0x0a, 0x03, 0x74, 0x6c, 0x76, 0x22, 0x41, 0x0a, 0x14, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x45, 0x6e, 0x63, 0x61, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x29,
	0x0a, 0x04, 0x74, 0x6c, 0x76, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61,
	0x70, 0x69, 0x70, 0x62, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70,
	0x54, 0x4c, 0x56, 0x52, 0x04, 0x74, 0x6c, 0x76, 0x73, 0x22, 0x98, 0x01, 0x0a, 0x1b, 0x49, 0x50,
	0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x69, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x22, 0x60, 0x0a, 0x23, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x49, 0x50, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x22, 0xda, 0x02, 0x0a, 0x1f, 0x49, 0x50, 0x36, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x52, 0x0a, 0x0b, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x49, 0x50, 0x36, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0xe2,
	0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x58, 0x0a, 0x15,
	0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70,
	0x69, 0x70, 0x62, 0x2e, 0x49, 0x50, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x48,
	0x00, 0x52, 0x13, 0x69, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x12, 0x71, 0x0a, 0x1e, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x49,
	0x50, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x48, 0x00, 0x52, 0x1b, 0x72, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x49, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x42, 0x08, 0x0a, 0x06, 0x65, 0x78, 0x74,
	0x63, 0x6f, 0x6d, 0x22, 0x2a, 0x0a, 0x10, 0x41, 0x69, 0x67, 0x70, 0x54, 0x4c, 0x56, 0x49, 0x47,
	0x50, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x22,
	0x3a, 0x0a, 0x0e, 0x41, 0x69, 0x67, 0x70, 0x54, 0x4c, 0x56, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x0d,
	0x41, 0x69, 0x67, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x2c, 0x0a,
	0x04, 0x74, 0x6c, 0x76, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70,
	0x69, 0x70, 0x62, 0x2e, 0x41, 0x69, 0x67, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x2e, 0x54, 0x4c, 0x56, 0x52, 0x04, 0x74, 0x6c, 0x76, 0x73, 0x1a, 0x79, 0x0a, 0x03, 0x54,
	0x4c, 0x56, 0x12, 0x31, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x41, 0x69, 0x67, 0x70,
	0x54, 0x4c, 0x56, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x38, 0x0a, 0x0a, 0x69, 0x67, 0x70, 0x5f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x70,
	0x62, 0x2e, 0x41, 0x69, 0x67, 0x70, 0x54, 0x4c, 0x56, 0x49, 0x47, 0x50, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x48, 0x00, 0x52, 0x09, 0x69, 0x67, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42,
	0x05, 0x0a, 0x03, 0x74, 0x6c, 0x76, 0x22, 0x75, 0x0a, 0x0e, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x31, 0x12, 0x1f, 0x0a, 0x0b,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x32, 0x22, 0x54, 0x0a,
	0x19, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x0b, 0x4c, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x62, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x62, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x76,
	0x36, 0x22, 0x8b, 0x01, 0x0a, 0x0a, 0x4c, 0x73, 0x49, 0x47, 0x50, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x64, 0x6f, 0x77, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x6f, 0x55, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x70,
	0x61, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x73, 0x73, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x4e, 0x73, 0x73, 0x61, 0x22,
	0x33, 0x0a, 0x09, 0x4c, 0x73, 0x53, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x65, 0x6e, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x10, 0x4c, 0x73, 0x53, 0x72, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x69, 0x70, 0x76, 0x34, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x70, 0x76, 0x36, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e,
	0x4c, 0x73, 0x53, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x22, 0x3a, 0x0a, 0x0e, 0x4c, 0x73, 0x53, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x28, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x4c, 0x73, 0x53, 0x72,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0xfd, 0x02,
	0x0a, 0x0f, 0x4c, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x4c, 0x73, 0x4e,
	0x6f, 0x64, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x76, 0x36, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x56, 0x36, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x61, 0x72, 0x65,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x69, 0x73, 0x69, 0x73, 0x41, 0x72, 0x65,
	0x61, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x12, 0x40, 0x0a, 0x0f, 0x73, 0x72, 0x5f,
	0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x4c, 0x73, 0x53, 0x72, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0e, 0x73, 0x72, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x72, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0c, 0x73, 0x72, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73,
	0x12, 0x3b, 0x0a, 0x0e, 0x73, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62,
	0x2e, 0x4c, 0x73, 0x53, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x0c, 0x73, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x9b, 0x04,
	0x0a, 0x0f, 0x4c, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x6e,
	0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2b, 0x0a,
	0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x5f, 0x76, 0x36, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x56, 0x36, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x76, 0x36, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x56, 0x36, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x74, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x67, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x67, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x31, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x13, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x31, 0x0a, 0x14, 0x75, 0x6e, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x02, 0x52, 0x13, 0x75, 0x6e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x10, 0x73,
	0x72, 0x5f, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x69, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x72, 0x41, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e,
	0x63, 0x79, 0x53, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x72, 0x6c, 0x67, 0x73, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x72, 0x6c, 0x67, 0x73, 0x22, 0x7f, 0x0a, 0x11, 0x4c,
	0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x12, 0x2e, 0x0a, 0x09, 0x69, 0x67, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x4c, 0x73, 0x49, 0x47,
	0x50, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x08, 0x69, 0x67, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x72, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x73, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x69, 0x64, 0x22, 0x7e, 0x0a, 0x18,
	0x4c, 0x73, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x49, 0x44, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x76, 0x0a, 0x13,
	0x4c, 0x73, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x4c, 0x73, 0x42, 0x67, 0x70,
	0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x49, 0x44, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x73, 0x69, 0x64, 0x22, 0xf8, 0x01, 0x0a, 0x19, 0x4c, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x45, 0x0a, 0x11, 0x62, 0x67, 0x70, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x4c, 0x73, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x49, 0x44, 0x52, 0x0e, 0x62, 0x67, 0x70, 0x50, 0x65,
	0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x69, 0x64, 0x12, 0x4f, 0x0a, 0x16, 0x62, 0x67, 0x70,
	0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x70,
	0x62, 0x2e, 0x4c, 0x73, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x49, 0x44, 0x52, 0x13, 0x62, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x41, 0x64,
	0x6a, 0x61, 0x63, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x10, 0x62, 0x67,
	0x70, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x4c, 0x73, 0x42,
	0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x49, 0x44,
	0x52, 0x0d, 0x62, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x74, 0x53, 0x69, 0x64, 0x22,
	0xe3, 0x01, 0x0a, 0x0b, 0x4c, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12,
	0x2a, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x4c, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x6c,
	0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x70,
	0x62, 0x2e, 0x4c, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x6e,
	0x6b, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x30, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e,
	0x4c, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x4a, 0x0a, 0x10, 0x62, 0x67, 0x70,
	0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x4c, 0x73, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x62, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x52, 0x0a, 0x10, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb2, 0x02, 0x0a, 0x16, 0x53, 0x52,
	0x76, 0x36, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x53, 0x75, 0x62, 0x53, 0x75,
	0x62, 0x54, 0x4c, 0x56, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x27, 0x0a, 0x0f, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x31, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x31, 0x0a, 0x14, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x55,
	0x0a, 0x0d, 0x53, 0x52, 0x76, 0x36, 0x53, 0x75, 0x62, 0x53, 0x75, 0x62, 0x54, 0x4c, 0x56, 0x12,
	0x3d, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x53, 0x52, 0x76, 0x36, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x53, 0x75, 0x62, 0x53, 0x75, 0x62, 0x54, 0x4c,
	0x56, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x42, 0x05,
	0x0a, 0x03, 0x74, 0x6c, 0x76, 0x22, 0x3a, 0x0a, 0x0e, 0x53, 0x52, 0x76, 0x36, 0x53, 0x75, 0x62,
	0x53, 0x75, 0x62, 0x54, 0x4c, 0x56, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x6c, 0x76, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x53, 0x52,
	0x76, 0x36, 0x53, 0x75, 0x62, 0x53, 0x75, 0x62, 0x54, 0x4c, 0x56, 0x52, 0x04, 0x74, 0x6c, 0x76,
	0x73, 0x22, 0x25, 0x0a, 0x0c, 0x53, 0x52, 0x76, 0x36, 0x53, 0x49, 0x44, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x31, 0x22, 0xa7, 0x02, 0x0a, 0x15, 0x53, 0x52, 0x76,
	0x36, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x54,
	0x4c, 0x56, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x03, 0x73, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x53, 0x52, 0x76, 0x36,
	0x53, 0x49, 0x44, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x2b, 0x0a, 0x11, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x62, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x4e, 0x0a, 0x0c,
	0x73, 0x75, 0x62, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6c, 0x76, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x53, 0x52, 0x76, 0x36, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x54, 0x4c, 0x56,
	0x2e, 0x53, 0x75, 0x62, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x73, 0x75, 0x62, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x73, 0x1a, 0x54, 0x0a, 0x0f,
	0x53, 0x75, 0x62, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x53, 0x52, 0x76, 0x36, 0x53, 0x75, 0x62,
	0x53, 0x75, 0x62, 0x54, 0x4c, 0x56, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x55, 0x0a, 0x0a, 0x53, 0x52, 0x76, 0x36, 0x53, 0x75, 0x62, 0x54, 0x4c, 0x56,
	0x12, 0x40, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x53, 0x52,
	0x76, 0x36, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x62,
	0x54, 0x4c, 0x56, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x05, 0x0a, 0x03, 0x74, 0x6c, 0x76, 0x22, 0x34, 0x0a, 0x0b, 0x53, 0x52, 0x76,
	0x36, 0x53, 0x75, 0x62, 0x54, 0x4c, 0x56, 0x73, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x6c, 0x76, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x53,
	0x52, 0x76, 0x36, 0x53, 0x75, 0x62, 0x54, 0x4c, 0x56, 0x52, 0x04, 0x74, 0x6c, 0x76, 0x73, 0x22,
	0xa3, 0x01, 0x0a, 0x10, 0x53, 0x52, 0x76, 0x36, 0x4c, 0x33, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x4c, 0x56, 0x12, 0x3f, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x6c, 0x76, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x53,
	0x52, 0x76, 0x36, 0x4c, 0x33, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x4c, 0x56, 0x2e,
	0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75,
	0x62, 0x54, 0x6c, 0x76, 0x73, 0x1a, 0x4e, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x53,
	0x52, 0x76, 0x36, 0x53, 0x75, 0x62, 0x54, 0x4c, 0x56, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa3, 0x01, 0x0a, 0x10, 0x53, 0x52, 0x76, 0x36, 0x4c, 0x32,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x4c, 0x56, 0x12, 0x3f, 0x0a, 0x08, 0x73, 0x75,
	0x62, 0x5f, 0x74, 0x6c, 0x76, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61,
	0x70, 0x69, 0x70, 0x62, 0x2e, 0x53, 0x52, 0x76, 0x36, 0x4c, 0x32, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x4c, 0x56, 0x2e, 0x53, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x6c, 0x76, 0x73, 0x1a, 0x4e, 0x0a, 0x0c, 0x53,
	0x75, 0x62, 0x54, 0x6c, 0x76, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61,
	0x70, 0x69, 0x70, 0x62, 0x2e, 0x53, 0x52, 0x76, 0x36, 0x53, 0x75, 0x62, 0x54, 0x4c, 0x56, 0x73,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb8, 0x01, 0x0a, 0x09,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x6c, 0x76,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x49, 0x44, 0x2e, 0x54, 0x4c, 0x56, 0x52, 0x04, 0x74,
	0x6c, 0x76, 0x73, 0x1a, 0x80, 0x01, 0x0a, 0x03, 0x54, 0x4c, 0x56, 0x12, 0x38, 0x0a, 0x0a, 0x6c,
	0x33, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x53, 0x52, 0x76, 0x36, 0x4c, 0x33, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x4c, 0x56, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x33, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x6c, 0x32, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x70,
	0x62, 0x2e, 0x53, 0x52, 0x76, 0x36, 0x4c, 0x32, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x4c, 0x56, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x32, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42,
	0x05, 0x0a, 0x03, 0x74, 0x6c, 0x76, 0x2a, 0xed, 0x05, 0x0a, 0x0c, 0x53, 0x52, 0x76, 0x36, 0x42,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x45, 0x4e, 0x44, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x50, 0x53, 0x50, 0x10, 0x02,
	0x12, 0x10, 0x0a, 0x0c, 0x45, 0x4e, 0x44, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x55, 0x53, 0x50,
	0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x44, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x50,
	0x53, 0x50, 0x5f, 0x55, 0x53, 0x50, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x4e, 0x44, 0x58,
	0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x4e, 0x44, 0x58, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f,
	0x50, 0x53, 0x50, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x4e, 0x44, 0x58, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x5f, 0x55, 0x53, 0x50, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4e, 0x44, 0x58,
	0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x50, 0x53, 0x50, 0x5f, 0x55, 0x53, 0x50, 0x10, 0x08, 0x12,
	0x08, 0x0a, 0x04, 0x45, 0x4e, 0x44, 0x54, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x4e, 0x44,
	0x54, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x50, 0x53, 0x50, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d,
	0x45, 0x4e, 0x44, 0x54, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x55, 0x53, 0x50, 0x10, 0x0b, 0x12,
	0x15, 0x0a, 0x11, 0x45, 0x4e, 0x44, 0x54, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x50, 0x53, 0x50,
	0x5f, 0x55, 0x53, 0x50, 0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x4e, 0x44, 0x5f, 0x42, 0x36,
	0x5f, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x10, 0x0e, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x4e, 0x44,
	0x5f, 0x42, 0x4d, 0x10, 0x0f, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4e, 0x44, 0x5f, 0x44, 0x58, 0x36,
	0x10, 0x10, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4e, 0x44, 0x5f, 0x44, 0x58, 0x34, 0x10, 0x11, 0x12,
	0x0b, 0x0a, 0x07, 0x45, 0x4e, 0x44, 0x5f, 0x44, 0x54, 0x36, 0x10, 0x12, 0x12, 0x0b, 0x0a, 0x07,
	0x45, 0x4e, 0x44, 0x5f, 0x44, 0x54, 0x34, 0x10, 0x13, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x4e, 0x44,
	0x5f, 0x44, 0x54, 0x34, 0x36, 0x10, 0x14, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4e, 0x44, 0x5f, 0x44,
	0x58, 0x32, 0x10, 0x15, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x4e, 0x44, 0x5f, 0x44, 0x58, 0x32, 0x56,
	0x10, 0x16, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x4e, 0x44, 0x5f, 0x44, 0x54, 0x32, 0x55, 0x10, 0x17,
	0x12, 0x0c, 0x0a, 0x08, 0x45, 0x4e, 0x44, 0x5f, 0x44, 0x54, 0x32, 0x4d, 0x10, 0x18, 0x12, 0x15,
	0x0a, 0x11, 0x45, 0x4e, 0x44, 0x5f, 0x42, 0x36, 0x5f, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x5f,
	0x52, 0x65, 0x64, 0x10, 0x1b, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x4e, 0x44, 0x5f, 0x57, 0x49, 0x54,
	0x48, 0x5f, 0x55, 0x53, 0x44, 0x10, 0x1c, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x44, 0x5f, 0x57,
	0x49, 0x54, 0x48, 0x5f, 0x50, 0x53, 0x50, 0x5f, 0x55, 0x53, 0x44, 0x10, 0x1d, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x4e, 0x44, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x55, 0x53, 0x50, 0x5f, 0x55, 0x53,
	0x44, 0x10, 0x1e, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x4e, 0x44, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f,
	0x50, 0x53, 0x50, 0x5f, 0x55, 0x53, 0x50, 0x5f, 0x55, 0x53, 0x44, 0x10, 0x1f, 0x12, 0x11, 0x0a,
	0x0d, 0x45, 0x4e, 0x44, 0x58, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x55, 0x53, 0x44, 0x10, 0x20,
	0x12, 0x15, 0x0a, 0x11, 0x45, 0x4e, 0x44, 0x58, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x50, 0x53,
	0x50, 0x5f, 0x55, 0x53, 0x44, 0x10, 0x21, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4e, 0x44, 0x58, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x5f, 0x55, 0x53, 0x50, 0x5f, 0x55, 0x53, 0x44, 0x10, 0x22, 0x12, 0x19,
	0x0a, 0x15, 0x45, 0x4e, 0x44, 0x58, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x50, 0x53, 0x50, 0x5f,
	0x55, 0x53, 0x50, 0x5f, 0x55, 0x53, 0x44, 0x10, 0x23, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x4e, 0x44,
	0x54, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x55, 0x53, 0x44, 0x10, 0x24, 0x12, 0x15, 0x0a, 0x11,
	0x45, 0x4e, 0x44, 0x54, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x50, 0x53, 0x50, 0x5f, 0x55, 0x53,
	0x44, 0x10, 0x25, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4e, 0x44, 0x54, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x55, 0x53, 0x50, 0x5f, 0x55, 0x53, 0x44, 0x10, 0x26, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x4e,
	0x44, 0x54, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x50, 0x53, 0x50, 0x5f, 0x55, 0x53, 0x50, 0x5f,
	0x55, 0x53, 0x44, 0x10, 0x27, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x4e, 0x44, 0x4d, 0x5f, 0x47, 0x54,
	0x50, 0x36, 0x44, 0x10, 0x45, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x4e, 0x44, 0x4d, 0x5f, 0x47, 0x54,
	0x50, 0x36, 0x44, 0x49, 0x10, 0x46, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x4e, 0x44, 0x4d, 0x5f, 0x47,
	0x54, 0x50, 0x36, 0x45, 0x10, 0x47, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x4e, 0x44, 0x4d, 0x5f, 0x47,
	0x54, 0x50, 0x34, 0x45, 0x10, 0x48, 0x2a, 0x44, 0x0a, 0x08, 0x45, 0x4e, 0x4c, 0x50, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x54, 0x79, 0x70, 0x65, 0x31, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x54,
	0x79, 0x70, 0x65, 0x32, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x79, 0x70, 0x65, 0x33, 0x10,
	0x03, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x79, 0x70, 0x65, 0x34, 0x10, 0x04, 0x42, 0x24, 0x5a, 0x22,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x73, 0x72, 0x67, 0x2f,
	0x67, 0x6f, 0x62, 0x67, 0x70, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x3b, 0x61, 0x70, 0x69,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_attribute_proto_rawDescOnce sync.Once
	file_attribute_proto_rawDescData = file_attribute_proto_rawDesc
)

func file_attribute_proto_rawDescGZIP() []byte {
	file_attribute_proto_rawDescOnce.Do(func() {
		file_attribute_proto_rawDescData = protoimpl.X.CompressGZIP(file_attribute_proto_rawDescData)
	})
	return file_attribute_proto_rawDescData
}

var file_attribute_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_attribute_proto_msgTypes = make([]protoimpl.MessageInfo, 78)
var file_attribute_proto_goTypes = []interface{}{
	(SRv6Behavior)(0),                                 // 0: apipb.SRv6Behavior
	(ENLPType)(0),                                     // 1: apipb.ENLPType
	(AsSegment_Type)(0),                               // 2: apipb.AsSegment.Type
	(*Attribute)(nil),                                 // 3: apipb.Attribute
	(*OriginAttribute)(nil),                           // 4: apipb.OriginAttribute
	(*AsSegment)(nil),                                 // 5: apipb.AsSegment
	(*AsPathAttribute)(nil),                           // 6: apipb.AsPathAttribute
	(*NextHopAttribute)(nil),                          // 7: apipb.NextHopAttribute
	(*MultiExitDiscAttribute)(nil),                    // 8: apipb.MultiExitDiscAttribute
	(*LocalPrefAttribute)(nil),                        // 9: apipb.LocalPrefAttribute
	(*AtomicAggregateAttribute)(nil),                  // 10: apipb.AtomicAggregateAttribute
	(*AggregatorAttribute)(nil),                       // 11: apipb.AggregatorAttribute
	(*CommunitiesAttribute)(nil),                      // 12: apipb.CommunitiesAttribute
	(*OriginatorIdAttribute)(nil),                     // 13: apipb.OriginatorIdAttribute
	(*ClusterListAttribute)(nil),                      // 14: apipb.ClusterListAttribute
	(*MpReachNLRIAttribute)(nil),                      // 15: apipb.MpReachNLRIAttribute
	(*MpUnreachNLRIAttribute)(nil),                    // 16: apipb.MpUnreachNLRIAttribute
	(*ExtendedCommunitiesAttribute)(nil),              // 17: apipb.ExtendedCommunitiesAttribute
	(*As4PathAttribute)(nil),                          // 18: apipb.As4PathAttribute
	(*As4AggregatorAttribute)(nil),                    // 19: apipb.As4AggregatorAttribute
	(*PmsiTunnelAttribute)(nil),                       // 20: apipb.PmsiTunnelAttribute
	(*TunnelEncapSubTLVEncapsulation)(nil),            // 21: apipb.TunnelEncapSubTLVEncapsulation
	(*TunnelEncapSubTLVProtocol)(nil),                 // 22: apipb.TunnelEncapSubTLVProtocol
	(*TunnelEncapSubTLVColor)(nil),                    // 23: apipb.TunnelEncapSubTLVColor
	(*TunnelEncapSubTLVSRPreference)(nil),             // 24: apipb.TunnelEncapSubTLVSRPreference
	(*TunnelEncapSubTLVSRCandidatePathName)(nil),      // 25: apipb.TunnelEncapSubTLVSRCandidatePathName
	(*TunnelEncapSubTLVSRPriority)(nil),               // 26: apipb.TunnelEncapSubTLVSRPriority
	(*TunnelEncapSubTLVSRBindingSID)(nil),             // 27: apipb.TunnelEncapSubTLVSRBindingSID
	(*SRBindingSID)(nil),                              // 28: apipb.SRBindingSID
	(*SRv6EndPointBehavior)(nil),                      // 29: apipb.SRv6EndPointBehavior
	(*SRv6BindingSID)(nil),                            // 30: apipb.SRv6BindingSID
	(*TunnelEncapSubTLVSRENLP)(nil),                   // 31: apipb.TunnelEncapSubTLVSRENLP
	(*SRWeight)(nil),                                  // 32: apipb.SRWeight
	(*SegmentFlags)(nil),                              // 33: apipb.SegmentFlags
	(*SegmentTypeA)(nil),                              // 34: apipb.SegmentTypeA
	(*SegmentTypeB)(nil),                              // 35: apipb.SegmentTypeB
	(*TunnelEncapSubTLVSRSegmentList)(nil),            // 36: apipb.TunnelEncapSubTLVSRSegmentList
	(*TunnelEncapSubTLVEgressEndpoint)(nil),           // 37: apipb.TunnelEncapSubTLVEgressEndpoint
	(*TunnelEncapSubTLVUDPDestPort)(nil),              // 38: apipb.TunnelEncapSubTLVUDPDestPort
	(*TunnelEncapSubTLVUnknown)(nil),                  // 39: apipb.TunnelEncapSubTLVUnknown
	(*TunnelEncapTLV)(nil),                            // 40: apipb.TunnelEncapTLV
	(*TunnelEncapAttribute)(nil),                      // 41: apipb.TunnelEncapAttribute
	(*IPv6AddressSpecificExtended)(nil),               // 42: apipb.IPv6AddressSpecificExtended
	(*RedirectIPv6AddressSpecificExtended)(nil),       // 43: apipb.RedirectIPv6AddressSpecificExtended
	(*IP6ExtendedCommunitiesAttribute)(nil),           // 44: apipb.IP6ExtendedCommunitiesAttribute
	(*AigpTLVIGPMetric)(nil),                          // 45: apipb.AigpTLVIGPMetric
	(*AigpTLVUnknown)(nil),                            // 46: apipb.AigpTLVUnknown
	(*AigpAttribute)(nil),                             // 47: apipb.AigpAttribute
	(*LargeCommunity)(nil),                            // 48: apipb.LargeCommunity
	(*LargeCommunitiesAttribute)(nil),                 // 49: apipb.LargeCommunitiesAttribute
	(*LsNodeFlags)(nil),                               // 50: apipb.LsNodeFlags
	(*LsIGPFlags)(nil),                                // 51: apipb.LsIGPFlags
	(*LsSrRange)(nil),                                 // 52: apipb.LsSrRange
	(*LsSrCapabilities)(nil),                          // 53: apipb.LsSrCapabilities
	(*LsSrLocalBlock)(nil),                            // 54: apipb.LsSrLocalBlock
	(*LsAttributeNode)(nil),                           // 55: apipb.LsAttributeNode
	(*LsAttributeLink)(nil),                           // 56: apipb.LsAttributeLink
	(*LsAttributePrefix)(nil),                         // 57: apipb.LsAttributePrefix
	(*LsBgpPeerSegmentSIDFlags)(nil),                  // 58: apipb.LsBgpPeerSegmentSIDFlags
	(*LsBgpPeerSegmentSID)(nil),                       // 59: apipb.LsBgpPeerSegmentSID
	(*LsAttributeBgpPeerSegment)(nil),                 // 60: apipb.LsAttributeBgpPeerSegment
	(*LsAttribute)(nil),                               // 61: apipb.LsAttribute
	(*UnknownAttribute)(nil),                          // 62: apipb.UnknownAttribute
	(*SRv6StructureSubSubTLV)(nil),                    // 63: apipb.SRv6StructureSubSubTLV
	(*SRv6SubSubTLV)(nil),                             // 64: apipb.SRv6SubSubTLV
	(*SRv6SubSubTLVs)(nil),                            // 65: apipb.SRv6SubSubTLVs
	(*SRv6SIDFlags)(nil),                              // 66: apipb.SRv6SIDFlags
	(*SRv6InformationSubTLV)(nil),                     // 67: apipb.SRv6InformationSubTLV
	(*SRv6SubTLV)(nil),                                // 68: apipb.SRv6SubTLV
	(*SRv6SubTLVs)(nil),                               // 69: apipb.SRv6SubTLVs
	(*SRv6L3ServiceTLV)(nil),                          // 70: apipb.SRv6L3ServiceTLV
	(*SRv6L2ServiceTLV)(nil),                          // 71: apipb.SRv6L2ServiceTLV
	(*PrefixSID)(nil),                                 // 72: apipb.PrefixSID
	(*TunnelEncapSubTLVSRSegmentList_Segment)(nil),    // 73: apipb.TunnelEncapSubTLVSRSegmentList.Segment
	(*TunnelEncapTLV_TLV)(nil),                        // 74: apipb.TunnelEncapTLV.TLV
	(*IP6ExtendedCommunitiesAttribute_Community)(nil), // 75: apipb.IP6ExtendedCommunitiesAttribute.Community
	(*AigpAttribute_TLV)(nil),                         // 76: apipb.AigpAttribute.TLV
	nil,                                               // 77: apipb.SRv6InformationSubTLV.SubSubTlvsEntry
	nil,                                               // 78: apipb.SRv6L3ServiceTLV.SubTlvsEntry
	nil,                                               // 79: apipb.SRv6L2ServiceTLV.SubTlvsEntry
	(*PrefixSID_TLV)(nil),                             // 80: apipb.PrefixSID.TLV
	(*Family)(nil),                                    // 81: apipb.Family
	(*NLRI)(nil),                                      // 82: apipb.NLRI
	(*ExtendedCommunity)(nil),                         // 83: apipb.ExtendedCommunity
}
var file_attribute_proto_depIdxs = []int32{
	62, // 0: apipb.Attribute.unknown:type_name -> apipb.UnknownAttribute
	4,  // 1: apipb.Attribute.origin:type_name -> apipb.OriginAttribute
	6,  // 2: apipb.Attribute.as_path:type_name -> apipb.AsPathAttribute
	7,  // 3: apipb.Attribute.next_hop:type_name -> apipb.NextHopAttribute
	8,  // 4: apipb.Attribute.multi_exit_disc:type_name -> apipb.MultiExitDiscAttribute
	9,  // 5: apipb.Attribute.local_pref:type_name -> apipb.LocalPrefAttribute
	10, // 6: apipb.Attribute.atomic_aggregate:type_name -> apipb.AtomicAggregateAttribute
	11, // 7: apipb.Attribute.aggregator:type_name -> apipb.AggregatorAttribute
	12, // 8: apipb.Attribute.communities:type_name -> apipb.CommunitiesAttribute
	13, // 9: apipb.Attribute.originator_id:type_name -> apipb.OriginatorIdAttribute
	14, // 10: apipb.Attribute.cluster_list:type_name -> apipb.ClusterListAttribute
	15, // 11: apipb.Attribute.mp_reach:type_name -> apipb.MpReachNLRIAttribute
	16, // 12: apipb.Attribute.mp_unreach:type_name -> apipb.MpUnreachNLRIAttribute
	17, // 13: apipb.Attribute.extended_communities:type_name -> apipb.ExtendedCommunitiesAttribute
	18, // 14: apipb.Attribute.as4_path:type_name -> apipb.As4PathAttribute
	19, // 15: apipb.Attribute.as4_aggregator:type_name -> apipb.As4AggregatorAttribute
	20, // 16: apipb.Attribute.pmsi_tunnel:type_name -> apipb.PmsiTunnelAttribute
	41, // 17: apipb.Attribute.tunnel_encap:type_name -> apipb.TunnelEncapAttribute
	44, // 18: apipb.Attribute.ip6_extended_communities:type_name -> apipb.IP6ExtendedCommunitiesAttribute
	47, // 19: apipb.Attribute.aigp:type_name -> apipb.AigpAttribute
	49, // 20: apipb.Attribute.large_communities:type_name -> apipb.LargeCommunitiesAttribute
	61, // 21: apipb.Attribute.ls:type_name -> apipb.LsAttribute
	72, // 22: apipb.Attribute.prefix_sid:type_name -> apipb.PrefixSID
	2,  // 23: apipb.AsSegment.type:type_name -> apipb.AsSegment.Type
	5,  // 24: apipb.AsPathAttribute.segments:type_name -> apipb.AsSegment
	81, // 25: apipb.MpReachNLRIAttribute.family:type_name -> apipb.Family
	82, // 26: apipb.MpReachNLRIAttribute.nlris:type_name -> apipb.NLRI
	81, // 27: apipb.MpUnreachNLRIAttribute.family:type_name -> apipb.Family
	82, // 28: apipb.MpUnreachNLRIAttribute.nlris:type_name -> apipb.NLRI
	83, // 29: apipb.ExtendedCommunitiesAttribute.communities:type_name -> apipb.ExtendedCommunity
	5,  // 30: apipb.As4PathAttribute.segments:type_name -> apipb.AsSegment
	28, // 31: apipb.TunnelEncapSubTLVSRBindingSID.sr_binding_sid:type_name -> apipb.SRBindingSID
	30, // 32: apipb.TunnelEncapSubTLVSRBindingSID.srv6_binding_sid:type_name -> apipb.SRv6BindingSID
	0,  // 33: apipb.SRv6EndPointBehavior.behavior:type_name -> apipb.SRv6Behavior
	29, // 34: apipb.SRv6BindingSID.endpoint_behavior_structure:type_name -> apipb.SRv6EndPointBehavior
	1,  // 35: apipb.TunnelEncapSubTLVSRENLP.enlp:type_name -> apipb.ENLPType
	33, // 36: apipb.SegmentTypeA.flags:type_name -> apipb.SegmentFlags
	33, // 37: apipb.SegmentTypeB.flags:type_name -> apipb.SegmentFlags
	29, // 38: apipb.SegmentTypeB.endpoint_behavior_structure:type_name -> apipb.SRv6EndPointBehavior
	32, // 39: apipb.TunnelEncapSubTLVSRSegmentList.weight:type_name -> apipb.SRWeight
	73, // 40: apipb.TunnelEncapSubTLVSRSegmentList.segments:type_name -> apipb.TunnelEncapSubTLVSRSegmentList.Segment
	74, // 41: apipb.TunnelEncapTLV.tlvs:type_name -> apipb.TunnelEncapTLV.TLV
	40, // 42: apipb.TunnelEncapAttribute.tlvs:type_name -> apipb.TunnelEncapTLV
	75, // 43: apipb.IP6ExtendedCommunitiesAttribute.communities:type_name -> apipb.IP6ExtendedCommunitiesAttribute.Community
	76, // 44: apipb.AigpAttribute.tlvs:type_name -> apipb.AigpAttribute.TLV
	48, // 45: apipb.LargeCommunitiesAttribute.communities:type_name -> apipb.LargeCommunity
	52, // 46: apipb.LsSrCapabilities.ranges:type_name -> apipb.LsSrRange
	52, // 47: apipb.LsSrLocalBlock.ranges:type_name -> apipb.LsSrRange
	50, // 48: apipb.LsAttributeNode.flags:type_name -> apipb.LsNodeFlags
	53, // 49: apipb.LsAttributeNode.sr_capabilities:type_name -> apipb.LsSrCapabilities
	54, // 50: apipb.LsAttributeNode.sr_local_block:type_name -> apipb.LsSrLocalBlock
	51, // 51: apipb.LsAttributePrefix.igp_flags:type_name -> apipb.LsIGPFlags
	58, // 52: apipb.LsBgpPeerSegmentSID.flags:type_name -> apipb.LsBgpPeerSegmentSIDFlags
	59, // 53: apipb.LsAttributeBgpPeerSegment.bgp_peer_node_sid:type_name -> apipb.LsBgpPeerSegmentSID
	59, // 54: apipb.LsAttributeBgpPeerSegment.bgp_peer_adjacency_sid:type_name -> apipb.LsBgpPeerSegmentSID
	59, // 55: apipb.LsAttributeBgpPeerSegment.bgp_peer_set_sid:type_name -> apipb.LsBgpPeerSegmentSID
	55, // 56: apipb.LsAttribute.node:type_name -> apipb.LsAttributeNode
	56, // 57: apipb.LsAttribute.link:type_name -> apipb.LsAttributeLink
	57, // 58: apipb.LsAttribute.prefix:type_name -> apipb.LsAttributePrefix
	60, // 59: apipb.LsAttribute.bgp_peer_segment:type_name -> apipb.LsAttributeBgpPeerSegment
	63, // 60: apipb.SRv6SubSubTLV.structure:type_name -> apipb.SRv6StructureSubSubTLV
	64, // 61: apipb.SRv6SubSubTLVs.tlvs:type_name -> apipb.SRv6SubSubTLV
	66, // 62: apipb.SRv6InformationSubTLV.flags:type_name -> apipb.SRv6SIDFlags
	77, // 63: apipb.SRv6InformationSubTLV.sub_sub_tlvs:type_name -> apipb.SRv6InformationSubTLV.SubSubTlvsEntry
	67, // 64: apipb.SRv6SubTLV.information:type_name -> apipb.SRv6InformationSubTLV
	68, // 65: apipb.SRv6SubTLVs.tlvs:type_name -> apipb.SRv6SubTLV
	78, // 66: apipb.SRv6L3ServiceTLV.sub_tlvs:type_name -> apipb.SRv6L3ServiceTLV.SubTlvsEntry
	79, // 67: apipb.SRv6L2ServiceTLV.sub_tlvs:type_name -> apipb.SRv6L2ServiceTLV.SubTlvsEntry
	80, // 68: apipb.PrefixSID.tlvs:type_name -> apipb.PrefixSID.TLV
	34, // 69: apipb.TunnelEncapSubTLVSRSegmentList.Segment.a:type_name -> apipb.SegmentTypeA
	35, // 70: apipb.TunnelEncapSubTLVSRSegmentList.Segment.b:type_name -> apipb.SegmentTypeB
	39, // 71: apipb.TunnelEncapTLV.TLV.unknown:type_name -> apipb.TunnelEncapSubTLVUnknown
	21, // 72: apipb.TunnelEncapTLV.TLV.encapsulation:type_name -> apipb.TunnelEncapSubTLVEncapsulation
	22, // 73: apipb.TunnelEncapTLV.TLV.protocol:type_name -> apipb.TunnelEncapSubTLVProtocol
	23, // 74: apipb.TunnelEncapTLV.TLV.color:type_name -> apipb.TunnelEncapSubTLVColor
	37, // 75: apipb.TunnelEncapTLV.TLV.egress_endpoint:type_name -> apipb.TunnelEncapSubTLVEgressEndpoint
	38, // 76: apipb.TunnelEncapTLV.TLV.udp_dest_port:type_name -> apipb.TunnelEncapSubTLVUDPDestPort
	24, // 77: apipb.TunnelEncapTLV.TLV.sr_preference:type_name -> apipb.TunnelEncapSubTLVSRPreference
	26, // 78: apipb.TunnelEncapTLV.TLV.sr_priority:type_name -> apipb.TunnelEncapSubTLVSRPriority
	25, // 79: apipb.TunnelEncapTLV.TLV.sr_candidate_path_name:type_name -> apipb.TunnelEncapSubTLVSRCandidatePathName
	31, // 80: apipb.TunnelEncapTLV.TLV.sr_enlp:type_name -> apipb.TunnelEncapSubTLVSRENLP
	27, // 81: apipb.TunnelEncapTLV.TLV.sr_binding_sid:type_name -> apipb.TunnelEncapSubTLVSRBindingSID
	36, // 82: apipb.TunnelEncapTLV.TLV.sr_segment_list:type_name -> apipb.TunnelEncapSubTLVSRSegmentList
	42, // 83: apipb.IP6ExtendedCommunitiesAttribute.Community.ipv6_address_specific:type_name -> apipb.IPv6AddressSpecificExtended
	43, // 84: apipb.IP6ExtendedCommunitiesAttribute.Community.redirect_ipv6_address_specific:type_name -> apipb.RedirectIPv6AddressSpecificExtended
	46, // 85: apipb.AigpAttribute.TLV.unknown:type_name -> apipb.AigpTLVUnknown
	45, // 86: apipb.AigpAttribute.TLV.igp_metric:type_name -> apipb.AigpTLVIGPMetric
	65, // 87: apipb.SRv6InformationSubTLV.SubSubTlvsEntry.value:type_name -> apipb.SRv6SubSubTLVs
	69, // 88: apipb.SRv6L3ServiceTLV.SubTlvsEntry.value:type_name -> apipb.SRv6SubTLVs
	69, // 89: apipb.SRv6L2ServiceTLV.SubTlvsEntry.value:type_name -> apipb.SRv6SubTLVs
	70, // 90: apipb.PrefixSID.TLV.l3_service:type_name -> apipb.SRv6L3ServiceTLV
	71, // 91: apipb.PrefixSID.TLV.l2_service:type_name -> apipb.SRv6L2ServiceTLV
	92, // [92:92] is the sub-list for method output_type
	92, // [92:92] is the sub-list for method input_type
	92, // [92:92] is the sub-list for extension type_name
	92, // [92:92] is the sub-list for extension extendee
	0,  // [0:92] is the sub-list for field type_name
}

func init() { file_attribute_proto_init() }
func file_attribute_proto_init() {
	if File_attribute_proto != nil {
		return
	}
	file_common_proto_init()
	file_extcom_proto_init()
	file_nlri_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_attribute_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OriginAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsSegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsPathAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextHopAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiExitDiscAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalPrefAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AtomicAggregateAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregatorAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommunitiesAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OriginatorIdAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterListAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MpReachNLRIAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MpUnreachNLRIAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtendedCommunitiesAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*As4PathAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*As4AggregatorAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PmsiTunnelAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelEncapSubTLVEncapsulation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelEncapSubTLVProtocol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelEncapSubTLVColor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelEncapSubTLVSRPreference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelEncapSubTLVSRCandidatePathName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelEncapSubTLVSRPriority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelEncapSubTLVSRBindingSID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRBindingSID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRv6EndPointBehavior); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRv6BindingSID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelEncapSubTLVSRENLP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRWeight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmentFlags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmentTypeA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmentTypeB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelEncapSubTLVSRSegmentList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelEncapSubTLVEgressEndpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelEncapSubTLVUDPDestPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelEncapSubTLVUnknown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelEncapTLV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelEncapAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPv6AddressSpecificExtended); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedirectIPv6AddressSpecificExtended); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IP6ExtendedCommunitiesAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AigpTLVIGPMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AigpTLVUnknown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AigpAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LargeCommunity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LargeCommunitiesAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LsNodeFlags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LsIGPFlags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LsSrRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LsSrCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LsSrLocalBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LsAttributeNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LsAttributeLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LsAttributePrefix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LsBgpPeerSegmentSIDFlags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LsBgpPeerSegmentSID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LsAttributeBgpPeerSegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LsAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnknownAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRv6StructureSubSubTLV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRv6SubSubTLV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRv6SubSubTLVs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRv6SIDFlags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRv6InformationSubTLV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRv6SubTLV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRv6SubTLVs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRv6L3ServiceTLV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRv6L2ServiceTLV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrefixSID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelEncapSubTLVSRSegmentList_Segment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelEncapTLV_TLV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IP6ExtendedCommunitiesAttribute_Community); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AigpAttribute_TLV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_attribute_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrefixSID_TLV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_attribute_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Attribute_Unknown)(nil),
		(*Attribute_Origin)(nil),
		(*Attribute_AsPath)(nil),
		(*Attribute_NextHop)(nil),
		(*Attribute_MultiExitDisc)(nil),
		(*Attribute_LocalPref)(nil),
		(*Attribute_AtomicAggregate)(nil),
		(*Attribute_Aggregator)(nil),
		(*Attribute_Communities)(nil),
		(*Attribute_OriginatorId)(nil),
		(*Attribute_ClusterList)(nil),
		(*Attribute_MpReach)(nil),
		(*Attribute_MpUnreach)(nil),
		(*Attribute_ExtendedCommunities)(nil),
		(*Attribute_As4Path)(nil),
		(*Attribute_As4Aggregator)(nil),
		(*Attribute_PmsiTunnel)(nil),
		(*Attribute_TunnelEncap)(nil),
		(*Attribute_Ip6ExtendedCommunities)(nil),
		(*Attribute_Aigp)(nil),
		(*Attribute_LargeCommunities)(nil),
		(*Attribute_Ls)(nil),
		(*Attribute_PrefixSid)(nil),
	}
	file_attribute_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*TunnelEncapSubTLVSRBindingSID_SrBindingSid)(nil),
		(*TunnelEncapSubTLVSRBindingSID_Srv6BindingSid)(nil),
	}
	file_attribute_proto_msgTypes[61].OneofWrappers = []interface{}{
		(*SRv6SubSubTLV_Structure)(nil),
	}
	file_attribute_proto_msgTypes[65].OneofWrappers = []interface{}{
		(*SRv6SubTLV_Information)(nil),
	}
	file_attribute_proto_msgTypes[70].OneofWrappers = []interface{}{
		(*TunnelEncapSubTLVSRSegmentList_Segment_A)(nil),
		(*TunnelEncapSubTLVSRSegmentList_Segment_B)(nil),
	}
	file_attribute_proto_msgTypes[71].OneofWrappers = []interface{}{
		(*TunnelEncapTLV_TLV_Unknown)(nil),
		(*TunnelEncapTLV_TLV_Encapsulation)(nil),
		(*TunnelEncapTLV_TLV_Protocol)(nil),
		(*TunnelEncapTLV_TLV_Color)(nil),
		(*TunnelEncapTLV_TLV_EgressEndpoint)(nil),
		(*TunnelEncapTLV_TLV_UdpDestPort)(nil),
		(*TunnelEncapTLV_TLV_SrPreference)(nil),
		(*TunnelEncapTLV_TLV_SrPriority)(nil),
		(*TunnelEncapTLV_TLV_SrCandidatePathName)(nil),
		(*TunnelEncapTLV_TLV_SrEnlp)(nil),
		(*TunnelEncapTLV_TLV_SrBindingSid)(nil),
		(*TunnelEncapTLV_TLV_SrSegmentList)(nil),
	}
	file_attribute_proto_msgTypes[72].OneofWrappers = []interface{}{
		(*IP6ExtendedCommunitiesAttribute_Community_Ipv6AddressSpecific)(nil),
		(*IP6ExtendedCommunitiesAttribute_Community_RedirectIpv6AddressSpecific)(nil),
	}
	file_attribute_proto_msgTypes[73].OneofWrappers = []interface{}{
		(*AigpAttribute_TLV_Unknown)(nil),
		(*AigpAttribute_TLV_IgpMetric)(nil),
	}
	file_attribute_proto_msgTypes[77].OneofWrappers = []interface{}{
		(*PrefixSID_TLV_L3Service)(nil),
		(*PrefixSID_TLV_L2Service)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_attribute_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   78,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_attribute_proto_goTypes,
		DependencyIndexes: file_attribute_proto_depIdxs,
		EnumInfos:         file_attribute_proto_enumTypes,
		MessageInfos:      file_attribute_proto_msgTypes,
	}.Build()
	File_attribute_proto = out.File
	file_attribute_proto_rawDesc = nil
	file_attribute_proto_goTypes = nil
	file_attribute_proto_depIdxs = nil
}
