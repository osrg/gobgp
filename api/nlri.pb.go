// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v5.29.2
// source: nlri.proto

package apipb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Based om RFC 7752, Table 1.
type LsNLRIType int32

const (
	LsNLRIType_LS_NLRI_UNKNOWN   LsNLRIType = 0
	LsNLRIType_LS_NLRI_NODE      LsNLRIType = 1
	LsNLRIType_LS_NLRI_LINK      LsNLRIType = 2
	LsNLRIType_LS_NLRI_PREFIX_V4 LsNLRIType = 3
	LsNLRIType_LS_NLRI_PREFIX_V6 LsNLRIType = 4
)

// Enum value maps for LsNLRIType.
var (
	LsNLRIType_name = map[int32]string{
		0: "LS_NLRI_UNKNOWN",
		1: "LS_NLRI_NODE",
		2: "LS_NLRI_LINK",
		3: "LS_NLRI_PREFIX_V4",
		4: "LS_NLRI_PREFIX_V6",
	}
	LsNLRIType_value = map[string]int32{
		"LS_NLRI_UNKNOWN":   0,
		"LS_NLRI_NODE":      1,
		"LS_NLRI_LINK":      2,
		"LS_NLRI_PREFIX_V4": 3,
		"LS_NLRI_PREFIX_V6": 4,
	}
)

func (x LsNLRIType) Enum() *LsNLRIType {
	p := new(LsNLRIType)
	*p = x
	return p
}

func (x LsNLRIType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LsNLRIType) Descriptor() protoreflect.EnumDescriptor {
	return file_nlri_proto_enumTypes[0].Descriptor()
}

func (LsNLRIType) Type() protoreflect.EnumType {
	return &file_nlri_proto_enumTypes[0]
}

func (x LsNLRIType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LsNLRIType.Descriptor instead.
func (LsNLRIType) EnumDescriptor() ([]byte, []int) {
	return file_nlri_proto_rawDescGZIP(), []int{0}
}

type LsProtocolID int32

const (
	LsProtocolID_LS_PROTOCOL_UNKNOWN LsProtocolID = 0
	LsProtocolID_LS_PROTOCOL_ISIS_L1 LsProtocolID = 1
	LsProtocolID_LS_PROTOCOL_ISIS_L2 LsProtocolID = 2
	LsProtocolID_LS_PROTOCOL_OSPF_V2 LsProtocolID = 3
	LsProtocolID_LS_PROTOCOL_DIRECT  LsProtocolID = 4
	LsProtocolID_LS_PROTOCOL_STATIC  LsProtocolID = 5
	LsProtocolID_LS_PROTOCOL_OSPF_V3 LsProtocolID = 6
)

// Enum value maps for LsProtocolID.
var (
	LsProtocolID_name = map[int32]string{
		0: "LS_PROTOCOL_UNKNOWN",
		1: "LS_PROTOCOL_ISIS_L1",
		2: "LS_PROTOCOL_ISIS_L2",
		3: "LS_PROTOCOL_OSPF_V2",
		4: "LS_PROTOCOL_DIRECT",
		5: "LS_PROTOCOL_STATIC",
		6: "LS_PROTOCOL_OSPF_V3",
	}
	LsProtocolID_value = map[string]int32{
		"LS_PROTOCOL_UNKNOWN": 0,
		"LS_PROTOCOL_ISIS_L1": 1,
		"LS_PROTOCOL_ISIS_L2": 2,
		"LS_PROTOCOL_OSPF_V2": 3,
		"LS_PROTOCOL_DIRECT":  4,
		"LS_PROTOCOL_STATIC":  5,
		"LS_PROTOCOL_OSPF_V3": 6,
	}
)

func (x LsProtocolID) Enum() *LsProtocolID {
	p := new(LsProtocolID)
	*p = x
	return p
}

func (x LsProtocolID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LsProtocolID) Descriptor() protoreflect.EnumDescriptor {
	return file_nlri_proto_enumTypes[1].Descriptor()
}

func (LsProtocolID) Type() protoreflect.EnumType {
	return &file_nlri_proto_enumTypes[1]
}

func (x LsProtocolID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LsProtocolID.Descriptor instead.
func (LsProtocolID) EnumDescriptor() ([]byte, []int) {
	return file_nlri_proto_rawDescGZIP(), []int{1}
}

type LsOspfRouteType int32

const (
	LsOspfRouteType_LS_OSPF_ROUTE_TYPE_UNKNOWN    LsOspfRouteType = 0
	LsOspfRouteType_LS_OSPF_ROUTE_TYPE_INTRA_AREA LsOspfRouteType = 1
	LsOspfRouteType_LS_OSPF_ROUTE_TYPE_INTER_AREA LsOspfRouteType = 2
	LsOspfRouteType_LS_OSPF_ROUTE_TYPE_EXTERNAL1  LsOspfRouteType = 3
	LsOspfRouteType_LS_OSPF_ROUTE_TYPE_EXTERNAL2  LsOspfRouteType = 4
	LsOspfRouteType_LS_OSPF_ROUTE_TYPE_NSSA1      LsOspfRouteType = 5
	LsOspfRouteType_LS_OSPF_ROUTE_TYPE_NSSA2      LsOspfRouteType = 6
)

// Enum value maps for LsOspfRouteType.
var (
	LsOspfRouteType_name = map[int32]string{
		0: "LS_OSPF_ROUTE_TYPE_UNKNOWN",
		1: "LS_OSPF_ROUTE_TYPE_INTRA_AREA",
		2: "LS_OSPF_ROUTE_TYPE_INTER_AREA",
		3: "LS_OSPF_ROUTE_TYPE_EXTERNAL1",
		4: "LS_OSPF_ROUTE_TYPE_EXTERNAL2",
		5: "LS_OSPF_ROUTE_TYPE_NSSA1",
		6: "LS_OSPF_ROUTE_TYPE_NSSA2",
	}
	LsOspfRouteType_value = map[string]int32{
		"LS_OSPF_ROUTE_TYPE_UNKNOWN":    0,
		"LS_OSPF_ROUTE_TYPE_INTRA_AREA": 1,
		"LS_OSPF_ROUTE_TYPE_INTER_AREA": 2,
		"LS_OSPF_ROUTE_TYPE_EXTERNAL1":  3,
		"LS_OSPF_ROUTE_TYPE_EXTERNAL2":  4,
		"LS_OSPF_ROUTE_TYPE_NSSA1":      5,
		"LS_OSPF_ROUTE_TYPE_NSSA2":      6,
	}
)

func (x LsOspfRouteType) Enum() *LsOspfRouteType {
	p := new(LsOspfRouteType)
	*p = x
	return p
}

func (x LsOspfRouteType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LsOspfRouteType) Descriptor() protoreflect.EnumDescriptor {
	return file_nlri_proto_enumTypes[2].Descriptor()
}

func (LsOspfRouteType) Type() protoreflect.EnumType {
	return &file_nlri_proto_enumTypes[2]
}

func (x LsOspfRouteType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LsOspfRouteType.Descriptor instead.
func (LsOspfRouteType) EnumDescriptor() ([]byte, []int) {
	return file_nlri_proto_rawDescGZIP(), []int{2}
}

type NLRI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Nlri:
	//
	//	*NLRI_Prefix
	//	*NLRI_LabeledPrefix
	//	*NLRI_Encapsulation
	//	*NLRI_Vpls
	//	*NLRI_EvpnEthernetAd
	//	*NLRI_EvpnMacadv
	//	*NLRI_EvpnMulticast
	//	*NLRI_EvpnEthernetSegment
	//	*NLRI_EvpnIpPrefix
	//	*NLRI_EvpnIPmsi
	//	*NLRI_LabeledVpnIpPrefix
	//	*NLRI_RouteTargetMembership
	//	*NLRI_FlowSpec
	//	*NLRI_VpnFlowSpec
	//	*NLRI_Opaque
	//	*NLRI_LsAddrPrefix
	//	*NLRI_SrPolicy
	//	*NLRI_MupInterworkSegmentDiscovery
	//	*NLRI_MupDirectSegmentDiscovery
	//	*NLRI_MupType_1SessionTransformed
	//	*NLRI_MupType_2SessionTransformed
	Nlri isNLRI_Nlri `protobuf_oneof:"nlri"`
}

func (x *NLRI) Reset() {
	*x = NLRI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlri_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NLRI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NLRI) ProtoMessage() {}

func (x *NLRI) ProtoReflect() protoreflect.Message {
	mi := &file_nlri_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NLRI.ProtoReflect.Descriptor instead.
func (*NLRI) Descriptor() ([]byte, []int) {
	return file_nlri_proto_rawDescGZIP(), []int{0}
}

func (m *NLRI) GetNlri() isNLRI_Nlri {
	if m != nil {
		return m.Nlri
	}
	return nil
}

func (x *NLRI) GetPrefix() *IPAddressPrefix {
	if x, ok := x.GetNlri().(*NLRI_Prefix); ok {
		return x.Prefix
	}
	return nil
}

func (x *NLRI) GetLabeledPrefix() *LabeledIPAddressPrefix {
	if x, ok := x.GetNlri().(*NLRI_LabeledPrefix); ok {
		return x.LabeledPrefix
	}
	return nil
}

func (x *NLRI) GetEncapsulation() *EncapsulationNLRI {
	if x, ok := x.GetNlri().(*NLRI_Encapsulation); ok {
		return x.Encapsulation
	}
	return nil
}

func (x *NLRI) GetVpls() *VPLSNLRI {
	if x, ok := x.GetNlri().(*NLRI_Vpls); ok {
		return x.Vpls
	}
	return nil
}

func (x *NLRI) GetEvpnEthernetAd() *EVPNEthernetAutoDiscoveryRoute {
	if x, ok := x.GetNlri().(*NLRI_EvpnEthernetAd); ok {
		return x.EvpnEthernetAd
	}
	return nil
}

func (x *NLRI) GetEvpnMacadv() *EVPNMACIPAdvertisementRoute {
	if x, ok := x.GetNlri().(*NLRI_EvpnMacadv); ok {
		return x.EvpnMacadv
	}
	return nil
}

func (x *NLRI) GetEvpnMulticast() *EVPNInclusiveMulticastEthernetTagRoute {
	if x, ok := x.GetNlri().(*NLRI_EvpnMulticast); ok {
		return x.EvpnMulticast
	}
	return nil
}

func (x *NLRI) GetEvpnEthernetSegment() *EVPNEthernetSegmentRoute {
	if x, ok := x.GetNlri().(*NLRI_EvpnEthernetSegment); ok {
		return x.EvpnEthernetSegment
	}
	return nil
}

func (x *NLRI) GetEvpnIpPrefix() *EVPNIPPrefixRoute {
	if x, ok := x.GetNlri().(*NLRI_EvpnIpPrefix); ok {
		return x.EvpnIpPrefix
	}
	return nil
}

func (x *NLRI) GetEvpnIPmsi() *EVPNIPMSIRoute {
	if x, ok := x.GetNlri().(*NLRI_EvpnIPmsi); ok {
		return x.EvpnIPmsi
	}
	return nil
}

func (x *NLRI) GetLabeledVpnIpPrefix() *LabeledVPNIPAddressPrefix {
	if x, ok := x.GetNlri().(*NLRI_LabeledVpnIpPrefix); ok {
		return x.LabeledVpnIpPrefix
	}
	return nil
}

func (x *NLRI) GetRouteTargetMembership() *RouteTargetMembershipNLRI {
	if x, ok := x.GetNlri().(*NLRI_RouteTargetMembership); ok {
		return x.RouteTargetMembership
	}
	return nil
}

func (x *NLRI) GetFlowSpec() *FlowSpecNLRI {
	if x, ok := x.GetNlri().(*NLRI_FlowSpec); ok {
		return x.FlowSpec
	}
	return nil
}

func (x *NLRI) GetVpnFlowSpec() *VPNFlowSpecNLRI {
	if x, ok := x.GetNlri().(*NLRI_VpnFlowSpec); ok {
		return x.VpnFlowSpec
	}
	return nil
}

func (x *NLRI) GetOpaque() *OpaqueNLRI {
	if x, ok := x.GetNlri().(*NLRI_Opaque); ok {
		return x.Opaque
	}
	return nil
}

func (x *NLRI) GetLsAddrPrefix() *LsAddrPrefix {
	if x, ok := x.GetNlri().(*NLRI_LsAddrPrefix); ok {
		return x.LsAddrPrefix
	}
	return nil
}

func (x *NLRI) GetSrPolicy() *SRPolicyNLRI {
	if x, ok := x.GetNlri().(*NLRI_SrPolicy); ok {
		return x.SrPolicy
	}
	return nil
}

func (x *NLRI) GetMupInterworkSegmentDiscovery() *MUPInterworkSegmentDiscoveryRoute {
	if x, ok := x.GetNlri().(*NLRI_MupInterworkSegmentDiscovery); ok {
		return x.MupInterworkSegmentDiscovery
	}
	return nil
}

func (x *NLRI) GetMupDirectSegmentDiscovery() *MUPDirectSegmentDiscoveryRoute {
	if x, ok := x.GetNlri().(*NLRI_MupDirectSegmentDiscovery); ok {
		return x.MupDirectSegmentDiscovery
	}
	return nil
}

func (x *NLRI) GetMupType_1SessionTransformed() *MUPType1SessionTransformedRoute {
	if x, ok := x.GetNlri().(*NLRI_MupType_1SessionTransformed); ok {
		return x.MupType_1SessionTransformed
	}
	return nil
}

func (x *NLRI) GetMupType_2SessionTransformed() *MUPType2SessionTransformedRoute {
	if x, ok := x.GetNlri().(*NLRI_MupType_2SessionTransformed); ok {
		return x.MupType_2SessionTransformed
	}
	return nil
}

type isNLRI_Nlri interface {
	isNLRI_Nlri()
}

type NLRI_Prefix struct {
	Prefix *IPAddressPrefix `protobuf:"bytes,1,opt,name=prefix,proto3,oneof"`
}

type NLRI_LabeledPrefix struct {
	LabeledPrefix *LabeledIPAddressPrefix `protobuf:"bytes,2,opt,name=labeled_prefix,json=labeledPrefix,proto3,oneof"`
}

type NLRI_Encapsulation struct {
	Encapsulation *EncapsulationNLRI `protobuf:"bytes,3,opt,name=encapsulation,proto3,oneof"`
}

type NLRI_Vpls struct {
	Vpls *VPLSNLRI `protobuf:"bytes,4,opt,name=vpls,proto3,oneof"`
}

type NLRI_EvpnEthernetAd struct {
	EvpnEthernetAd *EVPNEthernetAutoDiscoveryRoute `protobuf:"bytes,5,opt,name=evpn_ethernet_ad,json=evpnEthernetAd,proto3,oneof"`
}

type NLRI_EvpnMacadv struct {
	EvpnMacadv *EVPNMACIPAdvertisementRoute `protobuf:"bytes,6,opt,name=evpn_macadv,json=evpnMacadv,proto3,oneof"`
}

type NLRI_EvpnMulticast struct {
	EvpnMulticast *EVPNInclusiveMulticastEthernetTagRoute `protobuf:"bytes,7,opt,name=evpn_multicast,json=evpnMulticast,proto3,oneof"`
}

type NLRI_EvpnEthernetSegment struct {
	EvpnEthernetSegment *EVPNEthernetSegmentRoute `protobuf:"bytes,8,opt,name=evpn_ethernet_segment,json=evpnEthernetSegment,proto3,oneof"`
}

type NLRI_EvpnIpPrefix struct {
	EvpnIpPrefix *EVPNIPPrefixRoute `protobuf:"bytes,9,opt,name=evpn_ip_prefix,json=evpnIpPrefix,proto3,oneof"`
}

type NLRI_EvpnIPmsi struct {
	EvpnIPmsi *EVPNIPMSIRoute `protobuf:"bytes,10,opt,name=evpn_i_pmsi,json=evpnIPmsi,proto3,oneof"`
}

type NLRI_LabeledVpnIpPrefix struct {
	LabeledVpnIpPrefix *LabeledVPNIPAddressPrefix `protobuf:"bytes,11,opt,name=labeled_vpn_ip_prefix,json=labeledVpnIpPrefix,proto3,oneof"`
}

type NLRI_RouteTargetMembership struct {
	RouteTargetMembership *RouteTargetMembershipNLRI `protobuf:"bytes,12,opt,name=route_target_membership,json=routeTargetMembership,proto3,oneof"`
}

type NLRI_FlowSpec struct {
	FlowSpec *FlowSpecNLRI `protobuf:"bytes,13,opt,name=flow_spec,json=flowSpec,proto3,oneof"`
}

type NLRI_VpnFlowSpec struct {
	VpnFlowSpec *VPNFlowSpecNLRI `protobuf:"bytes,14,opt,name=vpn_flow_spec,json=vpnFlowSpec,proto3,oneof"`
}

type NLRI_Opaque struct {
	Opaque *OpaqueNLRI `protobuf:"bytes,15,opt,name=opaque,proto3,oneof"`
}

type NLRI_LsAddrPrefix struct {
	LsAddrPrefix *LsAddrPrefix `protobuf:"bytes,16,opt,name=ls_addr_prefix,json=lsAddrPrefix,proto3,oneof"`
}

type NLRI_SrPolicy struct {
	SrPolicy *SRPolicyNLRI `protobuf:"bytes,17,opt,name=sr_policy,json=srPolicy,proto3,oneof"`
}

type NLRI_MupInterworkSegmentDiscovery struct {
	MupInterworkSegmentDiscovery *MUPInterworkSegmentDiscoveryRoute `protobuf:"bytes,18,opt,name=mup_interwork_segment_discovery,json=mupInterworkSegmentDiscovery,proto3,oneof"`
}

type NLRI_MupDirectSegmentDiscovery struct {
	MupDirectSegmentDiscovery *MUPDirectSegmentDiscoveryRoute `protobuf:"bytes,19,opt,name=mup_direct_segment_discovery,json=mupDirectSegmentDiscovery,proto3,oneof"`
}

type NLRI_MupType_1SessionTransformed struct {
	MupType_1SessionTransformed *MUPType1SessionTransformedRoute `protobuf:"bytes,20,opt,name=mup_type_1_session_transformed,json=mupType1SessionTransformed,proto3,oneof"`
}

type NLRI_MupType_2SessionTransformed struct {
	MupType_2SessionTransformed *MUPType2SessionTransformedRoute `protobuf:"bytes,21,opt,name=mup_type_2_session_transformed,json=mupType2SessionTransformed,proto3,oneof"`
}

func (*NLRI_Prefix) isNLRI_Nlri() {}

func (*NLRI_LabeledPrefix) isNLRI_Nlri() {}

func (*NLRI_Encapsulation) isNLRI_Nlri() {}

func (*NLRI_Vpls) isNLRI_Nlri() {}

func (*NLRI_EvpnEthernetAd) isNLRI_Nlri() {}

func (*NLRI_EvpnMacadv) isNLRI_Nlri() {}

func (*NLRI_EvpnMulticast) isNLRI_Nlri() {}

func (*NLRI_EvpnEthernetSegment) isNLRI_Nlri() {}

func (*NLRI_EvpnIpPrefix) isNLRI_Nlri() {}

func (*NLRI_EvpnIPmsi) isNLRI_Nlri() {}

func (*NLRI_LabeledVpnIpPrefix) isNLRI_Nlri() {}

func (*NLRI_RouteTargetMembership) isNLRI_Nlri() {}

func (*NLRI_FlowSpec) isNLRI_Nlri() {}

func (*NLRI_VpnFlowSpec) isNLRI_Nlri() {}

func (*NLRI_Opaque) isNLRI_Nlri() {}

func (*NLRI_LsAddrPrefix) isNLRI_Nlri() {}

func (*NLRI_SrPolicy) isNLRI_Nlri() {}

func (*NLRI_MupInterworkSegmentDiscovery) isNLRI_Nlri() {}

func (*NLRI_MupDirectSegmentDiscovery) isNLRI_Nlri() {}

func (*NLRI_MupType_1SessionTransformed) isNLRI_Nlri() {}

func (*NLRI_MupType_2SessionTransformed) isNLRI_Nlri() {}

// IPAddressPrefix represents the NLRI for:
// - AFI=1, SAFI=1
// - AFI=2, SAFI=1
type IPAddressPrefix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefixLen uint32 `protobuf:"varint,1,opt,name=prefix_len,json=prefixLen,proto3" json:"prefix_len,omitempty"`
	Prefix    string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *IPAddressPrefix) Reset() {
	*x = IPAddressPrefix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlri_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPAddressPrefix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPAddressPrefix) ProtoMessage() {}

func (x *IPAddressPrefix) ProtoReflect() protoreflect.Message {
	mi := &file_nlri_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPAddressPrefix.ProtoReflect.Descriptor instead.
func (*IPAddressPrefix) Descriptor() ([]byte, []int) {
	return file_nlri_proto_rawDescGZIP(), []int{1}
}

func (x *IPAddressPrefix) GetPrefixLen() uint32 {
	if x != nil {
		return x.PrefixLen
	}
	return 0
}

func (x *IPAddressPrefix) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

// LabeledIPAddressPrefix represents the NLRI for:
// - AFI=1, SAFI=4
// - AFI=2, SAFI=4
type LabeledIPAddressPrefix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels    []uint32 `protobuf:"varint,1,rep,packed,name=labels,proto3" json:"labels,omitempty"`
	PrefixLen uint32   `protobuf:"varint,2,opt,name=prefix_len,json=prefixLen,proto3" json:"prefix_len,omitempty"`
	Prefix    string   `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *LabeledIPAddressPrefix) Reset() {
	*x = LabeledIPAddressPrefix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlri_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabeledIPAddressPrefix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabeledIPAddressPrefix) ProtoMessage() {}

func (x *LabeledIPAddressPrefix) ProtoReflect() protoreflect.Message {
	mi := &file_nlri_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabeledIPAddressPrefix.ProtoReflect.Descriptor instead.
func (*LabeledIPAddressPrefix) Descriptor() ([]byte, []int) {
	return file_nlri_proto_rawDescGZIP(), []int{2}
}

func (x *LabeledIPAddressPrefix) GetLabels() []uint32 {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *LabeledIPAddressPrefix) GetPrefixLen() uint32 {
	if x != nil {
		return x.PrefixLen
	}
	return 0
}

func (x *LabeledIPAddressPrefix) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

// EncapsulationNLRI represents the NLRI for:
// - AFI=1, SAFI=7
// - AFI=2, SAFI=7
type EncapsulationNLRI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *EncapsulationNLRI) Reset() {
	*x = EncapsulationNLRI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlri_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncapsulationNLRI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncapsulationNLRI) ProtoMessage() {}

func (x *EncapsulationNLRI) ProtoReflect() protoreflect.Message {
	mi := &file_nlri_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncapsulationNLRI.ProtoReflect.Descriptor instead.
func (*EncapsulationNLRI) Descriptor() ([]byte, []int) {
	return file_nlri_proto_rawDescGZIP(), []int{3}
}

func (x *EncapsulationNLRI) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// VPLSNLRI represents the NLRI for:
// - AFI=25, SAFI=65
type VPLSNLRI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rd             *RouteDistinguisher `protobuf:"bytes,1,opt,name=rd,proto3" json:"rd,omitempty"`
	VeId           uint32              `protobuf:"varint,2,opt,name=ve_id,json=veId,proto3" json:"ve_id,omitempty"`
	VeBlockOffset  uint32              `protobuf:"varint,3,opt,name=ve_block_offset,json=veBlockOffset,proto3" json:"ve_block_offset,omitempty"`
	VeBlockSize    uint32              `protobuf:"varint,4,opt,name=ve_block_size,json=veBlockSize,proto3" json:"ve_block_size,omitempty"`
	LabelBlockBase uint32              `protobuf:"varint,5,opt,name=label_block_base,json=labelBlockBase,proto3" json:"label_block_base,omitempty"`
}

func (x *VPLSNLRI) Reset() {
	*x = VPLSNLRI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlri_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VPLSNLRI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VPLSNLRI) ProtoMessage() {}

func (x *VPLSNLRI) ProtoReflect() protoreflect.Message {
	mi := &file_nlri_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VPLSNLRI.ProtoReflect.Descriptor instead.
func (*VPLSNLRI) Descriptor() ([]byte, []int) {
	return file_nlri_proto_rawDescGZIP(), []int{4}
}

func (x *VPLSNLRI) GetRd() *RouteDistinguisher {
	if x != nil {
		return x.Rd
	}
	return nil
}

func (x *VPLSNLRI) GetVeId() uint32 {
	if x != nil {
		return x.VeId
	}
	return 0
}

func (x *VPLSNLRI) GetVeBlockOffset() uint32 {
	if x != nil {
		return x.VeBlockOffset
	}
	return 0
}

func (x *VPLSNLRI) GetVeBlockSize() uint32 {
	if x != nil {
		return x.VeBlockSize
	}
	return 0
}

func (x *VPLSNLRI) GetLabelBlockBase() uint32 {
	if x != nil {
		return x.LabelBlockBase
	}
	return 0
}

type EthernetSegmentIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *EthernetSegmentIdentifier) Reset() {
	*x = EthernetSegmentIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlri_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthernetSegmentIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthernetSegmentIdentifier) ProtoMessage() {}

func (x *EthernetSegmentIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_nlri_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthernetSegmentIdentifier.ProtoReflect.Descriptor instead.
func (*EthernetSegmentIdentifier) Descriptor() ([]byte, []int) {
	return file_nlri_proto_rawDescGZIP(), []int{5}
}

func (x *EthernetSegmentIdentifier) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *EthernetSegmentIdentifier) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// EVPNEthernetAutoDiscoveryRoute represents the NLRI for:
// - AFI=25, SAFI=70, RouteType=1
type EVPNEthernetAutoDiscoveryRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rd          *RouteDistinguisher        `protobuf:"bytes,1,opt,name=rd,proto3" json:"rd,omitempty"`
	Esi         *EthernetSegmentIdentifier `protobuf:"bytes,2,opt,name=esi,proto3" json:"esi,omitempty"`
	EthernetTag uint32                     `protobuf:"varint,3,opt,name=ethernet_tag,json=ethernetTag,proto3" json:"ethernet_tag,omitempty"`
	Label       uint32                     `protobuf:"varint,4,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *EVPNEthernetAutoDiscoveryRoute) Reset() {
	*x = EVPNEthernetAutoDiscoveryRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlri_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EVPNEthernetAutoDiscoveryRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EVPNEthernetAutoDiscoveryRoute) ProtoMessage() {}

func (x *EVPNEthernetAutoDiscoveryRoute) ProtoReflect() protoreflect.Message {
	mi := &file_nlri_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EVPNEthernetAutoDiscoveryRoute.ProtoReflect.Descriptor instead.
func (*EVPNEthernetAutoDiscoveryRoute) Descriptor() ([]byte, []int) {
	return file_nlri_proto_rawDescGZIP(), []int{6}
}

func (x *EVPNEthernetAutoDiscoveryRoute) GetRd() *RouteDistinguisher {
	if x != nil {
		return x.Rd
	}
	return nil
}

func (x *EVPNEthernetAutoDiscoveryRoute) GetEsi() *EthernetSegmentIdentifier {
	if x != nil {
		return x.Esi
	}
	return nil
}

func (x *EVPNEthernetAutoDiscoveryRoute) GetEthernetTag() uint32 {
	if x != nil {
		return x.EthernetTag
	}
	return 0
}

func (x *EVPNEthernetAutoDiscoveryRoute) GetLabel() uint32 {
	if x != nil {
		return x.Label
	}
	return 0
}

// EVPNMACIPAdvertisementRoute represents the NLRI for:
// - AFI=25, SAFI=70, RouteType=2
type EVPNMACIPAdvertisementRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rd          *RouteDistinguisher        `protobuf:"bytes,1,opt,name=rd,proto3" json:"rd,omitempty"`
	Esi         *EthernetSegmentIdentifier `protobuf:"bytes,2,opt,name=esi,proto3" json:"esi,omitempty"`
	EthernetTag uint32                     `protobuf:"varint,3,opt,name=ethernet_tag,json=ethernetTag,proto3" json:"ethernet_tag,omitempty"`
	MacAddress  string                     `protobuf:"bytes,4,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	IpAddress   string                     `protobuf:"bytes,5,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	Labels      []uint32                   `protobuf:"varint,6,rep,packed,name=labels,proto3" json:"labels,omitempty"`
}

func (x *EVPNMACIPAdvertisementRoute) Reset() {
	*x = EVPNMACIPAdvertisementRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlri_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EVPNMACIPAdvertisementRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EVPNMACIPAdvertisementRoute) ProtoMessage() {}

func (x *EVPNMACIPAdvertisementRoute) ProtoReflect() protoreflect.Message {
	mi := &file_nlri_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EVPNMACIPAdvertisementRoute.ProtoReflect.Descriptor instead.
func (*EVPNMACIPAdvertisementRoute) Descriptor() ([]byte, []int) {
	return file_nlri_proto_rawDescGZIP(), []int{7}
}

func (x *EVPNMACIPAdvertisementRoute) GetRd() *RouteDistinguisher {
	if x != nil {
		return x.Rd
	}
	return nil
}

func (x *EVPNMACIPAdvertisementRoute) GetEsi() *EthernetSegmentIdentifier {
	if x != nil {
		return x.Esi
	}
	return nil
}

func (x *EVPNMACIPAdvertisementRoute) GetEthernetTag() uint32 {
	if x != nil {
		return x.EthernetTag
	}
	return 0
}

func (x *EVPNMACIPAdvertisementRoute) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *EVPNMACIPAdvertisementRoute) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *EVPNMACIPAdvertisementRoute) GetLabels() []uint32 {
	if x != nil {
		return x.Labels
	}
	return nil
}

// EVPNInclusiveMulticastEthernetTagRoute represents the NLRI for:
// - AFI=25, SAFI=70, RouteType=3
type EVPNInclusiveMulticastEthernetTagRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rd          *RouteDistinguisher `protobuf:"bytes,1,opt,name=rd,proto3" json:"rd,omitempty"`
	EthernetTag uint32              `protobuf:"varint,2,opt,name=ethernet_tag,json=ethernetTag,proto3" json:"ethernet_tag,omitempty"`
	IpAddress   string              `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
}

func (x *EVPNInclusiveMulticastEthernetTagRoute) Reset() {
	*x = EVPNInclusiveMulticastEthernetTagRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlri_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EVPNInclusiveMulticastEthernetTagRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EVPNInclusiveMulticastEthernetTagRoute) ProtoMessage() {}

func (x *EVPNInclusiveMulticastEthernetTagRoute) ProtoReflect() protoreflect.Message {
	mi := &file_nlri_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EVPNInclusiveMulticastEthernetTagRoute.ProtoReflect.Descriptor instead.
func (*EVPNInclusiveMulticastEthernetTagRoute) Descriptor() ([]byte, []int) {
	return file_nlri_proto_rawDescGZIP(), []int{8}
}

func (x *EVPNInclusiveMulticastEthernetTagRoute) GetRd() *RouteDistinguisher {
	if x != nil {
		return x.Rd
	}
	return nil
}

func (x *EVPNInclusiveMulticastEthernetTagRoute) GetEthernetTag() uint32 {
	if x != nil {
		return x.EthernetTag
	}
	return 0
}

func (x *EVPNInclusiveMulticastEthernetTagRoute) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

// EVPNEthernetSegmentRoute represents the NLRI for:
// - AFI=25, SAFI=70, RouteType=4
type EVPNEthernetSegmentRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rd        *RouteDistinguisher        `protobuf:"bytes,1,opt,name=rd,proto3" json:"rd,omitempty"`
	Esi       *EthernetSegmentIdentifier `protobuf:"bytes,2,opt,name=esi,proto3" json:"esi,omitempty"`
	IpAddress string                     `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
}

func (x *EVPNEthernetSegmentRoute) Reset() {
	*x = EVPNEthernetSegmentRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlri_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EVPNEthernetSegmentRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EVPNEthernetSegmentRoute) ProtoMessage() {}

func (x *EVPNEthernetSegmentRoute) ProtoReflect() protoreflect.Message {
	mi := &file_nlri_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EVPNEthernetSegmentRoute.ProtoReflect.Descriptor instead.
func (*EVPNEthernetSegmentRoute) Descriptor() ([]byte, []int) {
	return file_nlri_proto_rawDescGZIP(), []int{9}
}

func (x *EVPNEthernetSegmentRoute) GetRd() *RouteDistinguisher {
	if x != nil {
		return x.Rd
	}
	return nil
}

func (x *EVPNEthernetSegmentRoute) GetEsi() *EthernetSegmentIdentifier {
	if x != nil {
		return x.Esi
	}
	return nil
}

func (x *EVPNEthernetSegmentRoute) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

// EVPNIPPrefixRoute represents the NLRI for:
// - AFI=25, SAFI=70, RouteType=5
type EVPNIPPrefixRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rd          *RouteDistinguisher        `protobuf:"bytes,1,opt,name=rd,proto3" json:"rd,omitempty"`
	Esi         *EthernetSegmentIdentifier `protobuf:"bytes,2,opt,name=esi,proto3" json:"esi,omitempty"`
	EthernetTag uint32                     `protobuf:"varint,3,opt,name=ethernet_tag,json=ethernetTag,proto3" json:"ethernet_tag,omitempty"`
	IpPrefix    string                     `protobuf:"bytes,4,opt,name=ip_prefix,json=ipPrefix,proto3" json:"ip_prefix,omitempty"`
	IpPrefixLen uint32                     `protobuf:"varint,5,opt,name=ip_prefix_len,json=ipPrefixLen,proto3" json:"ip_prefix_len,omitempty"`
	GwAddress   string                     `protobuf:"bytes,6,opt,name=gw_address,json=gwAddress,proto3" json:"gw_address,omitempty"`
	Label       uint32                     `protobuf:"varint,7,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *EVPNIPPrefixRoute) Reset() {
	*x = EVPNIPPrefixRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlri_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EVPNIPPrefixRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EVPNIPPrefixRoute) ProtoMessage() {}

func (x *EVPNIPPrefixRoute) ProtoReflect() protoreflect.Message {
	mi := &file_nlri_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EVPNIPPrefixRoute.ProtoReflect.Descriptor instead.
func (*EVPNIPPrefixRoute) Descriptor() ([]byte, []int) {
	return file_nlri_proto_rawDescGZIP(), []int{10}
}

func (x *EVPNIPPrefixRoute) GetRd() *RouteDistinguisher {
	if x != nil {
		return x.Rd
	}
	return nil
}

func (x *EVPNIPPrefixRoute) GetEsi() *EthernetSegmentIdentifier {
	if x != nil {
		return x.Esi
	}
	return nil
}

func (x *EVPNIPPrefixRoute) GetEthernetTag() uint32 {
	if x != nil {
		return x.EthernetTag
	}
	return 0
}

func (x *EVPNIPPrefixRoute) GetIpPrefix() string {
	if x != nil {
		return x.IpPrefix
	}
	return ""
}

func (x *EVPNIPPrefixRoute) GetIpPrefixLen() uint32 {
	if x != nil {
		return x.IpPrefixLen
	}
	return 0
}

func (x *EVPNIPPrefixRoute) GetGwAddress() string {
	if x != nil {
		return x.GwAddress
	}
	return ""
}

func (x *EVPNIPPrefixRoute) GetLabel() uint32 {
	if x != nil {
		return x.Label
	}
	return 0
}

// EVPNIPMSIRoute represents the NLRI for:
// - AFI=25, SAFI=70, RouteType=9
type EVPNIPMSIRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rd          *RouteDistinguisher `protobuf:"bytes,1,opt,name=rd,proto3" json:"rd,omitempty"`
	EthernetTag uint32              `protobuf:"varint,2,opt,name=ethernet_tag,json=ethernetTag,proto3" json:"ethernet_tag,omitempty"`
	Rt          *RouteTarget        `protobuf:"bytes,3,opt,name=rt,proto3" json:"rt,omitempty"`
}

func (x *EVPNIPMSIRoute) Reset() {
	*x = EVPNIPMSIRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlri_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EVPNIPMSIRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EVPNIPMSIRoute) ProtoMessage() {}

func (x *EVPNIPMSIRoute) ProtoReflect() protoreflect.Message {
	mi := &file_nlri_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EVPNIPMSIRoute.ProtoReflect.Descriptor instead.
func (*EVPNIPMSIRoute) Descriptor() ([]byte, []int) {
	return file_nlri_proto_rawDescGZIP(), []int{11}
}

func (x *EVPNIPMSIRoute) GetRd() *RouteDistinguisher {
	if x != nil {
		return x.Rd
	}
	return nil
}

func (x *EVPNIPMSIRoute) GetEthernetTag() uint32 {
	if x != nil {
		return x.EthernetTag
	}
	return 0
}

func (x *EVPNIPMSIRoute) GetRt() *RouteTarget {
	if x != nil {
		return x.Rt
	}
	return nil
}

// SRPolicyNLRI represents the NLRI for:
// - AFI=1, SAFI=73
// - AFI=2, SAFI=73
type SRPolicyNLRI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// length field carries the length of NLRI portion expressed in bits
	Length uint32 `protobuf:"varint,1,opt,name=length,proto3" json:"length,omitempty"`
	// distinguisher field carries 4-octet value uniquely identifying the policy
	// in the context of <color, endpoint> tuple.
	Distinguisher uint32 `protobuf:"varint,2,opt,name=distinguisher,proto3" json:"distinguisher,omitempty"`
	// color field carries 4-octet value identifying (with the endpoint) the
	// policy.  The color is used to match the color of the destination
	// prefixes to steer traffic into the SR Policy
	Color uint32 `protobuf:"varint,3,opt,name=color,proto3" json:"color,omitempty"`
	// endpoint field identifies the endpoint of a policy.  The Endpoint may
	// represent a single node or a set of nodes (e.g., an anycast
	// address).  The Endpoint is an IPv4 (4-octet) address or an IPv6
	// (16-octet) address according to the AFI of the NLRI.
	Endpoint []byte `protobuf:"bytes,4,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
}

func (x *SRPolicyNLRI) Reset() {
	*x = SRPolicyNLRI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlri_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRPolicyNLRI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRPolicyNLRI) ProtoMessage() {}

func (x *SRPolicyNLRI) ProtoReflect() protoreflect.Message {
	mi := &file_nlri_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRPolicyNLRI.ProtoReflect.Descriptor instead.
func (*SRPolicyNLRI) Descriptor() ([]byte, []int) {
	return file_nlri_proto_rawDescGZIP(), []int{12}
}

func (x *SRPolicyNLRI) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *SRPolicyNLRI) GetDistinguisher() uint32 {
	if x != nil {
		return x.Distinguisher
	}
	return 0
}

func (x *SRPolicyNLRI) GetColor() uint32 {
	if x != nil {
		return x.Color
	}
	return 0
}

func (x *SRPolicyNLRI) GetEndpoint() []byte {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

// LabeledVPNIPAddressPrefix represents the NLRI for:
// - AFI=1, SAFI=128
// - AFI=2, SAFI=128
type LabeledVPNIPAddressPrefix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels    []uint32            `protobuf:"varint,1,rep,packed,name=labels,proto3" json:"labels,omitempty"`
	Rd        *RouteDistinguisher `protobuf:"bytes,2,opt,name=rd,proto3" json:"rd,omitempty"`
	PrefixLen uint32              `protobuf:"varint,3,opt,name=prefix_len,json=prefixLen,proto3" json:"prefix_len,omitempty"`
	Prefix    string              `protobuf:"bytes,4,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *LabeledVPNIPAddressPrefix) Reset() {
	*x = LabeledVPNIPAddressPrefix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlri_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabeledVPNIPAddressPrefix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabeledVPNIPAddressPrefix) ProtoMessage() {}

func (x *LabeledVPNIPAddressPrefix) ProtoReflect() protoreflect.Message {
	mi := &file_nlri_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabeledVPNIPAddressPrefix.ProtoReflect.Descriptor instead.
func (*LabeledVPNIPAddressPrefix) Descriptor() ([]byte, []int) {
	return file_nlri_proto_rawDescGZIP(), []int{13}
}

func (x *LabeledVPNIPAddressPrefix) GetLabels() []uint32 {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *LabeledVPNIPAddressPrefix) GetRd() *RouteDistinguisher {
	if x != nil {
		return x.Rd
	}
	return nil
}

func (x *LabeledVPNIPAddressPrefix) GetPrefixLen() uint32 {
	if x != nil {
		return x.PrefixLen
	}
	return 0
}

func (x *LabeledVPNIPAddressPrefix) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

// RouteTargetMembershipNLRI represents the NLRI for:
// - AFI=1, SAFI=132
type RouteTargetMembershipNLRI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asn uint32       `protobuf:"varint,1,opt,name=asn,proto3" json:"asn,omitempty"`
	Rt  *RouteTarget `protobuf:"bytes,2,opt,name=rt,proto3" json:"rt,omitempty"`
}

func (x *RouteTargetMembershipNLRI) Reset() {
	*x = RouteTargetMembershipNLRI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlri_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteTargetMembershipNLRI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteTargetMembershipNLRI) ProtoMessage() {}

func (x *RouteTargetMembershipNLRI) ProtoReflect() protoreflect.Message {
	mi := &file_nlri_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteTargetMembershipNLRI.ProtoReflect.Descriptor instead.
func (*RouteTargetMembershipNLRI) Descriptor() ([]byte, []int) {
	return file_nlri_proto_rawDescGZIP(), []int{14}
}

func (x *RouteTargetMembershipNLRI) GetAsn() uint32 {
	if x != nil {
		return x.Asn
	}
	return 0
}

func (x *RouteTargetMembershipNLRI) GetRt() *RouteTarget {
	if x != nil {
		return x.Rt
	}
	return nil
}

type FlowSpecIPPrefix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	PrefixLen uint32 `protobuf:"varint,2,opt,name=prefix_len,json=prefixLen,proto3" json:"prefix_len,omitempty"`
	Prefix    string `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// IPv6 only
	Offset uint32 `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *FlowSpecIPPrefix) Reset() {
	*x = FlowSpecIPPrefix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlri_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowSpecIPPrefix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowSpecIPPrefix) ProtoMessage() {}

func (x *FlowSpecIPPrefix) ProtoReflect() protoreflect.Message {
	mi := &file_nlri_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowSpecIPPrefix.ProtoReflect.Descriptor instead.
func (*FlowSpecIPPrefix) Descriptor() ([]byte, []int) {
	return file_nlri_proto_rawDescGZIP(), []int{15}
}

func (x *FlowSpecIPPrefix) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *FlowSpecIPPrefix) GetPrefixLen() uint32 {
	if x != nil {
		return x.PrefixLen
	}
	return 0
}

func (x *FlowSpecIPPrefix) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *FlowSpecIPPrefix) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type FlowSpecMAC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *FlowSpecMAC) Reset() {
	*x = FlowSpecMAC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlri_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowSpecMAC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowSpecMAC) ProtoMessage() {}

func (x *FlowSpecMAC) ProtoReflect() protoreflect.Message {
	mi := &file_nlri_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowSpecMAC.ProtoReflect.Descriptor instead.
func (*FlowSpecMAC) Descriptor() ([]byte, []int) {
	return file_nlri_proto_rawDescGZIP(), []int{16}
}

func (x *FlowSpecMAC) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *FlowSpecMAC) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type FlowSpecComponentItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operator for Numeric type, Operand for Bitmask type
	Op    uint32 `protobuf:"varint,1,opt,name=op,proto3" json:"op,omitempty"`
	Value uint64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *FlowSpecComponentItem) Reset() {
	*x = FlowSpecComponentItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlri_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowSpecComponentItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowSpecComponentItem) ProtoMessage() {}

func (x *FlowSpecComponentItem) ProtoReflect() protoreflect.Message {
	mi := &file_nlri_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowSpecComponentItem.ProtoReflect.Descriptor instead.
func (*FlowSpecComponentItem) Descriptor() ([]byte, []int) {
	return file_nlri_proto_rawDescGZIP(), []int{17}
}

func (x *FlowSpecComponentItem) GetOp() uint32 {
	if x != nil {
		return x.Op
	}
	return 0
}

func (x *FlowSpecComponentItem) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type FlowSpecComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  uint32                   `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Items []*FlowSpecComponentItem `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *FlowSpecComponent) Reset() {
	*x = FlowSpecComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlri_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowSpecComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowSpecComponent) ProtoMessage() {}

func (x *FlowSpecComponent) ProtoReflect() protoreflect.Message {
	mi := &file_nlri_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowSpecComponent.ProtoReflect.Descriptor instead.
func (*FlowSpecComponent) Descriptor() ([]byte, []int) {
	return file_nlri_proto_rawDescGZIP(), []int{18}
}

func (x *FlowSpecComponent) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *FlowSpecComponent) GetItems() []*FlowSpecComponentItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type FlowSpecRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Rule:
	//
	//	*FlowSpecRule_IpPrefix
	//	*FlowSpecRule_Mac
	//	*FlowSpecRule_Component
	Rule isFlowSpecRule_Rule `protobuf_oneof:"rule"`
}

func (x *FlowSpecRule) Reset() {
	*x = FlowSpecRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlri_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowSpecRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowSpecRule) ProtoMessage() {}

func (x *FlowSpecRule) ProtoReflect() protoreflect.Message {
	mi := &file_nlri_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowSpecRule.ProtoReflect.Descriptor instead.
func (*FlowSpecRule) Descriptor() ([]byte, []int) {
	return file_nlri_proto_rawDescGZIP(), []int{19}
}

func (m *FlowSpecRule) GetRule() isFlowSpecRule_Rule {
	if m != nil {
		return m.Rule
	}
	return nil
}

func (x *FlowSpecRule) GetIpPrefix() *FlowSpecIPPrefix {
	if x, ok := x.GetRule().(*FlowSpecRule_IpPrefix); ok {
		return x.IpPrefix
	}
	return nil
}

func (x *FlowSpecRule) GetMac() *FlowSpecMAC {
	if x, ok := x.GetRule().(*FlowSpecRule_Mac); ok {
		return x.Mac
	}
	return nil
}

func (x *FlowSpecRule) GetComponent() *FlowSpecComponent {
	if x, ok := x.GetRule().(*FlowSpecRule_Component); ok {
		return x.Component
	}
	return nil
}

type isFlowSpecRule_Rule interface {
	isFlowSpecRule_Rule()
}

type FlowSpecRule_IpPrefix struct {
	IpPrefix *FlowSpecIPPrefix `protobuf:"bytes,1,opt,name=ip_prefix,json=ipPrefix,proto3,oneof"`
}

type FlowSpecRule_Mac struct {
	Mac *FlowSpecMAC `protobuf:"bytes,2,opt,name=mac,proto3,oneof"`
}

type FlowSpecRule_Component struct {
	Component *FlowSpecComponent `protobuf:"bytes,3,opt,name=component,proto3,oneof"`
}

func (*FlowSpecRule_IpPrefix) isFlowSpecRule_Rule() {}

func (*FlowSpecRule_Mac) isFlowSpecRule_Rule() {}

func (*FlowSpecRule_Component) isFlowSpecRule_Rule() {}

// FlowSpecNLRI represents the NLRI for:
// - AFI=1, SAFI=133
// - AFI=2, SAFI=133
type FlowSpecNLRI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules []*FlowSpecRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *FlowSpecNLRI) Reset() {
	*x = FlowSpecNLRI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlri_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowSpecNLRI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowSpecNLRI) ProtoMessage() {}

func (x *FlowSpecNLRI) ProtoReflect() protoreflect.Message {
	mi := &file_nlri_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowSpecNLRI.ProtoReflect.Descriptor instead.
func (*FlowSpecNLRI) Descriptor() ([]byte, []int) {
	return file_nlri_proto_rawDescGZIP(), []int{20}
}

func (x *FlowSpecNLRI) GetRules() []*FlowSpecRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// VPNFlowSpecNLRI represents the NLRI for:
// - AFI=1, SAFI=134
// - AFI=2, SAFI=134
// - AFI=25, SAFI=134
type VPNFlowSpecNLRI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rd    *RouteDistinguisher `protobuf:"bytes,1,opt,name=rd,proto3" json:"rd,omitempty"`
	Rules []*FlowSpecRule     `protobuf:"bytes,2,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *VPNFlowSpecNLRI) Reset() {
	*x = VPNFlowSpecNLRI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlri_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VPNFlowSpecNLRI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VPNFlowSpecNLRI) ProtoMessage() {}

func (x *VPNFlowSpecNLRI) ProtoReflect() protoreflect.Message {
	mi := &file_nlri_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VPNFlowSpecNLRI.ProtoReflect.Descriptor instead.
func (*VPNFlowSpecNLRI) Descriptor() ([]byte, []int) {
	return file_nlri_proto_rawDescGZIP(), []int{21}
}

func (x *VPNFlowSpecNLRI) GetRd() *RouteDistinguisher {
	if x != nil {
		return x.Rd
	}
	return nil
}

func (x *VPNFlowSpecNLRI) GetRules() []*FlowSpecRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// OpaqueNLRI represents the NLRI for:
// - AFI=16397, SAFI=241
type OpaqueNLRI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *OpaqueNLRI) Reset() {
	*x = OpaqueNLRI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlri_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpaqueNLRI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpaqueNLRI) ProtoMessage() {}

func (x *OpaqueNLRI) ProtoReflect() protoreflect.Message {
	mi := &file_nlri_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpaqueNLRI.ProtoReflect.Descriptor instead.
func (*OpaqueNLRI) Descriptor() ([]byte, []int) {
	return file_nlri_proto_rawDescGZIP(), []int{22}
}

func (x *OpaqueNLRI) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *OpaqueNLRI) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type LsNodeDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asn                    uint32 `protobuf:"varint,1,opt,name=asn,proto3" json:"asn,omitempty"`
	BgpLsId                uint32 `protobuf:"varint,2,opt,name=bgp_ls_id,json=bgpLsId,proto3" json:"bgp_ls_id,omitempty"`
	OspfAreaId             uint32 `protobuf:"varint,3,opt,name=ospf_area_id,json=ospfAreaId,proto3" json:"ospf_area_id,omitempty"`
	Pseudonode             bool   `protobuf:"varint,4,opt,name=pseudonode,proto3" json:"pseudonode,omitempty"`
	IgpRouterId            string `protobuf:"bytes,5,opt,name=igp_router_id,json=igpRouterId,proto3" json:"igp_router_id,omitempty"`
	BgpRouterId            string `protobuf:"bytes,6,opt,name=bgp_router_id,json=bgpRouterId,proto3" json:"bgp_router_id,omitempty"`
	BgpConfederationMember uint32 `protobuf:"varint,7,opt,name=bgp_confederation_member,json=bgpConfederationMember,proto3" json:"bgp_confederation_member,omitempty"`
}

func (x *LsNodeDescriptor) Reset() {
	*x = LsNodeDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlri_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LsNodeDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LsNodeDescriptor) ProtoMessage() {}

func (x *LsNodeDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_nlri_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LsNodeDescriptor.ProtoReflect.Descriptor instead.
func (*LsNodeDescriptor) Descriptor() ([]byte, []int) {
	return file_nlri_proto_rawDescGZIP(), []int{23}
}

func (x *LsNodeDescriptor) GetAsn() uint32 {
	if x != nil {
		return x.Asn
	}
	return 0
}

func (x *LsNodeDescriptor) GetBgpLsId() uint32 {
	if x != nil {
		return x.BgpLsId
	}
	return 0
}

func (x *LsNodeDescriptor) GetOspfAreaId() uint32 {
	if x != nil {
		return x.OspfAreaId
	}
	return 0
}

func (x *LsNodeDescriptor) GetPseudonode() bool {
	if x != nil {
		return x.Pseudonode
	}
	return false
}

func (x *LsNodeDescriptor) GetIgpRouterId() string {
	if x != nil {
		return x.IgpRouterId
	}
	return ""
}

func (x *LsNodeDescriptor) GetBgpRouterId() string {
	if x != nil {
		return x.BgpRouterId
	}
	return ""
}

func (x *LsNodeDescriptor) GetBgpConfederationMember() uint32 {
	if x != nil {
		return x.BgpConfederationMember
	}
	return 0
}

type LsLinkDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkLocalId       uint32 `protobuf:"varint,1,opt,name=link_local_id,json=linkLocalId,proto3" json:"link_local_id,omitempty"`
	LinkRemoteId      uint32 `protobuf:"varint,2,opt,name=link_remote_id,json=linkRemoteId,proto3" json:"link_remote_id,omitempty"`
	InterfaceAddrIpv4 string `protobuf:"bytes,3,opt,name=interface_addr_ipv4,json=interfaceAddrIpv4,proto3" json:"interface_addr_ipv4,omitempty"`
	NeighborAddrIpv4  string `protobuf:"bytes,4,opt,name=neighbor_addr_ipv4,json=neighborAddrIpv4,proto3" json:"neighbor_addr_ipv4,omitempty"`
	InterfaceAddrIpv6 string `protobuf:"bytes,5,opt,name=interface_addr_ipv6,json=interfaceAddrIpv6,proto3" json:"interface_addr_ipv6,omitempty"`
	NeighborAddrIpv6  string `protobuf:"bytes,6,opt,name=neighbor_addr_ipv6,json=neighborAddrIpv6,proto3" json:"neighbor_addr_ipv6,omitempty"`
}

func (x *LsLinkDescriptor) Reset() {
	*x = LsLinkDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlri_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LsLinkDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LsLinkDescriptor) ProtoMessage() {}

func (x *LsLinkDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_nlri_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LsLinkDescriptor.ProtoReflect.Descriptor instead.
func (*LsLinkDescriptor) Descriptor() ([]byte, []int) {
	return file_nlri_proto_rawDescGZIP(), []int{24}
}

func (x *LsLinkDescriptor) GetLinkLocalId() uint32 {
	if x != nil {
		return x.LinkLocalId
	}
	return 0
}

func (x *LsLinkDescriptor) GetLinkRemoteId() uint32 {
	if x != nil {
		return x.LinkRemoteId
	}
	return 0
}

func (x *LsLinkDescriptor) GetInterfaceAddrIpv4() string {
	if x != nil {
		return x.InterfaceAddrIpv4
	}
	return ""
}

func (x *LsLinkDescriptor) GetNeighborAddrIpv4() string {
	if x != nil {
		return x.NeighborAddrIpv4
	}
	return ""
}

func (x *LsLinkDescriptor) GetInterfaceAddrIpv6() string {
	if x != nil {
		return x.InterfaceAddrIpv6
	}
	return ""
}

func (x *LsLinkDescriptor) GetNeighborAddrIpv6() string {
	if x != nil {
		return x.NeighborAddrIpv6
	}
	return ""
}

type LsPrefixDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpReachability []string        `protobuf:"bytes,1,rep,name=ip_reachability,json=ipReachability,proto3" json:"ip_reachability,omitempty"`
	OspfRouteType  LsOspfRouteType `protobuf:"varint,2,opt,name=ospf_route_type,json=ospfRouteType,proto3,enum=apipb.LsOspfRouteType" json:"ospf_route_type,omitempty"`
}

func (x *LsPrefixDescriptor) Reset() {
	*x = LsPrefixDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlri_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LsPrefixDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LsPrefixDescriptor) ProtoMessage() {}

func (x *LsPrefixDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_nlri_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LsPrefixDescriptor.ProtoReflect.Descriptor instead.
func (*LsPrefixDescriptor) Descriptor() ([]byte, []int) {
	return file_nlri_proto_rawDescGZIP(), []int{25}
}

func (x *LsPrefixDescriptor) GetIpReachability() []string {
	if x != nil {
		return x.IpReachability
	}
	return nil
}

func (x *LsPrefixDescriptor) GetOspfRouteType() LsOspfRouteType {
	if x != nil {
		return x.OspfRouteType
	}
	return LsOspfRouteType_LS_OSPF_ROUTE_TYPE_UNKNOWN
}

type LsNodeNLRI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalNode *LsNodeDescriptor `protobuf:"bytes,1,opt,name=local_node,json=localNode,proto3" json:"local_node,omitempty"`
}

func (x *LsNodeNLRI) Reset() {
	*x = LsNodeNLRI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlri_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LsNodeNLRI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LsNodeNLRI) ProtoMessage() {}

func (x *LsNodeNLRI) ProtoReflect() protoreflect.Message {
	mi := &file_nlri_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LsNodeNLRI.ProtoReflect.Descriptor instead.
func (*LsNodeNLRI) Descriptor() ([]byte, []int) {
	return file_nlri_proto_rawDescGZIP(), []int{26}
}

func (x *LsNodeNLRI) GetLocalNode() *LsNodeDescriptor {
	if x != nil {
		return x.LocalNode
	}
	return nil
}

type LsLinkNLRI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalNode      *LsNodeDescriptor `protobuf:"bytes,1,opt,name=local_node,json=localNode,proto3" json:"local_node,omitempty"`
	RemoteNode     *LsNodeDescriptor `protobuf:"bytes,2,opt,name=remote_node,json=remoteNode,proto3" json:"remote_node,omitempty"`
	LinkDescriptor *LsLinkDescriptor `protobuf:"bytes,3,opt,name=link_descriptor,json=linkDescriptor,proto3" json:"link_descriptor,omitempty"`
}

func (x *LsLinkNLRI) Reset() {
	*x = LsLinkNLRI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlri_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LsLinkNLRI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LsLinkNLRI) ProtoMessage() {}

func (x *LsLinkNLRI) ProtoReflect() protoreflect.Message {
	mi := &file_nlri_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LsLinkNLRI.ProtoReflect.Descriptor instead.
func (*LsLinkNLRI) Descriptor() ([]byte, []int) {
	return file_nlri_proto_rawDescGZIP(), []int{27}
}

func (x *LsLinkNLRI) GetLocalNode() *LsNodeDescriptor {
	if x != nil {
		return x.LocalNode
	}
	return nil
}

func (x *LsLinkNLRI) GetRemoteNode() *LsNodeDescriptor {
	if x != nil {
		return x.RemoteNode
	}
	return nil
}

func (x *LsLinkNLRI) GetLinkDescriptor() *LsLinkDescriptor {
	if x != nil {
		return x.LinkDescriptor
	}
	return nil
}

type LsPrefixV4NLRI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalNode        *LsNodeDescriptor   `protobuf:"bytes,1,opt,name=local_node,json=localNode,proto3" json:"local_node,omitempty"`
	PrefixDescriptor *LsPrefixDescriptor `protobuf:"bytes,2,opt,name=prefix_descriptor,json=prefixDescriptor,proto3" json:"prefix_descriptor,omitempty"`
}

func (x *LsPrefixV4NLRI) Reset() {
	*x = LsPrefixV4NLRI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlri_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LsPrefixV4NLRI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LsPrefixV4NLRI) ProtoMessage() {}

func (x *LsPrefixV4NLRI) ProtoReflect() protoreflect.Message {
	mi := &file_nlri_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LsPrefixV4NLRI.ProtoReflect.Descriptor instead.
func (*LsPrefixV4NLRI) Descriptor() ([]byte, []int) {
	return file_nlri_proto_rawDescGZIP(), []int{28}
}

func (x *LsPrefixV4NLRI) GetLocalNode() *LsNodeDescriptor {
	if x != nil {
		return x.LocalNode
	}
	return nil
}

func (x *LsPrefixV4NLRI) GetPrefixDescriptor() *LsPrefixDescriptor {
	if x != nil {
		return x.PrefixDescriptor
	}
	return nil
}

type LsPrefixV6NLRI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalNode        *LsNodeDescriptor   `protobuf:"bytes,1,opt,name=local_node,json=localNode,proto3" json:"local_node,omitempty"`
	PrefixDescriptor *LsPrefixDescriptor `protobuf:"bytes,2,opt,name=prefix_descriptor,json=prefixDescriptor,proto3" json:"prefix_descriptor,omitempty"`
}

func (x *LsPrefixV6NLRI) Reset() {
	*x = LsPrefixV6NLRI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlri_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LsPrefixV6NLRI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LsPrefixV6NLRI) ProtoMessage() {}

func (x *LsPrefixV6NLRI) ProtoReflect() protoreflect.Message {
	mi := &file_nlri_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LsPrefixV6NLRI.ProtoReflect.Descriptor instead.
func (*LsPrefixV6NLRI) Descriptor() ([]byte, []int) {
	return file_nlri_proto_rawDescGZIP(), []int{29}
}

func (x *LsPrefixV6NLRI) GetLocalNode() *LsNodeDescriptor {
	if x != nil {
		return x.LocalNode
	}
	return nil
}

func (x *LsPrefixV6NLRI) GetPrefixDescriptor() *LsPrefixDescriptor {
	if x != nil {
		return x.PrefixDescriptor
	}
	return nil
}

// LsAddrPrefix represents the NLRI for:
// - AFI=16388, SAFI=71
type LsAddrPrefix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       LsNLRIType           `protobuf:"varint,1,opt,name=type,proto3,enum=apipb.LsNLRIType" json:"type,omitempty"`
	Nlri       *LsAddrPrefix_LsNLRI `protobuf:"bytes,2,opt,name=nlri,proto3" json:"nlri,omitempty"`
	Length     uint32               `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	ProtocolId LsProtocolID         `protobuf:"varint,4,opt,name=protocol_id,json=protocolId,proto3,enum=apipb.LsProtocolID" json:"protocol_id,omitempty"`
	Identifier uint64               `protobuf:"varint,5,opt,name=identifier,proto3" json:"identifier,omitempty"`
}

func (x *LsAddrPrefix) Reset() {
	*x = LsAddrPrefix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlri_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LsAddrPrefix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LsAddrPrefix) ProtoMessage() {}

func (x *LsAddrPrefix) ProtoReflect() protoreflect.Message {
	mi := &file_nlri_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LsAddrPrefix.ProtoReflect.Descriptor instead.
func (*LsAddrPrefix) Descriptor() ([]byte, []int) {
	return file_nlri_proto_rawDescGZIP(), []int{30}
}

func (x *LsAddrPrefix) GetType() LsNLRIType {
	if x != nil {
		return x.Type
	}
	return LsNLRIType_LS_NLRI_UNKNOWN
}

func (x *LsAddrPrefix) GetNlri() *LsAddrPrefix_LsNLRI {
	if x != nil {
		return x.Nlri
	}
	return nil
}

func (x *LsAddrPrefix) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *LsAddrPrefix) GetProtocolId() LsProtocolID {
	if x != nil {
		return x.ProtocolId
	}
	return LsProtocolID_LS_PROTOCOL_UNKNOWN
}

func (x *LsAddrPrefix) GetIdentifier() uint64 {
	if x != nil {
		return x.Identifier
	}
	return 0
}

type MUPInterworkSegmentDiscoveryRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rd     *RouteDistinguisher `protobuf:"bytes,1,opt,name=rd,proto3" json:"rd,omitempty"`
	Prefix string              `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *MUPInterworkSegmentDiscoveryRoute) Reset() {
	*x = MUPInterworkSegmentDiscoveryRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlri_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MUPInterworkSegmentDiscoveryRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MUPInterworkSegmentDiscoveryRoute) ProtoMessage() {}

func (x *MUPInterworkSegmentDiscoveryRoute) ProtoReflect() protoreflect.Message {
	mi := &file_nlri_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MUPInterworkSegmentDiscoveryRoute.ProtoReflect.Descriptor instead.
func (*MUPInterworkSegmentDiscoveryRoute) Descriptor() ([]byte, []int) {
	return file_nlri_proto_rawDescGZIP(), []int{31}
}

func (x *MUPInterworkSegmentDiscoveryRoute) GetRd() *RouteDistinguisher {
	if x != nil {
		return x.Rd
	}
	return nil
}

func (x *MUPInterworkSegmentDiscoveryRoute) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

type MUPDirectSegmentDiscoveryRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rd      *RouteDistinguisher `protobuf:"bytes,1,opt,name=rd,proto3" json:"rd,omitempty"`
	Address string              `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *MUPDirectSegmentDiscoveryRoute) Reset() {
	*x = MUPDirectSegmentDiscoveryRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlri_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MUPDirectSegmentDiscoveryRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MUPDirectSegmentDiscoveryRoute) ProtoMessage() {}

func (x *MUPDirectSegmentDiscoveryRoute) ProtoReflect() protoreflect.Message {
	mi := &file_nlri_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MUPDirectSegmentDiscoveryRoute.ProtoReflect.Descriptor instead.
func (*MUPDirectSegmentDiscoveryRoute) Descriptor() ([]byte, []int) {
	return file_nlri_proto_rawDescGZIP(), []int{32}
}

func (x *MUPDirectSegmentDiscoveryRoute) GetRd() *RouteDistinguisher {
	if x != nil {
		return x.Rd
	}
	return nil
}

func (x *MUPDirectSegmentDiscoveryRoute) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type MUPType1SessionTransformedRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rd *RouteDistinguisher `protobuf:"bytes,1,opt,name=rd,proto3" json:"rd,omitempty"`
	// Deprecated: Do not use.
	PrefixLength          uint32 `protobuf:"varint,2,opt,name=prefix_length,json=prefixLength,proto3" json:"prefix_length,omitempty"`
	Prefix                string `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Teid                  uint32 `protobuf:"varint,4,opt,name=teid,proto3" json:"teid,omitempty"`
	Qfi                   uint32 `protobuf:"varint,5,opt,name=qfi,proto3" json:"qfi,omitempty"`
	EndpointAddressLength uint32 `protobuf:"varint,6,opt,name=endpoint_address_length,json=endpointAddressLength,proto3" json:"endpoint_address_length,omitempty"`
	EndpointAddress       string `protobuf:"bytes,7,opt,name=endpoint_address,json=endpointAddress,proto3" json:"endpoint_address,omitempty"`
	SourceAddressLength   uint32 `protobuf:"varint,8,opt,name=source_address_length,json=sourceAddressLength,proto3" json:"source_address_length,omitempty"`
	SourceAddress         string `protobuf:"bytes,9,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
}

func (x *MUPType1SessionTransformedRoute) Reset() {
	*x = MUPType1SessionTransformedRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlri_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MUPType1SessionTransformedRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MUPType1SessionTransformedRoute) ProtoMessage() {}

func (x *MUPType1SessionTransformedRoute) ProtoReflect() protoreflect.Message {
	mi := &file_nlri_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MUPType1SessionTransformedRoute.ProtoReflect.Descriptor instead.
func (*MUPType1SessionTransformedRoute) Descriptor() ([]byte, []int) {
	return file_nlri_proto_rawDescGZIP(), []int{33}
}

func (x *MUPType1SessionTransformedRoute) GetRd() *RouteDistinguisher {
	if x != nil {
		return x.Rd
	}
	return nil
}

// Deprecated: Do not use.
func (x *MUPType1SessionTransformedRoute) GetPrefixLength() uint32 {
	if x != nil {
		return x.PrefixLength
	}
	return 0
}

func (x *MUPType1SessionTransformedRoute) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *MUPType1SessionTransformedRoute) GetTeid() uint32 {
	if x != nil {
		return x.Teid
	}
	return 0
}

func (x *MUPType1SessionTransformedRoute) GetQfi() uint32 {
	if x != nil {
		return x.Qfi
	}
	return 0
}

func (x *MUPType1SessionTransformedRoute) GetEndpointAddressLength() uint32 {
	if x != nil {
		return x.EndpointAddressLength
	}
	return 0
}

func (x *MUPType1SessionTransformedRoute) GetEndpointAddress() string {
	if x != nil {
		return x.EndpointAddress
	}
	return ""
}

func (x *MUPType1SessionTransformedRoute) GetSourceAddressLength() uint32 {
	if x != nil {
		return x.SourceAddressLength
	}
	return 0
}

func (x *MUPType1SessionTransformedRoute) GetSourceAddress() string {
	if x != nil {
		return x.SourceAddress
	}
	return ""
}

type MUPType2SessionTransformedRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rd                    *RouteDistinguisher `protobuf:"bytes,1,opt,name=rd,proto3" json:"rd,omitempty"`
	EndpointAddressLength uint32              `protobuf:"varint,2,opt,name=endpoint_address_length,json=endpointAddressLength,proto3" json:"endpoint_address_length,omitempty"`
	EndpointAddress       string              `protobuf:"bytes,3,opt,name=endpoint_address,json=endpointAddress,proto3" json:"endpoint_address,omitempty"`
	Teid                  uint32              `protobuf:"varint,4,opt,name=teid,proto3" json:"teid,omitempty"`
}

func (x *MUPType2SessionTransformedRoute) Reset() {
	*x = MUPType2SessionTransformedRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlri_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MUPType2SessionTransformedRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MUPType2SessionTransformedRoute) ProtoMessage() {}

func (x *MUPType2SessionTransformedRoute) ProtoReflect() protoreflect.Message {
	mi := &file_nlri_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MUPType2SessionTransformedRoute.ProtoReflect.Descriptor instead.
func (*MUPType2SessionTransformedRoute) Descriptor() ([]byte, []int) {
	return file_nlri_proto_rawDescGZIP(), []int{34}
}

func (x *MUPType2SessionTransformedRoute) GetRd() *RouteDistinguisher {
	if x != nil {
		return x.Rd
	}
	return nil
}

func (x *MUPType2SessionTransformedRoute) GetEndpointAddressLength() uint32 {
	if x != nil {
		return x.EndpointAddressLength
	}
	return 0
}

func (x *MUPType2SessionTransformedRoute) GetEndpointAddress() string {
	if x != nil {
		return x.EndpointAddress
	}
	return ""
}

func (x *MUPType2SessionTransformedRoute) GetTeid() uint32 {
	if x != nil {
		return x.Teid
	}
	return 0
}

type LsAddrPrefix_LsNLRI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Nlri:
	//
	//	*LsAddrPrefix_LsNLRI_Node
	//	*LsAddrPrefix_LsNLRI_Link
	//	*LsAddrPrefix_LsNLRI_PrefixV4
	//	*LsAddrPrefix_LsNLRI_PrefixV6
	Nlri isLsAddrPrefix_LsNLRI_Nlri `protobuf_oneof:"nlri"`
}

func (x *LsAddrPrefix_LsNLRI) Reset() {
	*x = LsAddrPrefix_LsNLRI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nlri_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LsAddrPrefix_LsNLRI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LsAddrPrefix_LsNLRI) ProtoMessage() {}

func (x *LsAddrPrefix_LsNLRI) ProtoReflect() protoreflect.Message {
	mi := &file_nlri_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LsAddrPrefix_LsNLRI.ProtoReflect.Descriptor instead.
func (*LsAddrPrefix_LsNLRI) Descriptor() ([]byte, []int) {
	return file_nlri_proto_rawDescGZIP(), []int{30, 0}
}

func (m *LsAddrPrefix_LsNLRI) GetNlri() isLsAddrPrefix_LsNLRI_Nlri {
	if m != nil {
		return m.Nlri
	}
	return nil
}

func (x *LsAddrPrefix_LsNLRI) GetNode() *LsNodeNLRI {
	if x, ok := x.GetNlri().(*LsAddrPrefix_LsNLRI_Node); ok {
		return x.Node
	}
	return nil
}

func (x *LsAddrPrefix_LsNLRI) GetLink() *LsLinkNLRI {
	if x, ok := x.GetNlri().(*LsAddrPrefix_LsNLRI_Link); ok {
		return x.Link
	}
	return nil
}

func (x *LsAddrPrefix_LsNLRI) GetPrefixV4() *LsPrefixV4NLRI {
	if x, ok := x.GetNlri().(*LsAddrPrefix_LsNLRI_PrefixV4); ok {
		return x.PrefixV4
	}
	return nil
}

func (x *LsAddrPrefix_LsNLRI) GetPrefixV6() *LsPrefixV6NLRI {
	if x, ok := x.GetNlri().(*LsAddrPrefix_LsNLRI_PrefixV6); ok {
		return x.PrefixV6
	}
	return nil
}

type isLsAddrPrefix_LsNLRI_Nlri interface {
	isLsAddrPrefix_LsNLRI_Nlri()
}

type LsAddrPrefix_LsNLRI_Node struct {
	Node *LsNodeNLRI `protobuf:"bytes,1,opt,name=node,proto3,oneof"`
}

type LsAddrPrefix_LsNLRI_Link struct {
	Link *LsLinkNLRI `protobuf:"bytes,2,opt,name=link,proto3,oneof"`
}

type LsAddrPrefix_LsNLRI_PrefixV4 struct {
	PrefixV4 *LsPrefixV4NLRI `protobuf:"bytes,3,opt,name=prefix_v4,json=prefixV4,proto3,oneof"`
}

type LsAddrPrefix_LsNLRI_PrefixV6 struct {
	PrefixV6 *LsPrefixV6NLRI `protobuf:"bytes,4,opt,name=prefix_v6,json=prefixV6,proto3,oneof"`
}

func (*LsAddrPrefix_LsNLRI_Node) isLsAddrPrefix_LsNLRI_Nlri() {}

func (*LsAddrPrefix_LsNLRI_Link) isLsAddrPrefix_LsNLRI_Nlri() {}

func (*LsAddrPrefix_LsNLRI_PrefixV4) isLsAddrPrefix_LsNLRI_Nlri() {}

func (*LsAddrPrefix_LsNLRI_PrefixV6) isLsAddrPrefix_LsNLRI_Nlri() {}

var File_nlri_proto protoreflect.FileDescriptor

var file_nlri_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x6e, 0x6c, 0x72, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x61, 0x70,
	0x69, 0x70, 0x62, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0c, 0x65, 0x78, 0x74, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xb1, 0x0c, 0x0a, 0x04, 0x4e, 0x4c, 0x52, 0x49, 0x12, 0x30, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62,
	0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x48, 0x00, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x46, 0x0a, 0x0e, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x65, 0x64, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x48, 0x00, 0x52, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x12, 0x40, 0x0a, 0x0d, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x70,
	0x62, 0x2e, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x4c, 0x52, 0x49, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x70, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x56, 0x50, 0x4c, 0x53, 0x4e,
	0x4c, 0x52, 0x49, 0x48, 0x00, 0x52, 0x04, 0x76, 0x70, 0x6c, 0x73, 0x12, 0x51, 0x0a, 0x10, 0x65,
	0x76, 0x70, 0x6e, 0x5f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x45, 0x56,
	0x50, 0x4e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0e,
	0x65, 0x76, 0x70, 0x6e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x41, 0x64, 0x12, 0x45,
	0x0a, 0x0b, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x6d, 0x61, 0x63, 0x61, 0x64, 0x76, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x45, 0x56, 0x50, 0x4e,
	0x4d, 0x41, 0x43, 0x49, 0x50, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x76, 0x70, 0x6e, 0x4d,
	0x61, 0x63, 0x61, 0x64, 0x76, 0x12, 0x56, 0x0a, 0x0e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x45, 0x56, 0x50, 0x4e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73,
	0x69, 0x76, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x54, 0x61, 0x67, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0d,
	0x65, 0x76, 0x70, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0x55, 0x0a,
	0x15, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61,
	0x70, 0x69, 0x70, 0x62, 0x2e, 0x45, 0x56, 0x50, 0x4e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x13, 0x65, 0x76, 0x70, 0x6e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0e, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x69, 0x70, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61,
	0x70, 0x69, 0x70, 0x62, 0x2e, 0x45, 0x56, 0x50, 0x4e, 0x49, 0x50, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x76, 0x70, 0x6e, 0x49, 0x70,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x37, 0x0a, 0x0b, 0x65, 0x76, 0x70, 0x6e, 0x5f, 0x69,
	0x5f, 0x70, 0x6d, 0x73, 0x69, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70,
	0x69, 0x70, 0x62, 0x2e, 0x45, 0x56, 0x50, 0x4e, 0x49, 0x50, 0x4d, 0x53, 0x49, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x09, 0x65, 0x76, 0x70, 0x6e, 0x49, 0x50, 0x6d, 0x73, 0x69, 0x12,
	0x55, 0x0a, 0x15, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x76, 0x70, 0x6e, 0x5f, 0x69,
	0x70, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x56, 0x50,
	0x4e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x48, 0x00, 0x52, 0x12, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x56, 0x70, 0x6e, 0x49, 0x70,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x5a, 0x0a, 0x17, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x4e, 0x4c, 0x52, 0x49, 0x48, 0x00, 0x52, 0x15, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x12, 0x32, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x46, 0x6c,
	0x6f, 0x77, 0x53, 0x70, 0x65, 0x63, 0x4e, 0x4c, 0x52, 0x49, 0x48, 0x00, 0x52, 0x08, 0x66, 0x6c,
	0x6f, 0x77, 0x53, 0x70, 0x65, 0x63, 0x12, 0x3c, 0x0a, 0x0d, 0x76, 0x70, 0x6e, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x56, 0x50, 0x4e, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x70, 0x65,
	0x63, 0x4e, 0x4c, 0x52, 0x49, 0x48, 0x00, 0x52, 0x0b, 0x76, 0x70, 0x6e, 0x46, 0x6c, 0x6f, 0x77,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x2b, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x61,
	0x71, 0x75, 0x65, 0x4e, 0x4c, 0x52, 0x49, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75,
	0x65, 0x12, 0x3b, 0x0a, 0x0e, 0x6c, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x70,
	0x62, 0x2e, 0x4c, 0x73, 0x41, 0x64, 0x64, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x48, 0x00,
	0x52, 0x0c, 0x6c, 0x73, 0x41, 0x64, 0x64, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x32,
	0x0a, 0x09, 0x73, 0x72, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x53, 0x52, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x4e, 0x4c, 0x52, 0x49, 0x48, 0x00, 0x52, 0x08, 0x73, 0x72, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x71, 0x0a, 0x1f, 0x6d, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70,
	0x69, 0x70, 0x62, 0x2e, 0x4d, 0x55, 0x50, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6b,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x48, 0x00, 0x52, 0x1c, 0x6d, 0x75, 0x70, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x68, 0x0a, 0x1c, 0x6d, 0x75, 0x70, 0x5f, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70,
	0x69, 0x70, 0x62, 0x2e, 0x4d, 0x55, 0x50, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x19, 0x6d, 0x75, 0x70, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12,
	0x6c, 0x0a, 0x1e, 0x6d, 0x75, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x31, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e,
	0x4d, 0x55, 0x50, 0x54, 0x79, 0x70, 0x65, 0x31, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x1a, 0x6d, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x31, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x6c, 0x0a,
	0x1e, 0x6d, 0x75, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x32, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x4d, 0x55,
	0x50, 0x54, 0x79, 0x70, 0x65, 0x32, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x1a, 0x6d, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x32, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x6e,
	0x6c, 0x72, 0x69, 0x22, 0x48, 0x0a, 0x0f, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x4c, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0x67, 0x0a,
	0x16, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0x2d, 0x0a, 0x11, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x4c, 0x52, 0x49, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xc0, 0x01, 0x0a, 0x08, 0x56, 0x50, 0x4c, 0x53, 0x4e, 0x4c,
	0x52, 0x49, 0x12, 0x29, 0x0a, 0x02, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x72, 0x52, 0x02, 0x72, 0x64, 0x12, 0x13, 0x0a,
	0x05, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x76, 0x65,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x76, 0x65, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x76, 0x65,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x76, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x61, 0x73, 0x65, 0x22, 0x45, 0x0a, 0x19, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xb8, 0x01, 0x0a, 0x1e, 0x45, 0x56, 0x50, 0x4e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x41, 0x75, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x12, 0x29, 0x0a, 0x02, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x72, 0x52, 0x02, 0x72, 0x64, 0x12, 0x32, 0x0a,
	0x03, 0x65, 0x73, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69,
	0x70, 0x62, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x03, 0x65, 0x73,
	0x69, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x74, 0x61,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x54, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0xf7, 0x01, 0x0a, 0x1b, 0x45,
	0x56, 0x50, 0x4e, 0x4d, 0x41, 0x43, 0x49, 0x50, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x02, 0x72, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65,
	0x72, 0x52, 0x02, 0x72, 0x64, 0x12, 0x32, 0x0a, 0x03, 0x65, 0x73, 0x69, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x03, 0x65, 0x73, 0x69, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x54, 0x61, 0x67, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x26, 0x45, 0x56, 0x50, 0x4e, 0x49, 0x6e, 0x63,
	0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x54, 0x61, 0x67, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12,
	0x29, 0x0a, 0x02, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70,
	0x69, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x75, 0x69, 0x73, 0x68, 0x65, 0x72, 0x52, 0x02, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x54, 0x61, 0x67, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x98, 0x01, 0x0a,
	0x18, 0x45, 0x56, 0x50, 0x4e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x02, 0x72, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x72,
	0x52, 0x02, 0x72, 0x64, 0x12, 0x32, 0x0a, 0x03, 0x65, 0x73, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x03, 0x65, 0x73, 0x69, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x8b, 0x02, 0x0a, 0x11, 0x45, 0x56, 0x50, 0x4e,
	0x49, 0x50, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x29, 0x0a,
	0x02, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x70,
	0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69,
	0x73, 0x68, 0x65, 0x72, 0x52, 0x02, 0x72, 0x64, 0x12, 0x32, 0x0a, 0x03, 0x65, 0x73, 0x69, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x45, 0x74,
	0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x03, 0x65, 0x73, 0x69, 0x12, 0x21, 0x0a, 0x0c,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x54, 0x61, 0x67, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x22, 0x0a, 0x0d,
	0x69, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x82, 0x01, 0x0a, 0x0e, 0x45, 0x56, 0x50, 0x4e, 0x49, 0x50,
	0x4d, 0x53, 0x49, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x02, 0x72, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x72, 0x52,
	0x02, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f,
	0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x54, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x02, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x02, 0x72, 0x74, 0x22, 0x7e, 0x0a, 0x0c, 0x53, 0x52,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x4c, 0x52, 0x49, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73,
	0x68, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x95, 0x01, 0x0a, 0x19, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x65, 0x64, 0x56, 0x50, 0x4e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x29, 0x0a, 0x02, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61,
	0x70, 0x69, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x72, 0x52, 0x02, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x22, 0x51, 0x0a, 0x19, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x4e, 0x4c, 0x52, 0x49, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x61, 0x73,
	0x6e, 0x12, 0x22, 0x0a, 0x02, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x52, 0x02, 0x72, 0x74, 0x22, 0x75, 0x0a, 0x10, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x70, 0x65,
	0x63, 0x49, 0x50, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x3b, 0x0a, 0x0b,
	0x46, 0x6c, 0x6f, 0x77, 0x53, 0x70, 0x65, 0x63, 0x4d, 0x41, 0x43, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x3d, 0x0a, 0x15, 0x46, 0x6c, 0x6f,
	0x77, 0x53, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x6f, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5b, 0x0a, 0x11, 0x46, 0x6c, 0x6f, 0x77,
	0x53, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x70, 0x65,
	0x63, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xb0, 0x01, 0x0a, 0x0c, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x70,
	0x62, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x70, 0x65, 0x63, 0x49, 0x50, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x48, 0x00, 0x52, 0x08, 0x69, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x26,
	0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70,
	0x69, 0x70, 0x62, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x70, 0x65, 0x63, 0x4d, 0x41, 0x43, 0x48,
	0x00, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x70,
	0x62, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x42, 0x06, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x22, 0x39, 0x0a, 0x0c, 0x46, 0x6c, 0x6f, 0x77,
	0x53, 0x70, 0x65, 0x63, 0x4e, 0x4c, 0x52, 0x49, 0x12, 0x29, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e,
	0x46, 0x6c, 0x6f, 0x77, 0x53, 0x70, 0x65, 0x63, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x22, 0x67, 0x0a, 0x0f, 0x56, 0x50, 0x4e, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x70,
	0x65, 0x63, 0x4e, 0x4c, 0x52, 0x49, 0x12, 0x29, 0x0a, 0x02, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x72, 0x52, 0x02, 0x72,
	0x64, 0x12, 0x29, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x34, 0x0a, 0x0a,
	0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x4e, 0x4c, 0x52, 0x49, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x84, 0x02, 0x0a, 0x10, 0x4c, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x73, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x61, 0x73, 0x6e, 0x12, 0x1a, 0x0a, 0x09, 0x62, 0x67, 0x70,
	0x5f, 0x6c, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x67,
	0x70, 0x4c, 0x73, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x61, 0x72,
	0x65, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6f, 0x73, 0x70,
	0x66, 0x41, 0x72, 0x65, 0x61, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x73, 0x65, 0x75, 0x64,
	0x6f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x70, 0x73, 0x65,
	0x75, 0x64, 0x6f, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x67, 0x70, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x62,
	0x67, 0x70, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x62, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x38, 0x0a, 0x18, 0x62, 0x67, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x16, 0x62, 0x67, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x98, 0x02, 0x0a, 0x10, 0x4c, 0x73,
	0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x22,
	0x0a, 0x0d, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x6b,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x49, 0x70, 0x76, 0x34, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x49, 0x70, 0x76, 0x34, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x49, 0x70, 0x76, 0x36, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x49, 0x70, 0x76, 0x36, 0x22, 0x7d, 0x0a, 0x12, 0x4c, 0x73, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x70,
	0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x70, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x0f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61,
	0x70, 0x69, 0x70, 0x62, 0x2e, 0x4c, 0x73, 0x4f, 0x73, 0x70, 0x66, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x6f, 0x73, 0x70, 0x66, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x44, 0x0a, 0x0a, 0x4c, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x4c, 0x52,
	0x49, 0x12, 0x36, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x4c, 0x73,
	0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x09,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x0a, 0x4c, 0x73,
	0x4c, 0x69, 0x6e, 0x6b, 0x4e, 0x4c, 0x52, 0x49, 0x12, 0x36, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61,
	0x70, 0x69, 0x70, 0x62, 0x2e, 0x4c, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x38, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x4c, 0x73,
	0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x0a,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x40, 0x0a, 0x0f, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x4c, 0x73, 0x4c, 0x69,
	0x6e, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x0e, 0x6c, 0x69,
	0x6e, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x22, 0x90, 0x01, 0x0a,
	0x0e, 0x4c, 0x73, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x56, 0x34, 0x4e, 0x4c, 0x52, 0x49, 0x12,
	0x36, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x4c, 0x73, 0x4e, 0x6f,
	0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x4c, 0x73, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x10, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x22,
	0x90, 0x01, 0x0a, 0x0e, 0x4c, 0x73, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x56, 0x36, 0x4e, 0x4c,
	0x52, 0x49, 0x12, 0x36, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x4c,
	0x73, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52,
	0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x4c, 0x73,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x52, 0x10, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x22, 0xa4, 0x03, 0x0a, 0x0c, 0x4c, 0x73, 0x41, 0x64, 0x64, 0x72, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x4c, 0x73, 0x4e, 0x4c, 0x52, 0x49,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x6e, 0x6c,
	0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62,
	0x2e, 0x4c, 0x73, 0x41, 0x64, 0x64, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2e, 0x4c, 0x73,
	0x4e, 0x4c, 0x52, 0x49, 0x52, 0x04, 0x6e, 0x6c, 0x72, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x34, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e,
	0x4c, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x44, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0xce, 0x01, 0x0a, 0x06, 0x4c, 0x73, 0x4e,
	0x4c, 0x52, 0x49, 0x12, 0x27, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x4c, 0x73, 0x4e, 0x6f, 0x64, 0x65,
	0x4e, 0x4c, 0x52, 0x49, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x04,
	0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69,
	0x70, 0x62, 0x2e, 0x4c, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x4e, 0x4c, 0x52, 0x49, 0x48, 0x00, 0x52,
	0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x34, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f,
	0x76, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62,
	0x2e, 0x4c, 0x73, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x56, 0x34, 0x4e, 0x4c, 0x52, 0x49, 0x48,
	0x00, 0x52, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x56, 0x34, 0x12, 0x34, 0x0a, 0x09, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x76, 0x36, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x4c, 0x73, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x56,
	0x36, 0x4e, 0x4c, 0x52, 0x49, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x56,
	0x36, 0x42, 0x06, 0x0a, 0x04, 0x6e, 0x6c, 0x72, 0x69, 0x22, 0x66, 0x0a, 0x21, 0x4d, 0x55, 0x50,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x29,
	0x0a, 0x02, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69,
	0x70, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75,
	0x69, 0x73, 0x68, 0x65, 0x72, 0x52, 0x02, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x22, 0x65, 0x0a, 0x1e, 0x4d, 0x55, 0x50, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x02, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x72, 0x52, 0x02, 0x72, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xf1, 0x02, 0x0a, 0x1f, 0x4d, 0x55, 0x50,
	0x54, 0x79, 0x70, 0x65, 0x31, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x02,
	0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x70, 0x62,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x75, 0x69, 0x73,
	0x68, 0x65, 0x72, 0x52, 0x02, 0x72, 0x64, 0x12, 0x27, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x65, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x71, 0x66, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x71, 0x66, 0x69, 0x12, 0x36,
	0x0a, 0x17, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x15, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xc3, 0x01, 0x0a,
	0x1f, 0x4d, 0x55, 0x50, 0x54, 0x79, 0x70, 0x65, 0x32, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x12, 0x29, 0x0a, 0x02, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61,
	0x70, 0x69, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x75, 0x69, 0x73, 0x68, 0x65, 0x72, 0x52, 0x02, 0x72, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x65,
	0x69, 0x64, 0x2a, 0x73, 0x0a, 0x0a, 0x4c, 0x73, 0x4e, 0x4c, 0x52, 0x49, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x53, 0x5f, 0x4e, 0x4c, 0x52, 0x49, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x53, 0x5f, 0x4e, 0x4c, 0x52, 0x49,
	0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x53, 0x5f, 0x4e, 0x4c,
	0x52, 0x49, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x53, 0x5f,
	0x4e, 0x4c, 0x52, 0x49, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f, 0x56, 0x34, 0x10, 0x03,
	0x12, 0x15, 0x0a, 0x11, 0x4c, 0x53, 0x5f, 0x4e, 0x4c, 0x52, 0x49, 0x5f, 0x50, 0x52, 0x45, 0x46,
	0x49, 0x58, 0x5f, 0x56, 0x36, 0x10, 0x04, 0x2a, 0xbb, 0x01, 0x0a, 0x0c, 0x4c, 0x73, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x53, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c,
	0x5f, 0x49, 0x53, 0x49, 0x53, 0x5f, 0x4c, 0x31, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x53,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x53, 0x49, 0x53, 0x5f, 0x4c,
	0x32, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4f, 0x4c, 0x5f, 0x4f, 0x53, 0x50, 0x46, 0x5f, 0x56, 0x32, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12,
	0x4c, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x44, 0x49, 0x52, 0x45,
	0x43, 0x54, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13,
	0x4c, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4f, 0x53, 0x50, 0x46,
	0x5f, 0x56, 0x33, 0x10, 0x06, 0x2a, 0xf7, 0x01, 0x0a, 0x0f, 0x4c, 0x73, 0x4f, 0x73, 0x70, 0x66,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x4c, 0x53, 0x5f,
	0x4f, 0x53, 0x50, 0x46, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x4c, 0x53, 0x5f,
	0x4f, 0x53, 0x50, 0x46, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x4e, 0x54, 0x52, 0x41, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d,
	0x4c, 0x53, 0x5f, 0x4f, 0x53, 0x50, 0x46, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x52, 0x45, 0x41, 0x10, 0x02, 0x12,
	0x20, 0x0a, 0x1c, 0x4c, 0x53, 0x5f, 0x4f, 0x53, 0x50, 0x46, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x31, 0x10,
	0x03, 0x12, 0x20, 0x0a, 0x1c, 0x4c, 0x53, 0x5f, 0x4f, 0x53, 0x50, 0x46, 0x5f, 0x52, 0x4f, 0x55,
	0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c,
	0x32, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x53, 0x5f, 0x4f, 0x53, 0x50, 0x46, 0x5f, 0x52,
	0x4f, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x53, 0x53, 0x41, 0x31, 0x10,
	0x05, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x53, 0x5f, 0x4f, 0x53, 0x50, 0x46, 0x5f, 0x52, 0x4f, 0x55,
	0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x53, 0x53, 0x41, 0x32, 0x10, 0x06, 0x42,
	0x24, 0x5a, 0x22, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x73,
	0x72, 0x67, 0x2f, 0x67, 0x6f, 0x62, 0x67, 0x70, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x3b,
	0x61, 0x70, 0x69, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nlri_proto_rawDescOnce sync.Once
	file_nlri_proto_rawDescData = file_nlri_proto_rawDesc
)

func file_nlri_proto_rawDescGZIP() []byte {
	file_nlri_proto_rawDescOnce.Do(func() {
		file_nlri_proto_rawDescData = protoimpl.X.CompressGZIP(file_nlri_proto_rawDescData)
	})
	return file_nlri_proto_rawDescData
}

var file_nlri_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_nlri_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_nlri_proto_goTypes = []interface{}{
	(LsNLRIType)(0),                                // 0: apipb.LsNLRIType
	(LsProtocolID)(0),                              // 1: apipb.LsProtocolID
	(LsOspfRouteType)(0),                           // 2: apipb.LsOspfRouteType
	(*NLRI)(nil),                                   // 3: apipb.NLRI
	(*IPAddressPrefix)(nil),                        // 4: apipb.IPAddressPrefix
	(*LabeledIPAddressPrefix)(nil),                 // 5: apipb.LabeledIPAddressPrefix
	(*EncapsulationNLRI)(nil),                      // 6: apipb.EncapsulationNLRI
	(*VPLSNLRI)(nil),                               // 7: apipb.VPLSNLRI
	(*EthernetSegmentIdentifier)(nil),              // 8: apipb.EthernetSegmentIdentifier
	(*EVPNEthernetAutoDiscoveryRoute)(nil),         // 9: apipb.EVPNEthernetAutoDiscoveryRoute
	(*EVPNMACIPAdvertisementRoute)(nil),            // 10: apipb.EVPNMACIPAdvertisementRoute
	(*EVPNInclusiveMulticastEthernetTagRoute)(nil), // 11: apipb.EVPNInclusiveMulticastEthernetTagRoute
	(*EVPNEthernetSegmentRoute)(nil),               // 12: apipb.EVPNEthernetSegmentRoute
	(*EVPNIPPrefixRoute)(nil),                      // 13: apipb.EVPNIPPrefixRoute
	(*EVPNIPMSIRoute)(nil),                         // 14: apipb.EVPNIPMSIRoute
	(*SRPolicyNLRI)(nil),                           // 15: apipb.SRPolicyNLRI
	(*LabeledVPNIPAddressPrefix)(nil),              // 16: apipb.LabeledVPNIPAddressPrefix
	(*RouteTargetMembershipNLRI)(nil),              // 17: apipb.RouteTargetMembershipNLRI
	(*FlowSpecIPPrefix)(nil),                       // 18: apipb.FlowSpecIPPrefix
	(*FlowSpecMAC)(nil),                            // 19: apipb.FlowSpecMAC
	(*FlowSpecComponentItem)(nil),                  // 20: apipb.FlowSpecComponentItem
	(*FlowSpecComponent)(nil),                      // 21: apipb.FlowSpecComponent
	(*FlowSpecRule)(nil),                           // 22: apipb.FlowSpecRule
	(*FlowSpecNLRI)(nil),                           // 23: apipb.FlowSpecNLRI
	(*VPNFlowSpecNLRI)(nil),                        // 24: apipb.VPNFlowSpecNLRI
	(*OpaqueNLRI)(nil),                             // 25: apipb.OpaqueNLRI
	(*LsNodeDescriptor)(nil),                       // 26: apipb.LsNodeDescriptor
	(*LsLinkDescriptor)(nil),                       // 27: apipb.LsLinkDescriptor
	(*LsPrefixDescriptor)(nil),                     // 28: apipb.LsPrefixDescriptor
	(*LsNodeNLRI)(nil),                             // 29: apipb.LsNodeNLRI
	(*LsLinkNLRI)(nil),                             // 30: apipb.LsLinkNLRI
	(*LsPrefixV4NLRI)(nil),                         // 31: apipb.LsPrefixV4NLRI
	(*LsPrefixV6NLRI)(nil),                         // 32: apipb.LsPrefixV6NLRI
	(*LsAddrPrefix)(nil),                           // 33: apipb.LsAddrPrefix
	(*MUPInterworkSegmentDiscoveryRoute)(nil),      // 34: apipb.MUPInterworkSegmentDiscoveryRoute
	(*MUPDirectSegmentDiscoveryRoute)(nil),         // 35: apipb.MUPDirectSegmentDiscoveryRoute
	(*MUPType1SessionTransformedRoute)(nil),        // 36: apipb.MUPType1SessionTransformedRoute
	(*MUPType2SessionTransformedRoute)(nil),        // 37: apipb.MUPType2SessionTransformedRoute
	(*LsAddrPrefix_LsNLRI)(nil),                    // 38: apipb.LsAddrPrefix.LsNLRI
	(*RouteDistinguisher)(nil),                     // 39: apipb.RouteDistinguisher
	(*RouteTarget)(nil),                            // 40: apipb.RouteTarget
}
var file_nlri_proto_depIdxs = []int32{
	4,  // 0: apipb.NLRI.prefix:type_name -> apipb.IPAddressPrefix
	5,  // 1: apipb.NLRI.labeled_prefix:type_name -> apipb.LabeledIPAddressPrefix
	6,  // 2: apipb.NLRI.encapsulation:type_name -> apipb.EncapsulationNLRI
	7,  // 3: apipb.NLRI.vpls:type_name -> apipb.VPLSNLRI
	9,  // 4: apipb.NLRI.evpn_ethernet_ad:type_name -> apipb.EVPNEthernetAutoDiscoveryRoute
	10, // 5: apipb.NLRI.evpn_macadv:type_name -> apipb.EVPNMACIPAdvertisementRoute
	11, // 6: apipb.NLRI.evpn_multicast:type_name -> apipb.EVPNInclusiveMulticastEthernetTagRoute
	12, // 7: apipb.NLRI.evpn_ethernet_segment:type_name -> apipb.EVPNEthernetSegmentRoute
	13, // 8: apipb.NLRI.evpn_ip_prefix:type_name -> apipb.EVPNIPPrefixRoute
	14, // 9: apipb.NLRI.evpn_i_pmsi:type_name -> apipb.EVPNIPMSIRoute
	16, // 10: apipb.NLRI.labeled_vpn_ip_prefix:type_name -> apipb.LabeledVPNIPAddressPrefix
	17, // 11: apipb.NLRI.route_target_membership:type_name -> apipb.RouteTargetMembershipNLRI
	23, // 12: apipb.NLRI.flow_spec:type_name -> apipb.FlowSpecNLRI
	24, // 13: apipb.NLRI.vpn_flow_spec:type_name -> apipb.VPNFlowSpecNLRI
	25, // 14: apipb.NLRI.opaque:type_name -> apipb.OpaqueNLRI
	33, // 15: apipb.NLRI.ls_addr_prefix:type_name -> apipb.LsAddrPrefix
	15, // 16: apipb.NLRI.sr_policy:type_name -> apipb.SRPolicyNLRI
	34, // 17: apipb.NLRI.mup_interwork_segment_discovery:type_name -> apipb.MUPInterworkSegmentDiscoveryRoute
	35, // 18: apipb.NLRI.mup_direct_segment_discovery:type_name -> apipb.MUPDirectSegmentDiscoveryRoute
	36, // 19: apipb.NLRI.mup_type_1_session_transformed:type_name -> apipb.MUPType1SessionTransformedRoute
	37, // 20: apipb.NLRI.mup_type_2_session_transformed:type_name -> apipb.MUPType2SessionTransformedRoute
	39, // 21: apipb.VPLSNLRI.rd:type_name -> apipb.RouteDistinguisher
	39, // 22: apipb.EVPNEthernetAutoDiscoveryRoute.rd:type_name -> apipb.RouteDistinguisher
	8,  // 23: apipb.EVPNEthernetAutoDiscoveryRoute.esi:type_name -> apipb.EthernetSegmentIdentifier
	39, // 24: apipb.EVPNMACIPAdvertisementRoute.rd:type_name -> apipb.RouteDistinguisher
	8,  // 25: apipb.EVPNMACIPAdvertisementRoute.esi:type_name -> apipb.EthernetSegmentIdentifier
	39, // 26: apipb.EVPNInclusiveMulticastEthernetTagRoute.rd:type_name -> apipb.RouteDistinguisher
	39, // 27: apipb.EVPNEthernetSegmentRoute.rd:type_name -> apipb.RouteDistinguisher
	8,  // 28: apipb.EVPNEthernetSegmentRoute.esi:type_name -> apipb.EthernetSegmentIdentifier
	39, // 29: apipb.EVPNIPPrefixRoute.rd:type_name -> apipb.RouteDistinguisher
	8,  // 30: apipb.EVPNIPPrefixRoute.esi:type_name -> apipb.EthernetSegmentIdentifier
	39, // 31: apipb.EVPNIPMSIRoute.rd:type_name -> apipb.RouteDistinguisher
	40, // 32: apipb.EVPNIPMSIRoute.rt:type_name -> apipb.RouteTarget
	39, // 33: apipb.LabeledVPNIPAddressPrefix.rd:type_name -> apipb.RouteDistinguisher
	40, // 34: apipb.RouteTargetMembershipNLRI.rt:type_name -> apipb.RouteTarget
	20, // 35: apipb.FlowSpecComponent.items:type_name -> apipb.FlowSpecComponentItem
	18, // 36: apipb.FlowSpecRule.ip_prefix:type_name -> apipb.FlowSpecIPPrefix
	19, // 37: apipb.FlowSpecRule.mac:type_name -> apipb.FlowSpecMAC
	21, // 38: apipb.FlowSpecRule.component:type_name -> apipb.FlowSpecComponent
	22, // 39: apipb.FlowSpecNLRI.rules:type_name -> apipb.FlowSpecRule
	39, // 40: apipb.VPNFlowSpecNLRI.rd:type_name -> apipb.RouteDistinguisher
	22, // 41: apipb.VPNFlowSpecNLRI.rules:type_name -> apipb.FlowSpecRule
	2,  // 42: apipb.LsPrefixDescriptor.ospf_route_type:type_name -> apipb.LsOspfRouteType
	26, // 43: apipb.LsNodeNLRI.local_node:type_name -> apipb.LsNodeDescriptor
	26, // 44: apipb.LsLinkNLRI.local_node:type_name -> apipb.LsNodeDescriptor
	26, // 45: apipb.LsLinkNLRI.remote_node:type_name -> apipb.LsNodeDescriptor
	27, // 46: apipb.LsLinkNLRI.link_descriptor:type_name -> apipb.LsLinkDescriptor
	26, // 47: apipb.LsPrefixV4NLRI.local_node:type_name -> apipb.LsNodeDescriptor
	28, // 48: apipb.LsPrefixV4NLRI.prefix_descriptor:type_name -> apipb.LsPrefixDescriptor
	26, // 49: apipb.LsPrefixV6NLRI.local_node:type_name -> apipb.LsNodeDescriptor
	28, // 50: apipb.LsPrefixV6NLRI.prefix_descriptor:type_name -> apipb.LsPrefixDescriptor
	0,  // 51: apipb.LsAddrPrefix.type:type_name -> apipb.LsNLRIType
	38, // 52: apipb.LsAddrPrefix.nlri:type_name -> apipb.LsAddrPrefix.LsNLRI
	1,  // 53: apipb.LsAddrPrefix.protocol_id:type_name -> apipb.LsProtocolID
	39, // 54: apipb.MUPInterworkSegmentDiscoveryRoute.rd:type_name -> apipb.RouteDistinguisher
	39, // 55: apipb.MUPDirectSegmentDiscoveryRoute.rd:type_name -> apipb.RouteDistinguisher
	39, // 56: apipb.MUPType1SessionTransformedRoute.rd:type_name -> apipb.RouteDistinguisher
	39, // 57: apipb.MUPType2SessionTransformedRoute.rd:type_name -> apipb.RouteDistinguisher
	29, // 58: apipb.LsAddrPrefix.LsNLRI.node:type_name -> apipb.LsNodeNLRI
	30, // 59: apipb.LsAddrPrefix.LsNLRI.link:type_name -> apipb.LsLinkNLRI
	31, // 60: apipb.LsAddrPrefix.LsNLRI.prefix_v4:type_name -> apipb.LsPrefixV4NLRI
	32, // 61: apipb.LsAddrPrefix.LsNLRI.prefix_v6:type_name -> apipb.LsPrefixV6NLRI
	62, // [62:62] is the sub-list for method output_type
	62, // [62:62] is the sub-list for method input_type
	62, // [62:62] is the sub-list for extension type_name
	62, // [62:62] is the sub-list for extension extendee
	0,  // [0:62] is the sub-list for field type_name
}

func init() { file_nlri_proto_init() }
func file_nlri_proto_init() {
	if File_nlri_proto != nil {
		return
	}
	file_common_proto_init()
	file_extcom_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_nlri_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NLRI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlri_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPAddressPrefix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlri_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabeledIPAddressPrefix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlri_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncapsulationNLRI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlri_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VPLSNLRI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlri_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthernetSegmentIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlri_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EVPNEthernetAutoDiscoveryRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlri_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EVPNMACIPAdvertisementRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlri_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EVPNInclusiveMulticastEthernetTagRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlri_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EVPNEthernetSegmentRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlri_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EVPNIPPrefixRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlri_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EVPNIPMSIRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlri_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRPolicyNLRI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlri_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabeledVPNIPAddressPrefix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlri_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteTargetMembershipNLRI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlri_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowSpecIPPrefix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlri_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowSpecMAC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlri_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowSpecComponentItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlri_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowSpecComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlri_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowSpecRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlri_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowSpecNLRI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlri_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VPNFlowSpecNLRI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlri_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpaqueNLRI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlri_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LsNodeDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlri_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LsLinkDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlri_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LsPrefixDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlri_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LsNodeNLRI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlri_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LsLinkNLRI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlri_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LsPrefixV4NLRI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlri_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LsPrefixV6NLRI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlri_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LsAddrPrefix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlri_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MUPInterworkSegmentDiscoveryRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlri_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MUPDirectSegmentDiscoveryRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlri_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MUPType1SessionTransformedRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlri_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MUPType2SessionTransformedRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nlri_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LsAddrPrefix_LsNLRI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_nlri_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*NLRI_Prefix)(nil),
		(*NLRI_LabeledPrefix)(nil),
		(*NLRI_Encapsulation)(nil),
		(*NLRI_Vpls)(nil),
		(*NLRI_EvpnEthernetAd)(nil),
		(*NLRI_EvpnMacadv)(nil),
		(*NLRI_EvpnMulticast)(nil),
		(*NLRI_EvpnEthernetSegment)(nil),
		(*NLRI_EvpnIpPrefix)(nil),
		(*NLRI_EvpnIPmsi)(nil),
		(*NLRI_LabeledVpnIpPrefix)(nil),
		(*NLRI_RouteTargetMembership)(nil),
		(*NLRI_FlowSpec)(nil),
		(*NLRI_VpnFlowSpec)(nil),
		(*NLRI_Opaque)(nil),
		(*NLRI_LsAddrPrefix)(nil),
		(*NLRI_SrPolicy)(nil),
		(*NLRI_MupInterworkSegmentDiscovery)(nil),
		(*NLRI_MupDirectSegmentDiscovery)(nil),
		(*NLRI_MupType_1SessionTransformed)(nil),
		(*NLRI_MupType_2SessionTransformed)(nil),
	}
	file_nlri_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*FlowSpecRule_IpPrefix)(nil),
		(*FlowSpecRule_Mac)(nil),
		(*FlowSpecRule_Component)(nil),
	}
	file_nlri_proto_msgTypes[35].OneofWrappers = []interface{}{
		(*LsAddrPrefix_LsNLRI_Node)(nil),
		(*LsAddrPrefix_LsNLRI_Link)(nil),
		(*LsAddrPrefix_LsNLRI_PrefixV4)(nil),
		(*LsAddrPrefix_LsNLRI_PrefixV6)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nlri_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nlri_proto_goTypes,
		DependencyIndexes: file_nlri_proto_depIdxs,
		EnumInfos:         file_nlri_proto_enumTypes,
		MessageInfos:      file_nlri_proto_msgTypes,
	}.Build()
	File_nlri_proto = out.File
	file_nlri_proto_rawDesc = nil
	file_nlri_proto_goTypes = nil
	file_nlri_proto_depIdxs = nil
}
